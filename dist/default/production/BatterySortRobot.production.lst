

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 13 15:16:29 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.41
    84                           ; Generated 25/01/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F4620 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	mediumconst
   119  00FDD4                     __pmediumconst:
   120                           	opt stack 0
   121  00FDD4  00                 	db	0
   122  00FDD5                     _dpowers:
   123                           	opt stack 0
   124  00FDD5  0001               	dw	1
   125  00FDD7  000A               	dw	10
   126  00FDD9  0064               	dw	100
   127  00FDDB  03E8               	dw	1000
   128  00FDDD  2710               	dw	10000
   129  00FDDF                     __end_of_dpowers:
   130                           	opt stack 0
   131  00FDDF                     _hexpowers:
   132                           	opt stack 0
   133  00FDDF  0001               	dw	1
   134  00FDE1  0010               	dw	16
   135  00FDE3  0100               	dw	256
   136  00FDE5  1000               	dw	4096
   137  00FDE7                     __end_of_hexpowers:
   138                           	opt stack 0
   139  0000                     _PIR2bits	set	4001
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _EECON1bits	set	4006
   143  0000                     _EEADR	set	4009
   144  0000                     _EEADRH	set	4010
   145  0000                     _SSPBUF	set	4041
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _ADRESL	set	4035
   151  0000                     _ADRESH	set	4036
   152  0000                     _ADCON0bits	set	4034
   153  0000                     _LATDbits	set	3980
   154  0000                     _PORTBbits	set	3969
   155  0000                     _PORTB	set	3969
   156  0000                     _INTCONbits	set	4082
   157  0000                     _CVRCON	set	4021
   158  0000                     _ADCON1	set	4033
   159  0000                     _ADCON0	set	4034
   160  0000                     _LATE	set	3981
   161  0000                     _LATD	set	3980
   162  0000                     _LATC	set	3979
   163  0000                     _LATB	set	3978
   164  0000                     _LATA	set	3977
   165  0000                     _TRISE	set	3990
   166  0000                     _TRISD	set	3989
   167  0000                     _TRISC	set	3988
   168  0000                     _TRISB	set	3987
   169  0000                     _TRISA	set	3986
   170  0000                     _ACKEN	set	32300
   171  0000                     _ACKDT	set	32301
   172  0000                     _RCEN	set	32299
   173  0000                     _PEN	set	32298
   174  0000                     _SEN	set	32296
   175  0000                     _TRISC4	set	31908
   176  0000                     _TRISC3	set	31907
   177  0000                     _ADON	set	32272
   178  0000                     _INT1IE	set	32643
   179  0000                     _INT1IF	set	32640
   180  0000                     _INT2IF	set	32641
   181  0000                     _INT2IE	set	32644
   182  0000                     _LATC5	set	31837
   183  0000                     _ADFM	set	32263
   184  0000                     _RBPU	set	32655
   185  0000                     _LATC2	set	31834
   186  0000                     _LATC1	set	31833
   187  0000                     _LATC0	set	31832
   188  00FDE7                     STR_18:
   189                           
   190                           ; BSR set to: 0
   191  00FDE7  53                 	db	83	;'S'
   192  00FDE8  6F                 	db	111	;'o'
   193  00FDE9  72                 	db	114	;'r'
   194  00FDEA  74                 	db	116	;'t'
   195  00FDEB  69                 	db	105	;'i'
   196  00FDEC  6E                 	db	110	;'n'
   197  00FDED  67                 	db	103	;'g'
   198  00FDEE  20                 	db	32
   199  00FDEF  43                 	db	67	;'C'
   200  00FDF0  6F                 	db	111	;'o'
   201  00FDF1  6D                 	db	109	;'m'
   202  00FDF2  70                 	db	112	;'p'
   203  00FDF3  6C                 	db	108	;'l'
   204  00FDF4  65                 	db	101	;'e'
   205  00FDF5  74                 	db	116	;'t'
   206  00FDF6  65                 	db	101	;'e'
   207  00FDF7  20                 	db	32
   208  00FDF8  20                 	db	32
   209  00FDF9  20                 	db	32
   210  00FDFA  20                 	db	32
   211  00FDFB  20                 	db	32
   212  00FDFC  20                 	db	32
   213  00FDFD  20                 	db	32
   214  00FDFE  20                 	db	32
   215  00FDFF  20                 	db	32
   216  00FE00  20                 	db	32
   217  00FE01  00                 	db	0
   218  00FE02                     STR_22:
   219                           
   220                           ; BSR set to: 0
   221  00FE02  50                 	db	80	;'P'
   222  00FE03  72                 	db	114	;'r'
   223  00FE04  65                 	db	101	;'e'
   224  00FE05  73                 	db	115	;'s'
   225  00FE06  73                 	db	115	;'s'
   226  00FE07  20                 	db	32
   227  00FE08  61                 	db	97	;'a'
   228  00FE09  20                 	db	32
   229  00FE0A  6E                 	db	110	;'n'
   230  00FE0B  75                 	db	117	;'u'
   231  00FE0C  6D                 	db	109	;'m'
   232  00FE0D  62                 	db	98	;'b'
   233  00FE0E  65                 	db	101	;'e'
   234  00FE0F  72                 	db	114	;'r'
   235  00FE10  20                 	db	32
   236  00FE11  20                 	db	32
   237  00FE12  20                 	db	32
   238  00FE13  20                 	db	32
   239  00FE14  20                 	db	32
   240  00FE15  20                 	db	32
   241  00FE16  20                 	db	32
   242  00FE17  20                 	db	32
   243  00FE18  20                 	db	32
   244  00FE19  20                 	db	32
   245  00FE1A  00                 	db	0
   246  00FE1B                     STR_19:
   247                           
   248                           ; BSR set to: 0
   249  00FE1B  20                 	db	32
   250  00FE1C  20                 	db	32
   251  00FE1D  20                 	db	32
   252  00FE1E  20                 	db	32
   253  00FE1F  25                 	db	37
   254  00FE20  30                 	db	48	;'0'
   255  00FE21  32                 	db	50	;'2'
   256  00FE22  78                 	db	120	;'x'
   257  00FE23  2F                 	db	47
   258  00FE24  25                 	db	37
   259  00FE25  30                 	db	48	;'0'
   260  00FE26  32                 	db	50	;'2'
   261  00FE27  78                 	db	120	;'x'
   262  00FE28  2F                 	db	47
   263  00FE29  25                 	db	37
   264  00FE2A  30                 	db	48	;'0'
   265  00FE2B  32                 	db	50	;'2'
   266  00FE2C  78                 	db	120	;'x'
   267  00FE2D  20                 	db	32
   268  00FE2E  20                 	db	32
   269  00FE2F  20                 	db	32
   270  00FE30  20                 	db	32
   271  00FE31  20                 	db	32
   272  00FE32  20                 	db	32
   273  00FE33  00                 	db	0
   274  00FE34                     STR_20:
   275                           
   276                           ; BSR set to: 0
   277  00FE34  20                 	db	32
   278  00FE35  20                 	db	32
   279  00FE36  20                 	db	32
   280  00FE37  20                 	db	32
   281  00FE38  25                 	db	37
   282  00FE39  30                 	db	48	;'0'
   283  00FE3A  32                 	db	50	;'2'
   284  00FE3B  78                 	db	120	;'x'
   285  00FE3C  3A                 	db	58	;':'
   286  00FE3D  25                 	db	37
   287  00FE3E  30                 	db	48	;'0'
   288  00FE3F  32                 	db	50	;'2'
   289  00FE40  78                 	db	120	;'x'
   290  00FE41  3A                 	db	58	;':'
   291  00FE42  25                 	db	37
   292  00FE43  30                 	db	48	;'0'
   293  00FE44  32                 	db	50	;'2'
   294  00FE45  78                 	db	120	;'x'
   295  00FE46  20                 	db	32
   296  00FE47  20                 	db	32
   297  00FE48  20                 	db	32
   298  00FE49  20                 	db	32
   299  00FE4A  20                 	db	32
   300  00FE4B  20                 	db	32
   301  00FE4C  00                 	db	0
   302  00FE4D                     STR_16:
   303                           
   304                           ; BSR set to: 0
   305  00FE4D  25                 	db	37
   306  00FE4E  30                 	db	48	;'0'
   307  00FE4F  32                 	db	50	;'2'
   308  00FE50  78                 	db	120	;'x'
   309  00FE51  3A                 	db	58	;':'
   310  00FE52  25                 	db	37
   311  00FE53  30                 	db	48	;'0'
   312  00FE54  32                 	db	50	;'2'
   313  00FE55  78                 	db	120	;'x'
   314  00FE56  20                 	db	32
   315  00FE57  74                 	db	116	;'t'
   316  00FE58  6F                 	db	111	;'o'
   317  00FE59  20                 	db	32
   318  00FE5A  25                 	db	37
   319  00FE5B  30                 	db	48	;'0'
   320  00FE5C  32                 	db	50	;'2'
   321  00FE5D  78                 	db	120	;'x'
   322  00FE5E  3A                 	db	58	;':'
   323  00FE5F  25                 	db	37
   324  00FE60  30                 	db	48	;'0'
   325  00FE61  32                 	db	50	;'2'
   326  00FE62  78                 	db	120	;'x'
   327  00FE63  20                 	db	32
   328  00FE64  20                 	db	32
   329  00FE65  00                 	db	0
   330  00FE66                     STR_24:
   331                           
   332                           ; BSR set to: 0
   333  00FE66  54                 	db	84	;'T'
   334  00FE67  69                 	db	105	;'i'
   335  00FE68  6D                 	db	109	;'m'
   336  00FE69  65                 	db	101	;'e'
   337  00FE6A  20                 	db	32
   338  00FE6B  45                 	db	69	;'E'
   339  00FE6C  6C                 	db	108	;'l'
   340  00FE6D  61                 	db	97	;'a'
   341  00FE6E  70                 	db	112	;'p'
   342  00FE6F  73                 	db	115	;'s'
   343  00FE70  65                 	db	101	;'e'
   344  00FE71  64                 	db	100	;'d'
   345  00FE72  3A                 	db	58	;':'
   346  00FE73  20                 	db	32
   347  00FE74  20                 	db	32
   348  00FE75  20                 	db	32
   349  00FE76  20                 	db	32
   350  00FE77  20                 	db	32
   351  00FE78  20                 	db	32
   352  00FE79  20                 	db	32
   353  00FE7A  20                 	db	32
   354  00FE7B  20                 	db	32
   355  00FE7C  20                 	db	32
   356  00FE7D  00                 	db	0
   357  00FE7E                     STR_26:
   358                           
   359                           ; BSR set to: 0
   360  00FE7E  54                 	db	84	;'T'
   361  00FE7F  6F                 	db	111	;'o'
   362  00FE80  74                 	db	116	;'t'
   363  00FE81  61                 	db	97	;'a'
   364  00FE82  6C                 	db	108	;'l'
   365  00FE83  20                 	db	32
   366  00FE84  53                 	db	83	;'S'
   367  00FE85  6F                 	db	111	;'o'
   368  00FE86  72                 	db	114	;'r'
   369  00FE87  74                 	db	116	;'t'
   370  00FE88  65                 	db	101	;'e'
   371  00FE89  64                 	db	100	;'d'
   372  00FE8A  3A                 	db	58	;':'
   373  00FE8B  20                 	db	32
   374  00FE8C  20                 	db	32
   375  00FE8D  20                 	db	32
   376  00FE8E  20                 	db	32
   377  00FE8F  20                 	db	32
   378  00FE90  20                 	db	32
   379  00FE91  20                 	db	32
   380  00FE92  20                 	db	32
   381  00FE93  20                 	db	32
   382  00FE94  20                 	db	32
   383  00FE95  00                 	db	0
   384  00FE96                     STR_23:
   385                           
   386                           ; BSR set to: 0
   387  00FE96  46                 	db	70	;'F'
   388  00FE97  6F                 	db	111	;'o'
   389  00FE98  72                 	db	114	;'r'
   390  00FE99  20                 	db	32
   391  00FE9A  6D                 	db	109	;'m'
   392  00FE9B  6F                 	db	111	;'o'
   393  00FE9C  72                 	db	114	;'r'
   394  00FE9D  65                 	db	101	;'e'
   395  00FE9E  20                 	db	32
   396  00FE9F  69                 	db	105	;'i'
   397  00FEA0  6E                 	db	110	;'n'
   398  00FEA1  66                 	db	102	;'f'
   399  00FEA2  6F                 	db	111	;'o'
   400  00FEA3  20                 	db	32
   401  00FEA4  20                 	db	32
   402  00FEA5  20                 	db	32
   403  00FEA6  20                 	db	32
   404  00FEA7  20                 	db	32
   405  00FEA8  20                 	db	32
   406  00FEA9  20                 	db	32
   407  00FEAA  20                 	db	32
   408  00FEAB  20                 	db	32
   409  00FEAC  20                 	db	32
   410  00FEAD  00                 	db	0
   411  00FEAE                     STR_2:
   412                           
   413                           ; BSR set to: 0
   414  00FEAE  53                 	db	83	;'S'
   415  00FEAF  69                 	db	105	;'i'
   416  00FEB0  6D                 	db	109	;'m'
   417  00FEB1  75                 	db	117	;'u'
   418  00FEB2  6C                 	db	108	;'l'
   419  00FEB3  61                 	db	97	;'a'
   420  00FEB4  74                 	db	116	;'t'
   421  00FEB5  69                 	db	105	;'i'
   422  00FEB6  6E                 	db	110	;'n'
   423  00FEB7  67                 	db	103	;'g'
   424  00FEB8  2E                 	db	46
   425  00FEB9  2E                 	db	46
   426  00FEBA  2E                 	db	46
   427  00FEBB  20                 	db	32
   428  00FEBC  20                 	db	32
   429  00FEBD  20                 	db	32
   430  00FEBE  20                 	db	32
   431  00FEBF  20                 	db	32
   432  00FEC0  20                 	db	32
   433  00FEC1  20                 	db	32
   434  00FEC2  20                 	db	32
   435  00FEC3  20                 	db	32
   436  00FEC4  20                 	db	32
   437  00FEC5  00                 	db	0
   438  00FEC6                     STR_27:
   439                           
   440                           ; BSR set to: 0
   441  00FEC6  25                 	db	37
   442  00FEC7  75                 	db	117	;'u'
   443  00FEC8  20                 	db	32
   444  00FEC9  62                 	db	98	;'b'
   445  00FECA  61                 	db	97	;'a'
   446  00FECB  74                 	db	116	;'t'
   447  00FECC  74                 	db	116	;'t'
   448  00FECD  65                 	db	101	;'e'
   449  00FECE  72                 	db	114	;'r'
   450  00FECF  69                 	db	105	;'i'
   451  00FED0  65                 	db	101	;'e'
   452  00FED1  73                 	db	115	;'s'
   453  00FED2  20                 	db	32
   454  00FED3  20                 	db	32
   455  00FED4  20                 	db	32
   456  00FED5  20                 	db	32
   457  00FED6  20                 	db	32
   458  00FED7  20                 	db	32
   459  00FED8  20                 	db	32
   460  00FED9  20                 	db	32
   461  00FEDA  20                 	db	32
   462  00FEDB  20                 	db	32
   463  00FEDC  00                 	db	0
   464  00FEDD                     STR_34:
   465                           
   466                           ; BSR set to: 0
   467  00FEDD  55                 	db	85	;'U'
   468  00FEDE  6E                 	db	110	;'n'
   469  00FEDF  63                 	db	99	;'c'
   470  00FEE0  68                 	db	104	;'h'
   471  00FEE1  61                 	db	97	;'a'
   472  00FEE2  72                 	db	114	;'r'
   473  00FEE3  67                 	db	103	;'g'
   474  00FEE4  65                 	db	101	;'e'
   475  00FEE5  64                 	db	100	;'d'
   476  00FEE6  3A                 	db	58	;':'
   477  00FEE7  20                 	db	32
   478  00FEE8  20                 	db	32
   479  00FEE9  20                 	db	32
   480  00FEEA  20                 	db	32
   481  00FEEB  20                 	db	32
   482  00FEEC  20                 	db	32
   483  00FEED  20                 	db	32
   484  00FEEE  20                 	db	32
   485  00FEEF  20                 	db	32
   486  00FEF0  20                 	db	32
   487  00FEF1  00                 	db	0
   488  00FEF2                     STR_28:
   489                           
   490                           ; BSR set to: 0
   491  00FEF2  41                 	db	65	;'A'
   492  00FEF3  41                 	db	65	;'A'
   493  00FEF4  20                 	db	32
   494  00FEF5  53                 	db	83	;'S'
   495  00FEF6  6F                 	db	111	;'o'
   496  00FEF7  72                 	db	114	;'r'
   497  00FEF8  74                 	db	116	;'t'
   498  00FEF9  65                 	db	101	;'e'
   499  00FEFA  64                 	db	100	;'d'
   500  00FEFB  3A                 	db	58	;':'
   501  00FEFC  20                 	db	32
   502  00FEFD  20                 	db	32
   503  00FEFE  20                 	db	32
   504  00FEFF  20                 	db	32
   505  00FF00  20                 	db	32
   506  00FF01  20                 	db	32
   507  00FF02  20                 	db	32
   508  00FF03  20                 	db	32
   509  00FF04  20                 	db	32
   510  00FF05  20                 	db	32
   511  00FF06  00                 	db	0
   512  00FF07                     STR_32:
   513                           
   514                           ; BSR set to: 0
   515  00FF07  39                 	db	57	;'9'
   516  00FF08  56                 	db	86	;'V'
   517  00FF09  20                 	db	32
   518  00FF0A  53                 	db	83	;'S'
   519  00FF0B  6F                 	db	111	;'o'
   520  00FF0C  72                 	db	114	;'r'
   521  00FF0D  74                 	db	116	;'t'
   522  00FF0E  65                 	db	101	;'e'
   523  00FF0F  64                 	db	100	;'d'
   524  00FF10  3A                 	db	58	;':'
   525  00FF11  20                 	db	32
   526  00FF12  20                 	db	32
   527  00FF13  20                 	db	32
   528  00FF14  20                 	db	32
   529  00FF15  20                 	db	32
   530  00FF16  20                 	db	32
   531  00FF17  20                 	db	32
   532  00FF18  20                 	db	32
   533  00FF19  20                 	db	32
   534  00FF1A  20                 	db	32
   535  00FF1B  00                 	db	0
   536  00FF1C                     STR_25:
   537                           
   538                           ; BSR set to: 0
   539  00FF1C  25                 	db	37
   540  00FF1D  75                 	db	117	;'u'
   541  00FF1E  20                 	db	32
   542  00FF1F  73                 	db	115	;'s'
   543  00FF20  65                 	db	101	;'e'
   544  00FF21  63                 	db	99	;'c'
   545  00FF22  6F                 	db	111	;'o'
   546  00FF23  6E                 	db	110	;'n'
   547  00FF24  64                 	db	100	;'d'
   548  00FF25  73                 	db	115	;'s'
   549  00FF26  20                 	db	32
   550  00FF27  20                 	db	32
   551  00FF28  20                 	db	32
   552  00FF29  20                 	db	32
   553  00FF2A  20                 	db	32
   554  00FF2B  20                 	db	32
   555  00FF2C  20                 	db	32
   556  00FF2D  20                 	db	32
   557  00FF2E  20                 	db	32
   558  00FF2F  20                 	db	32
   559  00FF30  00                 	db	0
   560  00FF31                     STR_36:
   561                           
   562                           ; BSR set to: 0
   563  00FF31  45                 	db	69	;'E'
   564  00FF32  6D                 	db	109	;'m'
   565  00FF33  65                 	db	101	;'e'
   566  00FF34  72                 	db	114	;'r'
   567  00FF35  67                 	db	103	;'g'
   568  00FF36  65                 	db	101	;'e'
   569  00FF37  6E                 	db	110	;'n'
   570  00FF38  63                 	db	99	;'c'
   571  00FF39  79                 	db	121	;'y'
   572  00FF3A  20                 	db	32
   573  00FF3B  20                 	db	32
   574  00FF3C  20                 	db	32
   575  00FF3D  20                 	db	32
   576  00FF3E  20                 	db	32
   577  00FF3F  20                 	db	32
   578  00FF40  20                 	db	32
   579  00FF41  20                 	db	32
   580  00FF42  20                 	db	32
   581  00FF43  20                 	db	32
   582  00FF44  00                 	db	0
   583  00FF45                     STR_30:
   584                           
   585                           ; BSR set to: 0
   586  00FF45  43                 	db	67	;'C'
   587  00FF46  20                 	db	32
   588  00FF47  53                 	db	83	;'S'
   589  00FF48  6F                 	db	111	;'o'
   590  00FF49  72                 	db	114	;'r'
   591  00FF4A  74                 	db	116	;'t'
   592  00FF4B  65                 	db	101	;'e'
   593  00FF4C  64                 	db	100	;'d'
   594  00FF4D  3A                 	db	58	;':'
   595  00FF4E  20                 	db	32
   596  00FF4F  20                 	db	32
   597  00FF50  20                 	db	32
   598  00FF51  20                 	db	32
   599  00FF52  20                 	db	32
   600  00FF53  20                 	db	32
   601  00FF54  20                 	db	32
   602  00FF55  20                 	db	32
   603  00FF56  20                 	db	32
   604  00FF57  20                 	db	32
   605  00FF58  00                 	db	0
   606  00FF59                     STR_21:
   607                           
   608                           ; BSR set to: 0
   609  00FF59  57                 	db	87	;'W'
   610  00FF5A  65                 	db	101	;'e'
   611  00FF5B  6C                 	db	108	;'l'
   612  00FF5C  63                 	db	99	;'c'
   613  00FF5D  6F                 	db	111	;'o'
   614  00FF5E  6D                 	db	109	;'m'
   615  00FF5F  65                 	db	101	;'e'
   616  00FF60  21                 	db	33
   617  00FF61  20                 	db	32
   618  00FF62  20                 	db	32
   619  00FF63  20                 	db	32
   620  00FF64  20                 	db	32
   621  00FF65  20                 	db	32
   622  00FF66  20                 	db	32
   623  00FF67  20                 	db	32
   624  00FF68  20                 	db	32
   625  00FF69  20                 	db	32
   626  00FF6A  20                 	db	32
   627  00FF6B  00                 	db	0
   628  00FF6C                     STR_17:
   629                           
   630                           ; BSR set to: 0
   631  00FF6C  50                 	db	80	;'P'
   632  00FF6D  65                 	db	101	;'e'
   633  00FF6E  72                 	db	114	;'r'
   634  00FF6F  69                 	db	105	;'i'
   635  00FF70  6F                 	db	111	;'o'
   636  00FF71  64                 	db	100	;'d'
   637  00FF72  3A                 	db	58	;':'
   638  00FF73  20                 	db	32
   639  00FF74  25                 	db	37
   640  00FF75  75                 	db	117	;'u'
   641  00FF76  20                 	db	32
   642  00FF77  20                 	db	32
   643  00FF78  20                 	db	32
   644  00FF79  20                 	db	32
   645  00FF7A  20                 	db	32
   646  00FF7B  20                 	db	32
   647  00FF7C  20                 	db	32
   648  00FF7D  20                 	db	32
   649  00FF7E  00                 	db	0
   650  00FF7F                     STR_37:
   651                           
   652                           ; BSR set to: 0
   653  00FF7F  53                 	db	83	;'S'
   654  00FF80  74                 	db	116	;'t'
   655  00FF81  6F                 	db	111	;'o'
   656  00FF82  70                 	db	112	;'p'
   657  00FF83  70                 	db	112	;'p'
   658  00FF84  65                 	db	101	;'e'
   659  00FF85  64                 	db	100	;'d'
   660  00FF86  20                 	db	32
   661  00FF87  20                 	db	32
   662  00FF88  20                 	db	32
   663  00FF89  20                 	db	32
   664  00FF8A  20                 	db	32
   665  00FF8B  20                 	db	32
   666  00FF8C  20                 	db	32
   667  00FF8D  20                 	db	32
   668  00FF8E  20                 	db	32
   669  00FF8F  20                 	db	32
   670  00FF90  00                 	db	0
   671  00FF91                     STR_52:
   672                           
   673                           ; BSR set to: 0
   674  00FF91  30                 	db	48	;'0'
   675  00FF92  31                 	db	49	;'1'
   676  00FF93  32                 	db	50	;'2'
   677  00FF94  33                 	db	51	;'3'
   678  00FF95  34                 	db	52	;'4'
   679  00FF96  35                 	db	53	;'5'
   680  00FF97  36                 	db	54	;'6'
   681  00FF98  37                 	db	55	;'7'
   682  00FF99  38                 	db	56	;'8'
   683  00FF9A  39                 	db	57	;'9'
   684  00FF9B  61                 	db	97	;'a'
   685  00FF9C  62                 	db	98	;'b'
   686  00FF9D  63                 	db	99	;'c'
   687  00FF9E  64                 	db	100	;'d'
   688  00FF9F  65                 	db	101	;'e'
   689  00FFA0  66                 	db	102	;'f'
   690  00FFA1  00                 	db	0
   691  00FFA2                     STR_50:
   692                           
   693                           ; BSR set to: 0
   694  00FFA2  73                 	db	115	;'s'
   695  00FFA3  68                 	db	104	;'h'
   696  00FFA4  6F                 	db	111	;'o'
   697  00FFA5  77                 	db	119	;'w'
   698  00FFA6  69                 	db	105	;'i'
   699  00FFA7  6E                 	db	110	;'n'
   700  00FFA8  67                 	db	103	;'g'
   701  00FFA9  20                 	db	32
   702  00FFAA  25                 	db	37
   703  00FFAB  75                 	db	117	;'u'
   704  00FFAC  20                 	db	32
   705  00FFAD  20                 	db	32
   706  00FFAE  20                 	db	32
   707  00FFAF  20                 	db	32
   708  00FFB0  20                 	db	32
   709  00FFB1  20                 	db	32
   710  00FFB2  00                 	db	0
   711  00FFB3                     STR_51:
   712                           
   713                           ; BSR set to: 0
   714  00FFB3  72                 	db	114	;'r'
   715  00FFB4  75                 	db	117	;'u'
   716  00FFB5  6E                 	db	110	;'n'
   717  00FFB6  73                 	db	115	;'s'
   718  00FFB7  20                 	db	32
   719  00FFB8  62                 	db	98	;'b'
   720  00FFB9  65                 	db	101	;'e'
   721  00FFBA  66                 	db	102	;'f'
   722  00FFBB  6F                 	db	111	;'o'
   723  00FFBC  72                 	db	114	;'r'
   724  00FFBD  65                 	db	101	;'e'
   725  00FFBE  20                 	db	32
   726  00FFBF  20                 	db	32
   727  00FFC0  20                 	db	32
   728  00FFC1  20                 	db	32
   729  00FFC2  20                 	db	32
   730  00FFC3  00                 	db	0
   731  00FFC4                     STR_29:
   732                           
   733                           ; BSR set to: 0
   734  00FFC4  25                 	db	37
   735  00FFC5  75                 	db	117	;'u'
   736  00FFC6  20                 	db	32
   737  00FFC7  20                 	db	32
   738  00FFC8  20                 	db	32
   739  00FFC9  20                 	db	32
   740  00FFCA  20                 	db	32
   741  00FFCB  20                 	db	32
   742  00FFCC  20                 	db	32
   743  00FFCD  20                 	db	32
   744  00FFCE  20                 	db	32
   745  00FFCF  20                 	db	32
   746  00FFD0  20                 	db	32
   747  00FFD1  20                 	db	32
   748  00FFD2  20                 	db	32
   749  00FFD3  00                 	db	0
   750  00FFD4                     
   751                           ; BSR set to: 0
   752  00FFD4  4D                 	db	77	;'M'
   753  00FFD5  61                 	db	97	;'a'
   754  00FFD6  69                 	db	105	;'i'
   755  00FFD7  6E                 	db	110	;'n'
   756  00FFD8  6C                 	db	108	;'l'
   757  00FFD9  6F                 	db	111	;'o'
   758  00FFDA  6F                 	db	111	;'o'
   759  00FFDB  70                 	db	112	;'p'
   760  00FFDC  00                 	db	0
   761  00FFDD                     STR_12:
   762                           
   763                           ; BSR set to: 0
   764  00FFDD  20                 	db	32
   765  00FFDE  39                 	db	57	;'9'
   766  00FFDF  56                 	db	86	;'V'
   767  00FFE0  3A                 	db	58	;':'
   768  00FFE1  00                 	db	0
   769  00FFE2                     STR_40:
   770                           
   771                           ; BSR set to: 0
   772  00FFE2  20                 	db	32
   773  00FFE3  30                 	db	48	;'0'
   774  00FFE4  20                 	db	32
   775  00FFE5  00                 	db	0
   776  00FFE6                     STR_39:
   777                           
   778                           ; BSR set to: 0
   779  00FFE6  20                 	db	32
   780  00FFE7  31                 	db	49	;'1'
   781  00FFE8  20                 	db	32
   782  00FFE9  00                 	db	0
   783  00FFEA                     STR_41:
   784                           
   785                           ; BSR set to: 0
   786  00FFEA  2D                 	db	45
   787  00FFEB  31                 	db	49	;'1'
   788  00FFEC  20                 	db	32
   789  00FFED  00                 	db	0
   790  00FFEE                     STR_4:
   791                           
   792                           ; BSR set to: 0
   793  00FFEE  41                 	db	65	;'A'
   794  00FFEF  41                 	db	65	;'A'
   795  00FFF0  3A                 	db	58	;':'
   796  00FFF1  00                 	db	0
   797  00FFF2                     STR_8:
   798                           
   799                           ; BSR set to: 0
   800  00FFF2  20                 	db	32
   801  00FFF3  43                 	db	67	;'C'
   802  00FFF4  3A                 	db	58	;':'
   803  00FFF5  00                 	db	0
   804  00FFF6                     STR_6:
   805                           
   806                           ; BSR set to: 0
   807  00FFF6  20                 	db	32
   808  00FFF7  2B                 	db	43
   809  00FFF8  00                 	db	0
   810  00FFF9                     STR_5:
   811                           
   812                           ; BSR set to: 0
   813  00FFF9  20                 	db	32
   814  00FFFA  2D                 	db	45
   815  00FFFB  00                 	db	0
   816  00FFFC                     STR_7:
   817                           
   818                           ; BSR set to: 0
   819  00FFFC  20                 	db	32
   820  00FFFD  30                 	db	48	;'0'
   821  00FFFE  00                 	db	0
   822  0000                     
   823                           ; #config settings
   824  00FFFF  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           	psect	cinit
   827  001FEA                     __pcinit:
   828                           	opt stack 0
   829  001FEA                     start_initialization:
   830                           	opt stack 0
   831  001FEA                     __initialization:
   832                           	opt stack 0
   833                           
   834                           ; Clear objects allocated to BANK0 (29 bytes)
   835  001FEA  EE00  F0AA         	lfsr	0,__pbssBANK0
   836  001FEE  0E1D               	movlw	29
   837  001FF0                     clear_0:
   838  001FF0  6AEE               	clrf	postinc0,c
   839  001FF2  06E8               	decf	wreg,f,c
   840  001FF4  E1FD               	bnz	clear_0
   841                           
   842                           ; Clear objects allocated to COMRAM (9 bytes)
   843  001FF6  EE00  F074         	lfsr	0,__pbssCOMRAM
   844  001FFA  0E09               	movlw	9
   845  001FFC                     clear_1:
   846  001FFC  6AEE               	clrf	postinc0,c
   847  001FFE  06E8               	decf	wreg,f,c
   848  002000  E1FD               	bnz	clear_1
   849  002002                     end_of_initialization:
   850                           	opt stack 0
   851  002002                     __end_of__initialization:
   852                           	opt stack 0
   853  002002  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   854  002004  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   855  002006  0E00               	movlw	low (__Lmediumconst shr (0+16))
   856  002008  6EF8               	movwf	tblptru,c
   857  00200A  0100               	movlb	0
   858  00200C  EFD4  F00E         	goto	_main	;jump to C main() function
   859                           tblptru	equ	0xFF8
   860                           postinc0	equ	0xFEE
   861                           wreg	equ	0xFE8
   862                           
   863                           	psect	bssCOMRAM
   864  000074                     __pbssCOMRAM:
   865                           	opt stack 0
   866  000074                     _mode:
   867                           	opt stack 0
   868  000074                     	ds	2
   869  000076                     _time:
   870                           	opt stack 0
   871  000076                     	ds	7
   872                           tblptru	equ	0xFF8
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           
   876                           	psect	bssBANK0
   877  0000AA                     __pbssBANK0:
   878                           	opt stack 0
   879  0000AA                     simulate@F3119:
   880                           	opt stack 0
   881  0000AA                     	ds	6
   882  0000B0                     simulate@F3117:
   883                           	opt stack 0
   884  0000B0                     	ds	6
   885  0000B6                     PermLog@F3084:
   886                           	opt stack 0
   887  0000B6                     	ds	4
   888  0000BA                     simulate@F3110:
   889                           	opt stack 0
   890  0000BA                     	ds	4
   891  0000BE                     simulate@F3108:
   892                           	opt stack 0
   893  0000BE                     	ds	4
   894  0000C2                     simulate@F3106:
   895                           	opt stack 0
   896  0000C2                     	ds	4
   897  0000C6                     _Latest:
   898                           	opt stack 0
   899  0000C6                     	ds	1
   900                           tblptru	equ	0xFF8
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           
   904                           	psect	cstackBANK0
   905  000080                     __pcstackBANK0:
   906                           	opt stack 0
   907  000080                     ??_isdigit:
   908  000080                     ??_I2C_Master_Wait:
   909  000080                     ?___wmul:
   910                           	opt stack 0
   911  000080                     ?___lwdiv:
   912                           	opt stack 0
   913  000080                     ?___lldiv:
   914                           	opt stack 0
   915  000080                     lcdNibble@temp:
   916                           	opt stack 0
   917  000080                     ReadEE@address:
   918                           	opt stack 0
   919  000080                     ___wmul@multiplier:
   920                           	opt stack 0
   921  000080                     ___lwdiv@dividend:
   922                           	opt stack 0
   923  000080                     ___lldiv@dividend:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x0
   927  000080                     	ds	1
   928  000081                     lcdNibble@data:
   929                           	opt stack 0
   930  000081                     I2C_Master_Read@a:
   931                           	opt stack 0
   932  000081                     _isdigit$1056:
   933                           	opt stack 0
   934  000081                     I2C_Master_Write@d:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x1
   938  000081                     	ds	1
   939  000082                     lcdInst@data:
   940                           	opt stack 0
   941  000082                     putch@data:
   942                           	opt stack 0
   943  000082                     I2C_Master_Read@temp:
   944                           	opt stack 0
   945  000082                     isdigit@c:
   946                           	opt stack 0
   947  000082                     ___wmul@multiplicand:
   948                           	opt stack 0
   949  000082                     ___lwdiv@divisor:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x2
   953  000082                     	ds	1
   954  000083                     ??_initLCD:
   955  000083                     getTime@time:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x3
   959  000083                     	ds	1
   960  000084                     ___wmul@product:
   961                           	opt stack 0
   962  000084                     ___lwdiv@quotient:
   963                           	opt stack 0
   964  000084                     ___lldiv@divisor:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x4
   968  000084                     	ds	1
   969  000085                     getTime@i:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x5
   973  000085                     	ds	1
   974  000086                     ___lwdiv@counter:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x6
   978  000086                     	ds	1
   979  000087                     ?___lwmod:
   980                           	opt stack 0
   981  000087                     ___lwmod@dividend:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x7
   985  000087                     	ds	1
   986  000088                     ___lldiv@quotient:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x8
   990  000088                     	ds	1
   991  000089                     ___lwmod@divisor:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x9
   995  000089                     	ds	2
   996  00008B                     ___lwmod@counter:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0xB
  1000  00008B                     	ds	1
  1001  00008C                     ?_printf:
  1002                           	opt stack 0
  1003  00008C                     ___lldiv@counter:
  1004                           	opt stack 0
  1005  00008C                     printf@f:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xC
  1009  00008C                     	ds	1
  1010  00008D                     I2C_Master_Init@c:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0xD
  1014  00008D                     	ds	4
  1015  000091                     ??_I2C_Master_Init:
  1016                           
  1017                           ; 1 bytes @ 0x11
  1018  000091                     	ds	3
  1019  000094                     ??_printf:
  1020                           
  1021                           ; 1 bytes @ 0x14
  1022  000094                     	ds	1
  1023  000095                     ??_initialize:
  1024                           
  1025                           ; 1 bytes @ 0x15
  1026  000095                     	ds	3
  1027  000098                     printf@ap:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x18
  1031  000098                     	ds	2
  1032  00009A                     printf@cp:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x1A
  1036  00009A                     	ds	2
  1037  00009C                     printf@idx:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x1C
  1041  00009C                     	ds	1
  1042  00009D                     printf@len:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x1D
  1046  00009D                     	ds	2
  1047  00009F                     printf@prec:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x1F
  1051  00009F                     	ds	1
  1052  0000A0                     printf@val:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x20
  1056  0000A0                     	ds	2
  1057  0000A2                     printf@flag:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x22
  1061  0000A2                     	ds	1
  1062  0000A3                     printf@width:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x23
  1066  0000A3                     	ds	2
  1067  0000A5                     printf@c:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x25
  1071  0000A5                     	ds	1
  1072  0000A6                     ??_showRTC:
  1073                           
  1074                           ; 1 bytes @ 0x26
  1075  0000A6                     	ds	2
  1076  0000A8                     ??_main:
  1077                           
  1078                           ; 1 bytes @ 0x28
  1079  0000A8                     	ds	2
  1080                           tblptru	equ	0xFF8
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           
  1084                           	psect	cstackCOMRAM
  1085  000001                     __pcstackCOMRAM:
  1086                           	opt stack 0
  1087  000001                     ??i2_I2C_Master_Wait:
  1088  000001                     ??i2_isdigit:
  1089  000001                     ?_captureKeypad:
  1090                           	opt stack 0
  1091  000001                     ?_AD:
  1092                           	opt stack 0
  1093  000001                     ?___awdiv:
  1094                           	opt stack 0
  1095  000001                     ?i2___wmul:
  1096                           	opt stack 0
  1097  000001                     ?i2___lwdiv:
  1098                           	opt stack 0
  1099  000001                     ?___ftpack:
  1100                           	opt stack 0
  1101  000001                     back@runs:
  1102                           	opt stack 0
  1103  000001                     i2lcdNibble@temp:
  1104                           	opt stack 0
  1105  000001                     fluctuate@a:
  1106                           	opt stack 0
  1107  000001                     WriteEE@address:
  1108                           	opt stack 0
  1109  000001                     ___awdiv@dividend:
  1110                           	opt stack 0
  1111  000001                     i2ReadEE@address:
  1112                           	opt stack 0
  1113  000001                     i2___wmul@multiplier:
  1114                           	opt stack 0
  1115  000001                     i2___lwdiv@dividend:
  1116                           	opt stack 0
  1117  000001                     ___ftpack@arg:
  1118                           	opt stack 0
  1119                           
  1120                           ; 3 bytes @ 0x0
  1121  000001                     	ds	1
  1122  000002                     back@result:
  1123                           	opt stack 0
  1124  000002                     i2lcdNibble@data:
  1125                           	opt stack 0
  1126  000002                     i2I2C_Master_Read@a:
  1127                           	opt stack 0
  1128  000002                     i2_isdigit$1056:
  1129                           	opt stack 0
  1130  000002                     i2I2C_Master_Write@d:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x1
  1134  000002                     	ds	1
  1135  000003                     ??_AD:
  1136  000003                     captureKeypad@keypress:
  1137                           	opt stack 0
  1138  000003                     WriteEE@data:
  1139                           	opt stack 0
  1140  000003                     i2lcdInst@data:
  1141                           	opt stack 0
  1142  000003                     i2putch@data:
  1143                           	opt stack 0
  1144  000003                     i2I2C_Master_Read@temp:
  1145                           	opt stack 0
  1146  000003                     i2isdigit@c:
  1147                           	opt stack 0
  1148  000003                     fluctuate@b:
  1149                           	opt stack 0
  1150  000003                     ReadRun@sorted:
  1151                           	opt stack 0
  1152  000003                     ___awdiv@divisor:
  1153                           	opt stack 0
  1154  000003                     i2___wmul@multiplicand:
  1155                           	opt stack 0
  1156  000003                     i2___lwdiv@divisor:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x2
  1160  000003                     	ds	1
  1161  000004                     ___ftpack@exp:
  1162                           	opt stack 0
  1163  000004                     i2getTime@time:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x3
  1167  000004                     	ds	1
  1168  000005                     ??_fluctuate:
  1169  000005                     AD@channel:
  1170                           	opt stack 0
  1171  000005                     ___awdiv@counter:
  1172                           	opt stack 0
  1173  000005                     ___ftpack@sign:
  1174                           	opt stack 0
  1175  000005                     ReadRun@time:
  1176                           	opt stack 0
  1177  000005                     i2___wmul@product:
  1178                           	opt stack 0
  1179  000005                     i2___lwdiv@quotient:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x4
  1183  000005                     	ds	1
  1184  000006                     ??___ftpack:
  1185  000006                     ___awdiv@sign:
  1186                           	opt stack 0
  1187  000006                     i2getTime@i:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x5
  1191  000006                     	ds	1
  1192  000007                     ??_ReadRun:
  1193  000007                     ?_HexDecToDec2:
  1194                           	opt stack 0
  1195  000007                     i2___lwdiv@counter:
  1196                           	opt stack 0
  1197  000007                     HexDecToDec2@hex:
  1198                           	opt stack 0
  1199  000007                     fluctuate@i:
  1200                           	opt stack 0
  1201  000007                     WriteRun@sorted:
  1202                           	opt stack 0
  1203  000007                     ___awdiv@quotient:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x6
  1207  000007                     	ds	1
  1208  000008                     ?i2___lwmod:
  1209                           	opt stack 0
  1210  000008                     i2___lwmod@dividend:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x7
  1214  000008                     	ds	1
  1215  000009                     ??_HexDecToDec2:
  1216  000009                     ?___ftmul:
  1217                           	opt stack 0
  1218  000009                     ?___awtoft:
  1219                           	opt stack 0
  1220  000009                     PWMC@widthus:
  1221                           	opt stack 0
  1222  000009                     WriteRun@time:
  1223                           	opt stack 0
  1224  000009                     ___awtoft@c:
  1225                           	opt stack 0
  1226  000009                     ___ftmul@f1:
  1227                           	opt stack 0
  1228                           
  1229                           ; 3 bytes @ 0x8
  1230  000009                     	ds	1
  1231  00000A                     i2___lwmod@divisor:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x9
  1235  00000A                     	ds	1
  1236  00000B                     ??_WriteRun:
  1237  00000B                     ReadRun@backruns:
  1238                           	opt stack 0
  1239  00000B                     PWMC@cycles:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0xA
  1243  00000B                     	ds	1
  1244  00000C                     ___awtoft@sign:
  1245                           	opt stack 0
  1246  00000C                     i2___lwmod@counter:
  1247                           	opt stack 0
  1248  00000C                     HexDecToDec2@tenth:
  1249                           	opt stack 0
  1250  00000C                     ReadRun@add:
  1251                           	opt stack 0
  1252  00000C                     ___ftmul@f2:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0xB
  1256  00000C                     	ds	1
  1257  00000D                     ?i2_printf:
  1258                           	opt stack 0
  1259  00000D                     PWMC@port:
  1260                           	opt stack 0
  1261  00000D                     WriteRun@add:
  1262                           	opt stack 0
  1263  00000D                     i2printf@f:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0xC
  1267  00000D                     	ds	1
  1268  00000E                     HexDecToDec2@digit:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0xD
  1272  00000E                     	ds	1
  1273  00000F                     ??___ftmul:
  1274  00000F                     ??_PWMC:
  1275                           
  1276                           ; 1 bytes @ 0xE
  1277  00000F                     	ds	2
  1278  000011                     _PWMC$1399:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x10
  1282  000011                     	ds	1
  1283  000012                     ___ftmul@exp:
  1284                           	opt stack 0
  1285  000012                     _PWMC$1400:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x11
  1289  000012                     	ds	1
  1290  000013                     _PWMC$1401:
  1291                           	opt stack 0
  1292  000013                     ___ftmul@f3_as_product:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0x12
  1296  000013                     	ds	1
  1297  000014                     PWMC@countdown:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x13
  1301  000014                     	ds	2
  1302  000016                     ___ftmul@cntr:
  1303                           	opt stack 0
  1304  000016                     CW90@port:
  1305                           	opt stack 0
  1306  000016                     CCW90@port:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x15
  1310  000016                     	ds	1
  1311  000017                     ??i2_printf:
  1312  000017                     ___ftmul@sign:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x16
  1316  000017                     	ds	1
  1317  000018                     ?___ftdiv:
  1318                           	opt stack 0
  1319  000018                     ___ftdiv@f1:
  1320                           	opt stack 0
  1321                           
  1322                           ; 3 bytes @ 0x17
  1323  000018                     	ds	3
  1324  00001B                     i2printf@ap:
  1325                           	opt stack 0
  1326  00001B                     ___ftdiv@f2:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x1A
  1330  00001B                     	ds	2
  1331  00001D                     i2printf@cp:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x1C
  1335  00001D                     	ds	1
  1336  00001E                     ??___ftdiv:
  1337                           
  1338                           ; 1 bytes @ 0x1D
  1339  00001E                     	ds	1
  1340  00001F                     i2printf@idx:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x1E
  1344  00001F                     	ds	1
  1345  000020                     i2printf@len:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x1F
  1349  000020                     	ds	1
  1350  000021                     ___ftdiv@cntr:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x20
  1354  000021                     	ds	1
  1355  000022                     i2printf@prec:
  1356                           	opt stack 0
  1357  000022                     ___ftdiv@f3:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x21
  1361  000022                     	ds	1
  1362  000023                     i2printf@val:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x22
  1366  000023                     	ds	2
  1367  000025                     ___ftdiv@exp:
  1368                           	opt stack 0
  1369  000025                     i2printf@flag:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x24
  1373  000025                     	ds	1
  1374  000026                     ___ftdiv@sign:
  1375                           	opt stack 0
  1376  000026                     i2printf@width:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x25
  1380  000026                     	ds	1
  1381  000027                     ___ftge@ff1:
  1382                           	opt stack 0
  1383                           
  1384                           ; 3 bytes @ 0x26
  1385  000027                     	ds	1
  1386  000028                     i2printf@c:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x27
  1390  000028                     	ds	1
  1391  000029                     showInfo@time:
  1392                           	opt stack 0
  1393  000029                     _stopMoving$553:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x28
  1397  000029                     	ds	1
  1398  00002A                     ___ftge@ff2:
  1399                           	opt stack 0
  1400                           
  1401                           ; 3 bytes @ 0x29
  1402  00002A                     	ds	1
  1403  00002B                     stopMoving@em:
  1404                           	opt stack 0
  1405  00002B                     showInfo@sorted:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x2A
  1409  00002B                     	ds	2
  1410  00002D                     ??_showInfo:
  1411  00002D                     ??___ftge:
  1412                           
  1413                           ; 1 bytes @ 0x2C
  1414  00002D                     	ds	3
  1415  000030                     ?_checkV:
  1416                           	opt stack 0
  1417  000030                     checkV@channel:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x2F
  1421  000030                     	ds	2
  1422  000032                     showInfo@type:
  1423                           	opt stack 0
  1424  000032                     checkV@max:
  1425                           	opt stack 0
  1426                           
  1427                           ; 3 bytes @ 0x31
  1428  000032                     	ds	2
  1429  000034                     showInfo@stop:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x33
  1433  000034                     	ds	1
  1434  000035                     checkV@voltage2:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x34
  1438  000035                     	ds	1
  1439  000036                     ??_PermLog:
  1440                           
  1441                           ; 1 bytes @ 0x35
  1442  000036                     	ds	1
  1443  000037                     checkV@voltage3:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x36
  1447  000037                     	ds	1
  1448  000038                     PermLog@sorted:
  1449                           	opt stack 0
  1450                           
  1451                           ; 4 bytes @ 0x37
  1452  000038                     	ds	1
  1453  000039                     checkV@voltage:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x38
  1457  000039                     	ds	2
  1458  00003B                     ?_checkAA:
  1459                           	opt stack 0
  1460  00003B                     ?_checkC:
  1461                           	opt stack 0
  1462  00003B                     ?_check9:
  1463                           	opt stack 0
  1464  00003B                     checkAA@sorted:
  1465                           	opt stack 0
  1466  00003B                     checkC@sorted:
  1467                           	opt stack 0
  1468  00003B                     check9@sorted:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x3A
  1472  00003B                     	ds	1
  1473  00003C                     PermLog@backruns:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x3B
  1477  00003C                     	ds	1
  1478  00003D                     ??_simulate:
  1479  00003D                     PermLog@time:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x3C
  1483  00003D                     	ds	2
  1484  00003F                     simulate@stop:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x3E
  1488  00003F                     	ds	2
  1489  000041                     _simulate$1505:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x40
  1493  000041                     	ds	2
  1494  000043                     simulate@portCW:
  1495                           	opt stack 0
  1496                           
  1497                           ; 6 bytes @ 0x42
  1498  000043                     	ds	6
  1499  000049                     simulate@portCCW:
  1500                           	opt stack 0
  1501                           
  1502                           ; 6 bytes @ 0x48
  1503  000049                     	ds	6
  1504  00004F                     simulate@AA:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x4E
  1508  00004F                     	ds	2
  1509  000051                     simulate@C:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x50
  1513  000051                     	ds	2
  1514  000053                     simulate@V9:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x52
  1518  000053                     	ds	2
  1519  000055                     simulate@now:
  1520                           	opt stack 0
  1521                           
  1522                           ; 4 bytes @ 0x54
  1523  000055                     	ds	4
  1524  000059                     simulate@start:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0x58
  1528  000059                     	ds	4
  1529  00005D                     simulate@sorted:
  1530                           	opt stack 0
  1531                           
  1532                           ; 4 bytes @ 0x5C
  1533  00005D                     	ds	4
  1534  000061                     simulate@period:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x60
  1538  000061                     	ds	2
  1539  000063                     ??_intrpt:
  1540                           
  1541                           ; 1 bytes @ 0x62
  1542  000063                     	ds	16
  1543  000073                     intrpt@keypress:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x72
  1547  000073                     	ds	1
  1548                           tblptru	equ	0xFF8
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           
  1552 ;;
  1553 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1554 ;;
  1555 ;; *************** function _main *****************
  1556 ;; Defined at:
  1557 ;;		line 211 in file "main.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  2  156[None  ] int 
  1564 ;; Registers used:
  1565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;Total ram usage:        2 bytes
  1576 ;; Hardware stack levels required when called:   10
  1577 ;; This function calls:
  1578 ;;		_initialize
  1579 ;;		_line0
  1580 ;;		_printf
  1581 ;;		_showRTC
  1582 ;; This function is called by:
  1583 ;;		Startup code after reset
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text0
  1588  001DA8                     __ptext0:
  1589                           	opt stack 0
  1590  001DA8                     _main:
  1591                           	opt stack 21
  1592                           
  1593                           ;main.c: 212: initialize();
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;incstack = 0
  1597  001DA8  ECCF  F00C         	call	_initialize	;wreg free
  1598                           
  1599                           ;main.c: 214: line0();
  1600  001DAC  ECF0  F010         	call	_line0	;wreg free
  1601                           
  1602                           ;main.c: 215: printf("Welcome!          ");
  1603  001DB0  0E59               	movlw	low STR_21
  1604  001DB2  0100               	movlb	0	; () banked
  1605  001DB4  6F8C               	movwf	printf@f& (0+255),b
  1606  001DB6  0EFF               	movlw	high STR_21
  1607  001DB8  0100               	movlb	0	; () banked
  1608  001DBA  6F8D               	movwf	(printf@f+1)& (0+255),b
  1609  001DBC  EC09  F000         	call	_printf	;wreg free
  1610                           
  1611                           ;main.c: 217: _delay((unsigned long)((500)*(8000000/4000.0)));
  1612  001DC0  0E06               	movlw	6
  1613  001DC2  0100               	movlb	0	; () banked
  1614  001DC4  6FA9               	movwf	(??_main+1)& (0+255),b
  1615  001DC6  0E13               	movlw	19
  1616  001DC8  0100               	movlb	0	; () banked
  1617  001DCA  6FA8               	movwf	??_main& (0+255),b
  1618  001DCC  0EAD               	movlw	173
  1619  001DCE                     u3057:
  1620  001DCE  2EE8               	decfsz	wreg,f,c
  1621  001DD0  D7FE               	bra	u3057
  1622  001DD2  2FA8               	decfsz	??_main& (0+255),f,b
  1623  001DD4  D7FC               	bra	u3057
  1624  001DD6  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1625  001DD8  D7FA               	bra	u3057
  1626  001DDA  D000               	nop2	
  1627                           
  1628                           ;main.c: 219: INT1IE = 1;
  1629  001DDC  86F0               	bsf	intcon3,3,c	;volatile
  1630                           
  1631                           ;main.c: 220: INT1IF = 0;
  1632  001DDE  90F0               	bcf	intcon3,0,c	;volatile
  1633                           
  1634                           ;main.c: 221: INT2IE = 0;
  1635  001DE0  98F0               	bcf	intcon3,4,c	;volatile
  1636                           
  1637                           ;main.c: 222: (INTCONbits.GIE = 1);
  1638  001DE2  8EF2               	bsf	intcon,7,c	;volatile
  1639                           
  1640                           ;main.c: 223: mode = 0;
  1641  001DE4  0E00               	movlw	0
  1642  001DE6  6E75               	movwf	_mode+1,c
  1643  001DE8  0E00               	movlw	0
  1644  001DEA  6E74               	movwf	_mode,c
  1645  001DEC                     l4272:
  1646  001DEC  EC4A  F00C         	call	_showRTC	;wreg free
  1647  001DF0  D7FD               	goto	l4272
  1648  001DF2  00FF               	reset		;# 
  1649  001DF4                     __end_of_main:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           intcon	equ	0xFF2
  1653                           intcon3	equ	0xFF0
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           
  1657 ;; *************** function _showRTC *****************
  1658 ;; Defined at:
  1659 ;;		line 151 in file "main.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;Total ram usage:        2 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    9
  1680 ;; This function calls:
  1681 ;;		_getTime
  1682 ;;		_line0
  1683 ;;		_line1
  1684 ;;		_printf
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text1
  1691  001894                     __ptext1:
  1692                           	opt stack 0
  1693  001894                     _showRTC:
  1694                           	opt stack 21
  1695                           
  1696                           ;main.c: 152: getTime(time);
  1697                           
  1698                           ;incstack = 0
  1699  001894  0E76               	movlw	low _time
  1700  001896  0100               	movlb	0	; () banked
  1701  001898  6F83               	movwf	getTime@time& (0+255),b
  1702  00189A  0E00               	movlw	high _time
  1703  00189C  0100               	movlb	0	; () banked
  1704  00189E  6F84               	movwf	(getTime@time+1)& (0+255),b
  1705  0018A0  EC05  F00C         	call	_getTime	;wreg free
  1706                           
  1707                           ;main.c: 153: line0();
  1708  0018A4  ECF0  F010         	call	_line0	;wreg free
  1709                           
  1710                           ;main.c: 154: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1711  0018A8  0E1B               	movlw	low STR_19
  1712  0018AA  0100               	movlb	0	; () banked
  1713  0018AC  6F8C               	movwf	printf@f& (0+255),b
  1714  0018AE  0EFE               	movlw	high STR_19
  1715  0018B0  0100               	movlb	0	; () banked
  1716  0018B2  6F8D               	movwf	(printf@f+1)& (0+255),b
  1717  0018B4  C07C  F08E         	movff	_time+6,?_printf+2
  1718  0018B8  0100               	movlb	0	; () banked
  1719  0018BA  6B8F               	clrf	(?_printf+3)& (0+255),b
  1720  0018BC  C07B  F090         	movff	_time+5,?_printf+4
  1721  0018C0  0100               	movlb	0	; () banked
  1722  0018C2  6B91               	clrf	(?_printf+5)& (0+255),b
  1723  0018C4  C07A  F092         	movff	_time+4,?_printf+6
  1724  0018C8  0100               	movlb	0	; () banked
  1725  0018CA  6B93               	clrf	(?_printf+7)& (0+255),b
  1726  0018CC  EC09  F000         	call	_printf	;wreg free
  1727                           
  1728                           ;main.c: 155: line1();
  1729  0018D0  ECEC  F010         	call	_line1	;wreg free
  1730                           
  1731                           ;main.c: 156: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1732  0018D4  0E34               	movlw	low STR_20
  1733  0018D6  0100               	movlb	0	; () banked
  1734  0018D8  6F8C               	movwf	printf@f& (0+255),b
  1735  0018DA  0EFE               	movlw	high STR_20
  1736  0018DC  0100               	movlb	0	; () banked
  1737  0018DE  6F8D               	movwf	(printf@f+1)& (0+255),b
  1738  0018E0  C078  F08E         	movff	_time+2,?_printf+2
  1739  0018E4  0100               	movlb	0	; () banked
  1740  0018E6  6B8F               	clrf	(?_printf+3)& (0+255),b
  1741  0018E8  C077  F090         	movff	_time+1,?_printf+4
  1742  0018EC  0100               	movlb	0	; () banked
  1743  0018EE  6B91               	clrf	(?_printf+5)& (0+255),b
  1744  0018F0  C076  F092         	movff	_time,?_printf+6
  1745  0018F4  0100               	movlb	0	; () banked
  1746  0018F6  6B93               	clrf	(?_printf+7)& (0+255),b
  1747  0018F8  EC09  F000         	call	_printf	;wreg free
  1748                           
  1749                           ;main.c: 157: _delay((unsigned long)((250)*(8000000/4000.0)));
  1750  0018FC  0E03               	movlw	3
  1751  0018FE  0100               	movlb	0	; () banked
  1752  001900  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  1753  001902  0E8A               	movlw	138
  1754  001904  0100               	movlb	0	; () banked
  1755  001906  6FA6               	movwf	??_showRTC& (0+255),b
  1756  001908  0E55               	movlw	85
  1757  00190A                     u3067:
  1758  00190A  2EE8               	decfsz	wreg,f,c
  1759  00190C  D7FE               	bra	u3067
  1760  00190E  2FA6               	decfsz	??_showRTC& (0+255),f,b
  1761  001910  D7FC               	bra	u3067
  1762  001912  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  1763  001914  D7FA               	bra	u3067
  1764  001916  D000               	nop2	
  1765  001918  0012               	return		;funcret
  1766  00191A                     __end_of_showRTC:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           intcon	equ	0xFF2
  1770                           intcon3	equ	0xFF0
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           
  1774 ;; *************** function _printf *****************
  1775 ;; Defined at:
  1776 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1779 ;;		 -> STR_51(17), STR_50(17), STR_49(4), STR_48(4), 
  1780 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  1781 ;;		 -> STR_43(4), STR_42(3), STR_41(4), STR_40(4), 
  1782 ;;		 -> STR_39(4), STR_38(4), STR_37(18), STR_36(20), 
  1783 ;;		 -> STR_35(16), STR_34(21), STR_33(16), STR_32(21), 
  1784 ;;		 -> STR_31(16), STR_30(20), STR_29(16), STR_28(21), 
  1785 ;;		 -> STR_27(23), STR_26(24), STR_25(21), STR_24(24), 
  1786 ;;		 -> STR_23(24), STR_22(25), STR_21(19), STR_20(25), 
  1787 ;;		 -> STR_19(25), STR_18(27), STR_17(19), STR_16(25), 
  1788 ;;		 -> STR_15(3), STR_14(3), STR_13(3), STR_12(5), 
  1789 ;;		 -> STR_11(3), STR_10(3), STR_9(3), STR_8(4), 
  1790 ;;		 -> STR_7(3), STR_6(3), STR_5(3), STR_4(4), 
  1791 ;;		 -> STR_3(5), STR_2(24), STR_1(9), 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  idx             1   28[BANK0 ] unsigned char 
  1794 ;;  tmpval          4    0        struct .
  1795 ;;  width           2   35[BANK0 ] int 
  1796 ;;  val             2   32[BANK0 ] unsigned int 
  1797 ;;  len             2   29[BANK0 ] unsigned int 
  1798 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  1799 ;;		 -> printf@c(1), 
  1800 ;;  ap              2   24[BANK0 ] PTR void [1]
  1801 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1802 ;;  c               1   37[BANK0 ] char 
  1803 ;;  flag            1   34[BANK0 ] unsigned char 
  1804 ;;  prec            1   31[BANK0 ] char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  2   12[BANK0 ] int 
  1807 ;; Registers used:
  1808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1814 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;Total ram usage:       26 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    8
  1821 ;; This function calls:
  1822 ;;		___lwdiv
  1823 ;;		___lwmod
  1824 ;;		___wmul
  1825 ;;		_isdigit
  1826 ;;		_putch
  1827 ;; This function is called by:
  1828 ;;		_showRTC
  1829 ;;		_main
  1830 ;;		_mainloop
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text2
  1835  000012                     __ptext2:
  1836                           	opt stack 0
  1837  000012                     _printf:
  1838                           	opt stack 21
  1839                           
  1840                           ;doprnt.c: 466: va_list ap;
  1841                           ;doprnt.c: 499: signed char c;
  1842                           ;doprnt.c: 501: int width;
  1843                           ;doprnt.c: 506: signed char prec;
  1844                           ;doprnt.c: 508: unsigned char flag;
  1845                           ;doprnt.c: 523: union {
  1846                           ;doprnt.c: 524: unsigned long vd;
  1847                           ;doprnt.c: 525: double integ;
  1848                           ;doprnt.c: 526: } tmpval;
  1849                           ;doprnt.c: 528: unsigned int val;
  1850                           ;doprnt.c: 529: unsigned len;
  1851                           ;doprnt.c: 530: const char * cp;
  1852                           ;doprnt.c: 533: *ap = __va_start();
  1853                           
  1854                           ;incstack = 0
  1855  000012  0E8E               	movlw	low (?_printf+2)
  1856  000014  0100               	movlb	0	; () banked
  1857  000016  6F98               	movwf	printf@ap& (0+255),b
  1858  000018  0E00               	movlw	high (?_printf+2)
  1859  00001A  0100               	movlb	0	; () banked
  1860  00001C  6F99               	movwf	(printf@ap+1)& (0+255),b
  1861                           
  1862                           ;doprnt.c: 536: while(c = *f++) {
  1863  00001E  D1CE               	goto	l3726
  1864  000020                     l3604:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;doprnt.c: 538: if(c != '%')
  1868  000020  0E25               	movlw	37
  1869  000022  0100               	movlb	0	; () banked
  1870  000024  19A5               	xorwf	printf@c& (0+255),w,b
  1871  000026  B4D8               	btfsc	status,2,c
  1872  000028  D005               	goto	l3608
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;doprnt.c: 540: {
  1876                           ;doprnt.c: 541: (putch(c) );
  1877  00002A  0100               	movlb	0	; () banked
  1878  00002C  51A5               	movf	printf@c& (0+255),w,b
  1879  00002E  ECC6  F010         	call	_putch
  1880                           
  1881                           ;doprnt.c: 542: continue;
  1882  000032  D1C4               	goto	l3726
  1883  000034                     l3608:
  1884                           
  1885                           ;doprnt.c: 543: }
  1886                           ;doprnt.c: 546: width = 0;
  1887  000034  0E00               	movlw	0
  1888  000036  0100               	movlb	0	; () banked
  1889  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  1890  00003A  0E00               	movlw	0
  1891  00003C  6FA3               	movwf	printf@width& (0+255),b
  1892                           
  1893                           ;doprnt.c: 548: flag = 0;
  1894  00003E  0E00               	movlw	0
  1895  000040  0100               	movlb	0	; () banked
  1896  000042  6FA2               	movwf	printf@flag& (0+255),b
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 551: switch(*f) {
  1900                           
  1901                           ;doprnt.c: 550: for(;;) {
  1902  000044  D005               	goto	l3614
  1903  000046                     l3610:
  1904                           
  1905                           ;doprnt.c: 580: flag |= 0x04;
  1906  000046  0100               	movlb	0	; () banked
  1907  000048  85A2               	bsf	printf@flag& (0+255),2,b
  1908                           
  1909                           ;doprnt.c: 581: f++;
  1910  00004A  0100               	movlb	0	; () banked
  1911  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  1912  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  1913  000050                     l3614:
  1914  000050  C08C  FFF6         	movff	printf@f,tblptrl
  1915  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  1916  000058                     	if	0	;tblptru may be non-zero
  1917  000058                     	endif
  1918  000058                     	if	0	;tblptru may be non-zero
  1919  000058                     	endif
  1920  000058  0008               	tblrd		*
  1921  00005A  50F5               	movf	tablat,w,c
  1922                           
  1923                           ; Switch size 1, requested type "space"
  1924                           ; Number of cases is 1, Range of values is 48 to 48
  1925                           ; switch strategies available:
  1926                           ; Name         Instructions Cycles
  1927                           ; simple_byte            4     3 (average)
  1928                           ;	Chosen strategy is simple_byte
  1929  00005C  0A30               	xorlw	48	; case 48
  1930  00005E  B4D8               	btfsc	status,2,c
  1931  000060  D7F2               	goto	l3610
  1932                           
  1933                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1934                           
  1935                           ;doprnt.c: 586: }
  1936                           
  1937                           ;doprnt.c: 585: break;
  1938  000062  C08C  FFF6         	movff	printf@f,tblptrl
  1939  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  1940  00006A                     	if	0	;tblptru may be non-zero
  1941  00006A                     	endif
  1942  00006A                     	if	0	;tblptru may be non-zero
  1943  00006A                     	endif
  1944  00006A  0008               	tblrd		*
  1945  00006C  50F5               	movf	tablat,w,c
  1946  00006E  ECCB  F00F         	call	_isdigit
  1947  000072  A0D8               	btfss	status,0,c
  1948  000074  D092               	goto	l3654
  1949                           
  1950                           ;doprnt.c: 598: width = 0;
  1951  000076  0E00               	movlw	0
  1952  000078  0100               	movlb	0	; () banked
  1953  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  1954  00007C  0E00               	movlw	0
  1955  00007E  6FA3               	movwf	printf@width& (0+255),b
  1956  000080                     l3620:
  1957                           
  1958                           ;doprnt.c: 600: width *= 10;
  1959  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  1960  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  1961  000088  0E00               	movlw	0
  1962  00008A  0100               	movlb	0	; () banked
  1963  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1964  00008E  0E0A               	movlw	10
  1965  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1966  000092  EC7E  F00F         	call	___wmul	;wreg free
  1967  000096  C080  F0A3         	movff	?___wmul,printf@width
  1968  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  1969                           
  1970                           ;doprnt.c: 601: width += *f++ - '0';
  1971  00009E  0ED0               	movlw	208
  1972  0000A0  0100               	movlb	0	; () banked
  1973  0000A2  6F94               	movwf	??_printf& (0+255),b
  1974  0000A4  0EFF               	movlw	255
  1975  0000A6  0100               	movlb	0	; () banked
  1976  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  1977  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  1978  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  1979  0000B2                     	if	0	;tblptru may be non-zero
  1980  0000B2                     	endif
  1981  0000B2                     	if	0	;tblptru may be non-zero
  1982  0000B2                     	endif
  1983  0000B2  0008               	tblrd		*
  1984  0000B4  50F5               	movf	tablat,w,c
  1985  0000B6  0100               	movlb	0	; () banked
  1986  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  1987  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  1988  0000BC  0100               	movlb	0	; () banked
  1989  0000BE  5194               	movf	??_printf& (0+255),w,b
  1990  0000C0  0100               	movlb	0	; () banked
  1991  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  1992  0000C4  0100               	movlb	0	; () banked
  1993  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  1994  0000C8  0100               	movlb	0	; () banked
  1995  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  1996  0000CC  0100               	movlb	0	; () banked
  1997  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  1998  0000D0  0100               	movlb	0	; () banked
  1999  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  2000  0000D4  0100               	movlb	0	; () banked
  2001  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  2002  0000D8  0100               	movlb	0	; () banked
  2003  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  2004                           
  2005                           ; BSR set to: 0
  2006  0000DC  0100               	movlb	0	; () banked
  2007  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  2008  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2012  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  2013  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  2014  0000EA                     	if	0	;tblptru may be non-zero
  2015  0000EA                     	endif
  2016  0000EA                     	if	0	;tblptru may be non-zero
  2017  0000EA                     	endif
  2018  0000EA  0008               	tblrd		*
  2019  0000EC  50F5               	movf	tablat,w,c
  2020  0000EE  ECCB  F00F         	call	_isdigit
  2021  0000F2  A0D8               	btfss	status,0,c
  2022  0000F4  D052               	goto	l3654
  2023  0000F6  D7C4               	goto	l3620
  2024  0000F8                     l3628:
  2025                           
  2026                           ;doprnt.c: 721: flag |= 0x80;
  2027  0000F8  0100               	movlb	0	; () banked
  2028  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  2029                           
  2030                           ;doprnt.c: 723: break;
  2031  0000FC  D064               	goto	l3656
  2032  0000FE                     l3630:
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;doprnt.c: 757: if(width > len)
  2036  0000FE  0100               	movlb	0	; () banked
  2037  000100  51A3               	movf	printf@width& (0+255),w,b
  2038  000102  0100               	movlb	0	; () banked
  2039  000104  5D9D               	subwf	printf@len& (0+255),w,b
  2040  000106  0100               	movlb	0	; () banked
  2041  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  2042  00010A  0100               	movlb	0	; () banked
  2043  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  2044  00010E  B0D8               	btfsc	status,0,c
  2045  000110  D009               	goto	l3634
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;doprnt.c: 758: width -= len;
  2049  000112  0100               	movlb	0	; () banked
  2050  000114  519D               	movf	printf@len& (0+255),w,b
  2051  000116  0100               	movlb	0	; () banked
  2052  000118  5FA3               	subwf	printf@width& (0+255),f,b
  2053  00011A  0100               	movlb	0	; () banked
  2054  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  2055  00011E  0100               	movlb	0	; () banked
  2056  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2057  000122  D009               	goto	l3638
  2058  000124                     l3634:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 759: else
  2062                           ;doprnt.c: 760: width = 0;
  2063  000124  0E00               	movlw	0
  2064  000126  0100               	movlb	0	; () banked
  2065  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  2066  00012A  0E00               	movlw	0
  2067  00012C  6FA3               	movwf	printf@width& (0+255),b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;doprnt.c: 764: while(width--)
  2071  00012E  D003               	goto	l3638
  2072  000130                     l3636:
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;doprnt.c: 765: (putch(' ') );
  2076  000130  0E20               	movlw	32
  2077  000132  ECC6  F010         	call	_putch
  2078  000136                     l3638:
  2079  000136  0100               	movlb	0	; () banked
  2080  000138  07A3               	decf	printf@width& (0+255),f,b
  2081  00013A  A0D8               	btfss	status,0,c
  2082  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  2083  00013E  0100               	movlb	0	; () banked
  2084  000140  29A3               	incf	printf@width& (0+255),w,b
  2085  000142  E1F6               	bnz	l3636
  2086  000144  0100               	movlb	0	; () banked
  2087  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  2088  000148  B4D8               	btfsc	status,2,c
  2089  00014A  D00B               	goto	l3644
  2090  00014C  D7F1               	goto	l3636
  2091  00014E                     l3640:
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;doprnt.c: 768: (putch(*cp++) );
  2095  00014E  C09A  FFD9         	movff	printf@cp,fsr2l
  2096  000152  C09B  FFDA         	movff	printf@cp+1,fsr2h
  2097  000156  50DF               	movf	indf2,w,c
  2098  000158  ECC6  F010         	call	_putch
  2099  00015C  0100               	movlb	0	; () banked
  2100  00015E  4B9A               	infsnz	printf@cp& (0+255),f,b
  2101  000160  2B9B               	incf	(printf@cp+1)& (0+255),f,b
  2102  000162                     l3644:
  2103                           
  2104                           ; BSR set to: 0
  2105  000162  0100               	movlb	0	; () banked
  2106  000164  079D               	decf	printf@len& (0+255),f,b
  2107  000166  A0D8               	btfss	status,0,c
  2108  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  2109  00016A  0100               	movlb	0	; () banked
  2110  00016C  299D               	incf	printf@len& (0+255),w,b
  2111  00016E  E1EF               	bnz	l3640
  2112  000170  0100               	movlb	0	; () banked
  2113  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  2114  000174  B4D8               	btfsc	status,2,c
  2115  000176  D122               	goto	l3726
  2116  000178  D7EA               	goto	l3640
  2117  00017A                     l3646:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;doprnt.c: 805: cp = (char *)&c;
  2121  00017A  0EA5               	movlw	low printf@c
  2122  00017C  0100               	movlb	0	; () banked
  2123  00017E  6F9A               	movwf	printf@cp& (0+255),b
  2124  000180  0E00               	movlw	high printf@c
  2125  000182  0100               	movlb	0	; () banked
  2126  000184  6F9B               	movwf	(printf@cp+1)& (0+255),b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 806: len = 1;
  2130  000186  0E00               	movlw	0
  2131  000188  0100               	movlb	0	; () banked
  2132  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  2133  00018C  0E01               	movlw	1
  2134  00018E  6F9D               	movwf	printf@len& (0+255),b
  2135                           
  2136                           ;doprnt.c: 807: goto dostring;
  2137  000190  D7B6               	goto	l3630
  2138  000192                     l3650:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 818: flag |= 0xC0;
  2142  000192  0EC0               	movlw	192
  2143  000194  0100               	movlb	0	; () banked
  2144  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;doprnt.c: 822: }
  2148                           
  2149                           ;doprnt.c: 819: break;
  2150  000198  D016               	goto	l3656
  2151  00019A                     l3654:
  2152  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  2153  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  2154  0001A2  0100               	movlb	0	; () banked
  2155  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  2156  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2157  0001A8                     	if	0	;tblptru may be non-zero
  2158  0001A8                     	endif
  2159  0001A8                     	if	0	;tblptru may be non-zero
  2160  0001A8                     	endif
  2161  0001A8  0008               	tblrd		*
  2162  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  2163  0001AE  0100               	movlb	0	; () banked
  2164  0001B0  51A5               	movf	printf@c& (0+255),w,b
  2165                           
  2166                           ; Switch size 1, requested type "space"
  2167                           ; Number of cases is 3, Range of values is 0 to 120
  2168                           ; switch strategies available:
  2169                           ; Name         Instructions Cycles
  2170                           ; simple_byte           10     6 (average)
  2171                           ;	Chosen strategy is simple_byte
  2172  0001B2  0A00               	xorlw	0	; case 0
  2173  0001B4  B4D8               	btfsc	status,2,c
  2174  0001B6  0012               	return	
  2175  0001B8  0A75               	xorlw	117	; case 117
  2176  0001BA  B4D8               	btfsc	status,2,c
  2177  0001BC  D7EA               	goto	l3650
  2178  0001BE  0A0D               	xorlw	13	; case 120
  2179  0001C0  B4D8               	btfsc	status,2,c
  2180  0001C2  D79A               	goto	l3628
  2181  0001C4  D7DA               	goto	l3646
  2182  0001C6                     l3656:
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;doprnt.c: 1273: {
  2186                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2187  0001C6  C098  FFD9         	movff	printf@ap,fsr2l
  2188  0001CA  C099  FFDA         	movff	printf@ap+1,fsr2h
  2189  0001CE  CFDE F0A0          	movff	postinc2,printf@val
  2190  0001D2  CFDD F0A1          	movff	postdec2,printf@val+1
  2191                           
  2192                           ; BSR set to: 0
  2193  0001D6  0E02               	movlw	2
  2194  0001D8  0100               	movlb	0	; () banked
  2195  0001DA  2798               	addwf	printf@ap& (0+255),f,b
  2196  0001DC  0E00               	movlw	0
  2197  0001DE  2399               	addwfc	(printf@ap+1)& (0+255),f,b
  2198                           
  2199                           ;doprnt.c: 1287: }
  2200                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2201  0001E0  D03C               	goto	l3690
  2202  0001E2                     l3660:
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2206  0001E2  0E01               	movlw	1
  2207  0001E4  0100               	movlb	0	; () banked
  2208  0001E6  6FA5               	movwf	printf@c& (0+255),b
  2209  0001E8                     l3662:
  2210                           
  2211                           ; BSR set to: 0
  2212  0001E8  0E05               	movlw	5
  2213  0001EA  0100               	movlb	0	; () banked
  2214  0001EC  19A5               	xorwf	printf@c& (0+255),w,b
  2215  0001EE  B4D8               	btfsc	status,2,c
  2216  0001F0  D03D               	goto	l3692
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;doprnt.c: 1306: if(val < dpowers[c])
  2220                           
  2221                           ; BSR set to: 0
  2222                           
  2223                           ; BSR set to: 0
  2224  0001F2  0100               	movlb	0	; () banked
  2225  0001F4  51A5               	movf	printf@c& (0+255),w,b
  2226  0001F6  0D02               	mullw	2
  2227  0001F8  0ED5               	movlw	low _dpowers
  2228  0001FA  24F3               	addwf	prodl,w,c
  2229  0001FC  6EF6               	movwf	tblptrl,c
  2230  0001FE  0EFD               	movlw	high _dpowers
  2231  000200  20F4               	addwfc	prodh,w,c
  2232  000202  6EF7               	movwf	tblptrh,c
  2233  000204                     	if	0	;There are less than 3 active tblptr bytes
  2234  000204                     	endif
  2235  000204  0009               	tblrd		*+
  2236  000206  50F5               	movf	tablat,w,c
  2237  000208  0100               	movlb	0	; () banked
  2238  00020A  5DA0               	subwf	printf@val& (0+255),w,b
  2239  00020C  0009               	tblrd		*+
  2240  00020E  50F5               	movf	tablat,w,c
  2241  000210  0100               	movlb	0	; () banked
  2242  000212  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2243  000214  A0D8               	btfss	status,0,c
  2244  000216  D02A               	goto	l3692
  2245                           
  2246                           ; BSR set to: 0
  2247                           
  2248                           ; BSR set to: 0
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;doprnt.c: 1307: break;
  2252  000218  0100               	movlb	0	; () banked
  2253  00021A  2BA5               	incf	printf@c& (0+255),f,b
  2254  00021C  D7E5               	goto	l3662
  2255  00021E                     l3674:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2259  00021E  0E01               	movlw	1
  2260  000220  0100               	movlb	0	; () banked
  2261  000222  6FA5               	movwf	printf@c& (0+255),b
  2262  000224                     l3676:
  2263                           
  2264                           ; BSR set to: 0
  2265  000224  0E04               	movlw	4
  2266  000226  0100               	movlb	0	; () banked
  2267  000228  19A5               	xorwf	printf@c& (0+255),w,b
  2268  00022A  B4D8               	btfsc	status,2,c
  2269  00022C  D01F               	goto	l3692
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2273                           
  2274                           ; BSR set to: 0
  2275                           
  2276                           ; BSR set to: 0
  2277  00022E  0100               	movlb	0	; () banked
  2278  000230  51A5               	movf	printf@c& (0+255),w,b
  2279  000232  0D02               	mullw	2
  2280  000234  0EDF               	movlw	low _hexpowers
  2281  000236  24F3               	addwf	prodl,w,c
  2282  000238  6EF6               	movwf	tblptrl,c
  2283  00023A  0EFD               	movlw	high _hexpowers
  2284  00023C  20F4               	addwfc	prodh,w,c
  2285  00023E  6EF7               	movwf	tblptrh,c
  2286  000240                     	if	0	;There are less than 3 active tblptr bytes
  2287  000240                     	endif
  2288  000240  0009               	tblrd		*+
  2289  000242  50F5               	movf	tablat,w,c
  2290  000244  0100               	movlb	0	; () banked
  2291  000246  5DA0               	subwf	printf@val& (0+255),w,b
  2292  000248  0009               	tblrd		*+
  2293  00024A  50F5               	movf	tablat,w,c
  2294  00024C  0100               	movlb	0	; () banked
  2295  00024E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2296  000250  A0D8               	btfss	status,0,c
  2297  000252  D00C               	goto	l3692
  2298                           
  2299                           ; BSR set to: 0
  2300                           
  2301                           ; BSR set to: 0
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;doprnt.c: 1318: break;
  2305  000254  0100               	movlb	0	; () banked
  2306  000256  2BA5               	incf	printf@c& (0+255),f,b
  2307  000258  D7E5               	goto	l3676
  2308  00025A                     l3690:
  2309                           
  2310                           ; BSR set to: 0
  2311  00025A  0100               	movlb	0	; () banked
  2312  00025C  51A2               	movf	printf@flag& (0+255),w,b
  2313  00025E  0BC0               	andlw	192
  2314                           
  2315                           ; Switch size 1, requested type "space"
  2316                           ; Number of cases is 2, Range of values is 128 to 192
  2317                           ; switch strategies available:
  2318                           ; Name         Instructions Cycles
  2319                           ; simple_byte            7     4 (average)
  2320                           ;	Chosen strategy is simple_byte
  2321  000260  0A80               	xorlw	128	; case 128
  2322  000262  B4D8               	btfsc	status,2,c
  2323  000264  D7DC               	goto	l3674
  2324  000266  0A40               	xorlw	64	; case 192
  2325  000268  B4D8               	btfsc	status,2,c
  2326  00026A  D7BB               	goto	l3660
  2327  00026C                     l3692:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;doprnt.c: 1381: if(width > c)
  2331  00026C  0E80               	movlw	128
  2332  00026E  0100               	movlb	0	; () banked
  2333  000270  BFA5               	btfsc	printf@c& (0+255),7,b
  2334  000272  0E7F               	movlw	127
  2335  000274  0100               	movlb	0	; () banked
  2336  000276  6F94               	movwf	??_printf& (0+255),b
  2337  000278  0100               	movlb	0	; () banked
  2338  00027A  51A3               	movf	printf@width& (0+255),w,b
  2339  00027C  0100               	movlb	0	; () banked
  2340  00027E  5DA5               	subwf	printf@c& (0+255),w,b
  2341  000280  0100               	movlb	0	; () banked
  2342  000282  51A4               	movf	(printf@width+1)& (0+255),w,b
  2343  000284  0A80               	xorlw	128
  2344  000286  0100               	movlb	0	; () banked
  2345  000288  5994               	subwfb	??_printf& (0+255),w,b
  2346  00028A  B0D8               	btfsc	status,0,c
  2347  00028C  D00B               	goto	l3696
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 1382: width -= c;
  2351  00028E  0100               	movlb	0	; () banked
  2352  000290  51A5               	movf	printf@c& (0+255),w,b
  2353  000292  0100               	movlb	0	; () banked
  2354  000294  5FA3               	subwf	printf@width& (0+255),f,b
  2355  000296  0E00               	movlw	0
  2356  000298  0100               	movlb	0	; () banked
  2357  00029A  BFA5               	btfsc	printf@c& (0+255),7,b
  2358  00029C  0EFF               	movlw	255
  2359  00029E  0100               	movlb	0	; () banked
  2360  0002A0  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2361  0002A2  D005               	goto	l3698
  2362  0002A4                     l3696:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;doprnt.c: 1383: else
  2366                           ;doprnt.c: 1384: width = 0;
  2367  0002A4  0E00               	movlw	0
  2368  0002A6  0100               	movlb	0	; () banked
  2369  0002A8  6FA4               	movwf	(printf@width+1)& (0+255),b
  2370  0002AA  0E00               	movlw	0
  2371  0002AC  6FA3               	movwf	printf@width& (0+255),b
  2372  0002AE                     l3698:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 1387: if(flag & 0x04) {
  2376  0002AE  0100               	movlb	0	; () banked
  2377  0002B0  A5A2               	btfss	printf@flag& (0+255),2,b
  2378  0002B2  D00E               	goto	l3706
  2379  0002B4                     
  2380                           ; BSR set to: 0
  2381                           ;doprnt.c: 1415: if(width)
  2382  0002B4  0100               	movlb	0	; () banked
  2383  0002B6  51A3               	movf	printf@width& (0+255),w,b
  2384  0002B8  0100               	movlb	0	; () banked
  2385  0002BA  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2386  0002BC  B4D8               	btfsc	status,2,c
  2387  0002BE  D01B               	goto	l507
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1417: (putch('0') );
  2391                           
  2392                           ; BSR set to: 0
  2393                           
  2394                           ;doprnt.c: 1416: do
  2395  0002C0  0E30               	movlw	48
  2396  0002C2  ECC6  F010         	call	_putch
  2397                           
  2398                           ;doprnt.c: 1418: while(--width);
  2399  0002C6  0100               	movlb	0	; () banked
  2400  0002C8  07A3               	decf	printf@width& (0+255),f,b
  2401  0002CA  A0D8               	btfss	status,0,c
  2402  0002CC  07A4               	decf	(printf@width+1)& (0+255),f,b
  2403  0002CE  D7F2               	goto	L3
  2404  0002D0                     l3706:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1422: {
  2408                           ;doprnt.c: 1424: if(width
  2409                           ;doprnt.c: 1428: )
  2410  0002D0  0100               	movlb	0	; () banked
  2411  0002D2  51A3               	movf	printf@width& (0+255),w,b
  2412  0002D4  0100               	movlb	0	; () banked
  2413  0002D6  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2414  0002D8  B4D8               	btfsc	status,2,c
  2415  0002DA  D00D               	goto	l507
  2416  0002DC                     l3708:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 1430: (putch(' ') );
  2420  0002DC  0E20               	movlw	32
  2421  0002DE  ECC6  F010         	call	_putch
  2422                           
  2423                           ;doprnt.c: 1431: while(--width);
  2424  0002E2  0100               	movlb	0	; () banked
  2425  0002E4  07A3               	decf	printf@width& (0+255),f,b
  2426  0002E6  A0D8               	btfss	status,0,c
  2427  0002E8  07A4               	decf	(printf@width+1)& (0+255),f,b
  2428  0002EA  0100               	movlb	0	; () banked
  2429  0002EC  51A3               	movf	printf@width& (0+255),w,b
  2430  0002EE  0100               	movlb	0	; () banked
  2431  0002F0  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2432  0002F2  A4D8               	btfss	status,2,c
  2433  0002F4  D7F3               	goto	l3708
  2434  0002F6                     l507:
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 1469: }
  2438                           ;doprnt.c: 1472: prec = c;
  2439  0002F6  C0A5  F09F         	movff	printf@c,printf@prec
  2440                           
  2441                           ;doprnt.c: 1474: while(prec--) {
  2442  0002FA  D05A               	goto	l3724
  2443  0002FC                     l3712:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2447  0002FC  0100               	movlb	0	; () banked
  2448  0002FE  519F               	movf	printf@prec& (0+255),w,b
  2449  000300  0D02               	mullw	2
  2450  000302  0ED5               	movlw	low _dpowers
  2451  000304  24F3               	addwf	prodl,w,c
  2452  000306  6EF6               	movwf	tblptrl,c
  2453  000308  0EFD               	movlw	high _dpowers
  2454  00030A  20F4               	addwfc	prodh,w,c
  2455  00030C  6EF7               	movwf	tblptrh,c
  2456  00030E                     	if	0	;There are less than 3 active tblptr bytes
  2457  00030E                     	endif
  2458  00030E  0009               	tblrd		*+
  2459  000310  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2460  000314  000A               	tblrd		*-
  2461  000316  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2462  00031A  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2463  00031E  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2464  000322  EC4C  F00D         	call	___lwdiv	;wreg free
  2465  000326  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2466  00032A  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2467  00032E  0E00               	movlw	0
  2468  000330  0100               	movlb	0	; () banked
  2469  000332  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2470  000334  0E0A               	movlw	10
  2471  000336  6F89               	movwf	___lwmod@divisor& (0+255),b
  2472  000338  ECF7  F00D         	call	___lwmod	;wreg free
  2473  00033C  0100               	movlb	0	; () banked
  2474  00033E  5187               	movf	?___lwmod& (0+255),w,b
  2475  000340  0F30               	addlw	48
  2476  000342  0100               	movlb	0	; () banked
  2477  000344  6FA5               	movwf	printf@c& (0+255),b
  2478                           
  2479                           ;doprnt.c: 1491: break;
  2480  000346  D030               	goto	l3722
  2481  000348                     l3714:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 1499: {
  2485                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2486  000348  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2487  00034C  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2488  000350  0100               	movlb	0	; () banked
  2489  000352  519F               	movf	printf@prec& (0+255),w,b
  2490  000354  0D02               	mullw	2
  2491  000356  0EDF               	movlw	low _hexpowers
  2492  000358  24F3               	addwf	prodl,w,c
  2493  00035A  6EF6               	movwf	tblptrl,c
  2494  00035C  0EFD               	movlw	high _hexpowers
  2495  00035E  20F4               	addwfc	prodh,w,c
  2496  000360  6EF7               	movwf	tblptrh,c
  2497  000362                     	if	0	;There are less than 3 active tblptr bytes
  2498  000362                     	endif
  2499  000362  0009               	tblrd		*+
  2500  000364  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2501  000368  000A               	tblrd		*-
  2502  00036A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2503  00036E  EC4C  F00D         	call	___lwdiv	;wreg free
  2504  000372  0100               	movlb	0	; () banked
  2505  000374  5180               	movf	?___lwdiv& (0+255),w,b
  2506  000376  0B0F               	andlw	15
  2507  000378  0100               	movlb	0	; () banked
  2508  00037A  6F9C               	movwf	printf@idx& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2512  00037C  0100               	movlb	0	; () banked
  2513  00037E  519C               	movf	printf@idx& (0+255),w,b
  2514  000380  0D01               	mullw	1
  2515  000382  0E91               	movlw	low STR_52
  2516  000384  24F3               	addwf	prodl,w,c
  2517  000386  6EF6               	movwf	tblptrl,c
  2518  000388  0EFF               	movlw	high STR_52
  2519  00038A  20F4               	addwfc	prodh,w,c
  2520  00038C  6EF7               	movwf	tblptrh,c
  2521  00038E                     	if	0	;There are less than 3 active tblptr bytes
  2522  00038E                     	endif
  2523  00038E  0008               	tblrd		*
  2524  000390  CFF5 F0A5          	movff	tablat,printf@c
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;doprnt.c: 1523: }
  2528                           
  2529                           ;doprnt.c: 1508: }
  2530                           ;doprnt.c: 1510: break;
  2531  000394  D009               	goto	l3722
  2532  000396                     l3720:
  2533                           
  2534                           ; BSR set to: 0
  2535  000396  0100               	movlb	0	; () banked
  2536  000398  51A2               	movf	printf@flag& (0+255),w,b
  2537  00039A  0BC0               	andlw	192
  2538                           
  2539                           ; Switch size 1, requested type "space"
  2540                           ; Number of cases is 2, Range of values is 128 to 192
  2541                           ; switch strategies available:
  2542                           ; Name         Instructions Cycles
  2543                           ; simple_byte            7     4 (average)
  2544                           ;	Chosen strategy is simple_byte
  2545  00039C  0A80               	xorlw	128	; case 128
  2546  00039E  B4D8               	btfsc	status,2,c
  2547  0003A0  D7D3               	goto	l3714
  2548  0003A2  0A40               	xorlw	64	; case 192
  2549  0003A4  B4D8               	btfsc	status,2,c
  2550  0003A6  D7AA               	goto	l3712
  2551  0003A8                     l3722:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 1524: (putch(c) );
  2555  0003A8  0100               	movlb	0	; () banked
  2556  0003AA  51A5               	movf	printf@c& (0+255),w,b
  2557  0003AC  ECC6  F010         	call	_putch
  2558  0003B0                     l3724:
  2559  0003B0  0100               	movlb	0	; () banked
  2560  0003B2  079F               	decf	printf@prec& (0+255),f,b
  2561  0003B4  0100               	movlb	0	; () banked
  2562  0003B6  299F               	incf	printf@prec& (0+255),w,b
  2563  0003B8  A4D8               	btfss	status,2,c
  2564  0003BA  D7ED               	goto	l3720
  2565  0003BC                     l3726:
  2566  0003BC  C08C  FFF6         	movff	printf@f,tblptrl
  2567  0003C0  C08D  FFF7         	movff	printf@f+1,tblptrh
  2568  0003C4  0100               	movlb	0	; () banked
  2569  0003C6  4B8C               	infsnz	printf@f& (0+255),f,b
  2570  0003C8  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2571  0003CA                     	if	0	;tblptru may be non-zero
  2572  0003CA                     	endif
  2573  0003CA                     	if	0	;tblptru may be non-zero
  2574  0003CA                     	endif
  2575  0003CA  0008               	tblrd		*
  2576  0003CC  CFF5 F0A5          	movff	tablat,printf@c
  2577  0003D0  0100               	movlb	0	; () banked
  2578  0003D2  51A5               	movf	printf@c& (0+255),w,b
  2579  0003D4  B4D8               	btfsc	status,2,c
  2580  0003D6  0012               	return	
  2581  0003D8  D623               	goto	l3604
  2582  0003DA                     __end_of_printf:
  2583                           	opt stack 0
  2584                           tblptru	equ	0xFF8
  2585                           tblptrh	equ	0xFF7
  2586                           tblptrl	equ	0xFF6
  2587                           tablat	equ	0xFF5
  2588                           prodh	equ	0xFF4
  2589                           prodl	equ	0xFF3
  2590                           intcon	equ	0xFF2
  2591                           intcon3	equ	0xFF0
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _putch *****************
  2602 ;; Defined at:
  2603 ;;		line 25 in file "lcd.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  data            1    wreg     unsigned char 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  data            1    2[BANK0 ] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;Total ram usage:        1 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    7
  2624 ;; This function calls:
  2625 ;;		_lcdNibble
  2626 ;; This function is called by:
  2627 ;;		_printf
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text3
  2632  00218C                     __ptext3:
  2633                           	opt stack 0
  2634  00218C                     _putch:
  2635                           	opt stack 21
  2636                           
  2637                           ;incstack = 0
  2638                           ;putch@data stored from wreg
  2639  00218C  0100               	movlb	0	; () banked
  2640  00218E  6F82               	movwf	putch@data& (0+255),b
  2641                           
  2642                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2643  002190  848C               	bsf	3980,2,c	;volatile
  2644                           
  2645                           ;lcd.c: 27: lcdNibble(data);
  2646  002192  0100               	movlb	0	; () banked
  2647  002194  5182               	movf	putch@data& (0+255),w,b
  2648  002196  ECC3  F00D         	call	_lcdNibble
  2649  00219A  0012               	return		;funcret
  2650  00219C                     __end_of_putch:
  2651                           	opt stack 0
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           prodh	equ	0xFF4
  2657                           prodl	equ	0xFF3
  2658                           intcon	equ	0xFF2
  2659                           intcon3	equ	0xFF0
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           indf2	equ	0xFDF
  2663                           postinc2	equ	0xFDE
  2664                           postdec2	equ	0xFDD
  2665                           fsr2h	equ	0xFDA
  2666                           fsr2l	equ	0xFD9
  2667                           status	equ	0xFD8
  2668                           
  2669 ;; *************** function _isdigit *****************
  2670 ;; Defined at:
  2671 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  c               1    wreg     unsigned char 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  c               1    2[BANK0 ] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;		None               void
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;Total ram usage:        3 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    6
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_printf
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text4
  2700  001F96                     __ptext4:
  2701                           	opt stack 0
  2702  001F96                     _isdigit:
  2703                           	opt stack 22
  2704                           
  2705                           ;incstack = 0
  2706                           ;isdigit@c stored from wreg
  2707  001F96  0100               	movlb	0	; () banked
  2708  001F98  6F82               	movwf	isdigit@c& (0+255),b
  2709  001F9A  0E00               	movlw	0
  2710  001F9C  0100               	movlb	0	; () banked
  2711  001F9E  6F81               	movwf	_isdigit$1056& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714  001FA0  0E3A               	movlw	58
  2715  001FA2  0100               	movlb	0	; () banked
  2716  001FA4  6182               	cpfslt	isdigit@c& (0+255),b
  2717  001FA6  D007               	goto	l3332
  2718                           
  2719                           ; BSR set to: 0
  2720  001FA8  0E2F               	movlw	47
  2721  001FAA  0100               	movlb	0	; () banked
  2722  001FAC  6582               	cpfsgt	isdigit@c& (0+255),b
  2723  001FAE  D003               	goto	l3332
  2724                           
  2725                           ; BSR set to: 0
  2726  001FB0  0E01               	movlw	1
  2727  001FB2  0100               	movlb	0	; () banked
  2728  001FB4  6F81               	movwf	_isdigit$1056& (0+255),b
  2729  001FB6                     l3332:
  2730                           
  2731                           ; BSR set to: 0
  2732  001FB6  C081  F080         	movff	_isdigit$1056,??_isdigit
  2733  001FBA  0100               	movlb	0	; () banked
  2734  001FBC  3180               	rrcf	??_isdigit& (0+255),w,b
  2735  001FBE  0012               	return	
  2736  001FC0                     __end_of_isdigit:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           intcon	equ	0xFF2
  2745                           intcon3	equ	0xFF0
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           indf2	equ	0xFDF
  2749                           postinc2	equ	0xFDE
  2750                           postdec2	equ	0xFDD
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           
  2755 ;; *************** function ___wmul *****************
  2756 ;; Defined at:
  2757 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2760 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  product         2    4[BANK0 ] unsigned int 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  2    0[BANK0 ] unsigned int 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0, prodl, prodh
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;Total ram usage:        6 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    6
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_printf
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text5
  2787  001EFC                     __ptext5:
  2788                           	opt stack 0
  2789  001EFC                     ___wmul:
  2790                           	opt stack 22
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;incstack = 0
  2794  001EFC  0100               	movlb	0	; () banked
  2795  001EFE  5180               	movf	___wmul@multiplier& (0+255),w,b
  2796  001F00  0100               	movlb	0	; () banked
  2797  001F02  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2798  001F04  CFF3 F084          	movff	prodl,___wmul@product
  2799  001F08  CFF4 F085          	movff	prodh,___wmul@product+1
  2800  001F0C  0100               	movlb	0	; () banked
  2801  001F0E  5180               	movf	___wmul@multiplier& (0+255),w,b
  2802  001F10  0100               	movlb	0	; () banked
  2803  001F12  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2804  001F14  50F3               	movf	prodl,w,c
  2805  001F16  0100               	movlb	0	; () banked
  2806  001F18  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2807  001F1A  0100               	movlb	0	; () banked
  2808  001F1C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2809  001F1E  0100               	movlb	0	; () banked
  2810  001F20  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2811  001F22  50F3               	movf	prodl,w,c
  2812  001F24  0100               	movlb	0	; () banked
  2813  001F26  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2814                           
  2815                           ; BSR set to: 0
  2816  001F28  C084  F080         	movff	___wmul@product,?___wmul
  2817  001F2C  C085  F081         	movff	___wmul@product+1,?___wmul+1
  2818  001F30  0012               	return	
  2819  001F32                     __end_of___wmul:
  2820                           	opt stack 0
  2821                           tblptru	equ	0xFF8
  2822                           tblptrh	equ	0xFF7
  2823                           tblptrl	equ	0xFF6
  2824                           tablat	equ	0xFF5
  2825                           prodh	equ	0xFF4
  2826                           prodl	equ	0xFF3
  2827                           intcon	equ	0xFF2
  2828                           intcon3	equ	0xFF0
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           indf2	equ	0xFDF
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function ___lwmod *****************
  2839 ;; Defined at:
  2840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  dividend        2    7[BANK0 ] unsigned int 
  2843 ;;  divisor         2    9[BANK0 ] unsigned int 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  counter         1   11[BANK0 ] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  2    7[BANK0 ] unsigned int 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2855 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;Total ram usage:        5 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    6
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_printf
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text6
  2870  001BEE                     __ptext6:
  2871                           	opt stack 0
  2872  001BEE                     ___lwmod:
  2873                           	opt stack 22
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;incstack = 0
  2877  001BEE  0100               	movlb	0	; () banked
  2878  001BF0  5189               	movf	___lwmod@divisor& (0+255),w,b
  2879  001BF2  0100               	movlb	0	; () banked
  2880  001BF4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2881  001BF6  B4D8               	btfsc	status,2,c
  2882  001BF8  D026               	goto	l937
  2883                           
  2884                           ; BSR set to: 0
  2885  001BFA  0E01               	movlw	1
  2886  001BFC  0100               	movlb	0	; () banked
  2887  001BFE  6F8B               	movwf	___lwmod@counter& (0+255),b
  2888  001C00  D006               	goto	l3392
  2889  001C02                     l3390:
  2890                           
  2891                           ; BSR set to: 0
  2892  001C02  0100               	movlb	0	; () banked
  2893  001C04  90D8               	bcf	status,0,c
  2894  001C06  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  2895  001C08  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2896  001C0A  0100               	movlb	0	; () banked
  2897  001C0C  2B8B               	incf	___lwmod@counter& (0+255),f,b
  2898  001C0E                     l3392:
  2899                           
  2900                           ; BSR set to: 0
  2901  001C0E  0100               	movlb	0	; () banked
  2902  001C10  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2903  001C12  D7F7               	goto	l3390
  2904  001C14                     l3394:
  2905                           
  2906                           ; BSR set to: 0
  2907  001C14  0100               	movlb	0	; () banked
  2908  001C16  5189               	movf	___lwmod@divisor& (0+255),w,b
  2909  001C18  0100               	movlb	0	; () banked
  2910  001C1A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  2911  001C1C  0100               	movlb	0	; () banked
  2912  001C1E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2913  001C20  0100               	movlb	0	; () banked
  2914  001C22  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2915  001C24  A0D8               	btfss	status,0,c
  2916  001C26  D008               	goto	l3398
  2917                           
  2918                           ; BSR set to: 0
  2919  001C28  0100               	movlb	0	; () banked
  2920  001C2A  5189               	movf	___lwmod@divisor& (0+255),w,b
  2921  001C2C  0100               	movlb	0	; () banked
  2922  001C2E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  2923  001C30  0100               	movlb	0	; () banked
  2924  001C32  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2925  001C34  0100               	movlb	0	; () banked
  2926  001C36  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2927  001C38                     l3398:
  2928                           
  2929                           ; BSR set to: 0
  2930  001C38  0100               	movlb	0	; () banked
  2931  001C3A  90D8               	bcf	status,0,c
  2932  001C3C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2933  001C3E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  2934                           
  2935                           ; BSR set to: 0
  2936  001C40  0100               	movlb	0	; () banked
  2937  001C42  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  2938  001C44  D7E7               	goto	l3394
  2939  001C46                     l937:
  2940                           
  2941                           ; BSR set to: 0
  2942  001C46  C087  F087         	movff	___lwmod@dividend,?___lwmod
  2943  001C4A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  2944                           
  2945                           ; BSR set to: 0
  2946  001C4E  0012               	return		;funcret
  2947  001C50                     __end_of___lwmod:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           intcon	equ	0xFF2
  2956                           intcon3	equ	0xFF0
  2957                           postinc0	equ	0xFEE
  2958                           wreg	equ	0xFE8
  2959                           indf2	equ	0xFDF
  2960                           postinc2	equ	0xFDE
  2961                           postdec2	equ	0xFDD
  2962                           fsr2h	equ	0xFDA
  2963                           fsr2l	equ	0xFD9
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function ___lwdiv *****************
  2967 ;; Defined at:
  2968 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  dividend        2    0[BANK0 ] unsigned int 
  2971 ;;  divisor         2    2[BANK0 ] unsigned int 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  quotient        2    4[BANK0 ] unsigned int 
  2974 ;;  counter         1    6[BANK0 ] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  2    0[BANK0 ] unsigned int 
  2977 ;; Registers used:
  2978 ;;		wreg, status,2, status,0
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2984 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;Total ram usage:        7 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    6
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_printf
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text7
  2999  001A98                     __ptext7:
  3000                           	opt stack 0
  3001  001A98                     ___lwdiv:
  3002                           	opt stack 22
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;incstack = 0
  3006  001A98  0E00               	movlw	0
  3007  001A9A  0100               	movlb	0	; () banked
  3008  001A9C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3009  001A9E  0E00               	movlw	0
  3010  001AA0  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013  001AA2  0100               	movlb	0	; () banked
  3014  001AA4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3015  001AA6  0100               	movlb	0	; () banked
  3016  001AA8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3017  001AAA  B4D8               	btfsc	status,2,c
  3018  001AAC  D02C               	goto	l927
  3019                           
  3020                           ; BSR set to: 0
  3021  001AAE  0E01               	movlw	1
  3022  001AB0  0100               	movlb	0	; () banked
  3023  001AB2  6F86               	movwf	___lwdiv@counter& (0+255),b
  3024  001AB4  D006               	goto	l3372
  3025  001AB6                     l3370:
  3026                           
  3027                           ; BSR set to: 0
  3028  001AB6  0100               	movlb	0	; () banked
  3029  001AB8  90D8               	bcf	status,0,c
  3030  001ABA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3031  001ABC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3032  001ABE  0100               	movlb	0	; () banked
  3033  001AC0  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3034  001AC2                     l3372:
  3035                           
  3036                           ; BSR set to: 0
  3037  001AC2  0100               	movlb	0	; () banked
  3038  001AC4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3039  001AC6  D7F7               	goto	l3370
  3040  001AC8                     l3374:
  3041                           
  3042                           ; BSR set to: 0
  3043  001AC8  0100               	movlb	0	; () banked
  3044  001ACA  90D8               	bcf	status,0,c
  3045  001ACC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3046  001ACE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3047                           
  3048                           ; BSR set to: 0
  3049  001AD0  0100               	movlb	0	; () banked
  3050  001AD2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3051  001AD4  0100               	movlb	0	; () banked
  3052  001AD6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3053  001AD8  0100               	movlb	0	; () banked
  3054  001ADA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3055  001ADC  0100               	movlb	0	; () banked
  3056  001ADE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3057  001AE0  A0D8               	btfss	status,0,c
  3058  001AE2  D00A               	goto	l3382
  3059                           
  3060                           ; BSR set to: 0
  3061  001AE4  0100               	movlb	0	; () banked
  3062  001AE6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3063  001AE8  0100               	movlb	0	; () banked
  3064  001AEA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3065  001AEC  0100               	movlb	0	; () banked
  3066  001AEE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3067  001AF0  0100               	movlb	0	; () banked
  3068  001AF2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3069                           
  3070                           ; BSR set to: 0
  3071  001AF4  0100               	movlb	0	; () banked
  3072  001AF6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3073  001AF8                     l3382:
  3074                           
  3075                           ; BSR set to: 0
  3076  001AF8  0100               	movlb	0	; () banked
  3077  001AFA  90D8               	bcf	status,0,c
  3078  001AFC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3079  001AFE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3080                           
  3081                           ; BSR set to: 0
  3082  001B00  0100               	movlb	0	; () banked
  3083  001B02  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3084  001B04  D7E1               	goto	l3374
  3085  001B06                     l927:
  3086                           
  3087                           ; BSR set to: 0
  3088  001B06  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3089  001B0A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3090                           
  3091                           ; BSR set to: 0
  3092  001B0E  0012               	return		;funcret
  3093  001B10                     __end_of___lwdiv:
  3094                           	opt stack 0
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           prodh	equ	0xFF4
  3100                           prodl	equ	0xFF3
  3101                           intcon	equ	0xFF2
  3102                           intcon3	equ	0xFF0
  3103                           postinc0	equ	0xFEE
  3104                           wreg	equ	0xFE8
  3105                           indf2	equ	0xFDF
  3106                           postinc2	equ	0xFDE
  3107                           postdec2	equ	0xFDD
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           
  3112 ;; *************** function _line1 *****************
  3113 ;; Defined at:
  3114 ;;		line 58 in file "lcd.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:        0 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    8
  3135 ;; This function calls:
  3136 ;;		_lcdInst
  3137 ;; This function is called by:
  3138 ;;		_showRTC
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           	psect	text8
  3143  0021D8                     __ptext8:
  3144                           	opt stack 0
  3145  0021D8                     _line1:
  3146                           	opt stack 21
  3147                           
  3148                           ;lcd.c: 59: lcdInst(0b11000000);
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;incstack = 0
  3152  0021D8  0EC0               	movlw	192
  3153  0021DA  ECCE  F010         	call	_lcdInst
  3154  0021DE  0012               	return		;funcret
  3155  0021E0                     __end_of_line1:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           intcon3	equ	0xFF0
  3165                           postinc0	equ	0xFEE
  3166                           wreg	equ	0xFE8
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           postdec2	equ	0xFDD
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _line0 *****************
  3175 ;; Defined at:
  3176 ;;		line 54 in file "lcd.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;Total ram usage:        0 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    8
  3197 ;; This function calls:
  3198 ;;		_lcdInst
  3199 ;; This function is called by:
  3200 ;;		_showRTC
  3201 ;;		_main
  3202 ;;		_mainloop
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text9
  3207  0021E0                     __ptext9:
  3208                           	opt stack 0
  3209  0021E0                     _line0:
  3210                           	opt stack 21
  3211                           
  3212                           ;lcd.c: 55: lcdInst(0b10000000);
  3213                           
  3214                           ;incstack = 0
  3215  0021E0  0E80               	movlw	128
  3216  0021E2  ECCE  F010         	call	_lcdInst
  3217  0021E6  0012               	return		;funcret
  3218  0021E8                     __end_of_line0:
  3219                           	opt stack 0
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           intcon	equ	0xFF2
  3227                           intcon3	equ	0xFF0
  3228                           postinc0	equ	0xFEE
  3229                           wreg	equ	0xFE8
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _getTime *****************
  3238 ;; Defined at:
  3239 ;;		line 77 in file "modules.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3242 ;;		 -> time(7), 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  i               1    5[BANK0 ] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;Total ram usage:        3 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    8
  3261 ;; This function calls:
  3262 ;;		_I2C_Master_Read
  3263 ;;		_I2C_Master_Start
  3264 ;;		_I2C_Master_Stop
  3265 ;;		_I2C_Master_Write
  3266 ;; This function is called by:
  3267 ;;		_showRTC
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text10
  3272  00180A                     __ptext10:
  3273                           	opt stack 0
  3274  00180A                     _getTime:
  3275                           	opt stack 21
  3276                           
  3277                           ;modules.c: 78: (INTCONbits.GIE = 0);
  3278                           
  3279                           ;incstack = 0
  3280  00180A  9EF2               	bcf	intcon,7,c	;volatile
  3281                           
  3282                           ;modules.c: 82: I2C_Master_Start();
  3283  00180C  ECF8  F010         	call	_I2C_Master_Start	;wreg free
  3284                           
  3285                           ;modules.c: 83: I2C_Master_Write(0b11010000);
  3286  001810  0E00               	movlw	0
  3287  001812  0100               	movlb	0	; () banked
  3288  001814  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3289  001816  0ED0               	movlw	208
  3290  001818  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3291  00181A  ECE2  F010         	call	_I2C_Master_Write	;wreg free
  3292                           
  3293                           ;modules.c: 84: I2C_Master_Write(0x00);
  3294  00181E  0E00               	movlw	0
  3295  001820  0100               	movlb	0	; () banked
  3296  001822  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3297  001824  0E00               	movlw	0
  3298  001826  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3299  001828  ECE2  F010         	call	_I2C_Master_Write	;wreg free
  3300                           
  3301                           ;modules.c: 85: I2C_Master_Stop();
  3302  00182C  ECF4  F010         	call	_I2C_Master_Stop	;wreg free
  3303                           
  3304                           ;modules.c: 88: I2C_Master_Start();
  3305  001830  ECF8  F010         	call	_I2C_Master_Start	;wreg free
  3306                           
  3307                           ;modules.c: 89: I2C_Master_Write(0b11010001);
  3308  001834  0E00               	movlw	0
  3309  001836  0100               	movlb	0	; () banked
  3310  001838  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3311  00183A  0ED1               	movlw	209
  3312  00183C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3313  00183E  ECE2  F010         	call	_I2C_Master_Write	;wreg free
  3314                           
  3315                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
  3316  001842  0E00               	movlw	0
  3317  001844  0100               	movlb	0	; () banked
  3318  001846  6F85               	movwf	getTime@i& (0+255),b
  3319  001848                     l3860:
  3320                           
  3321                           ; BSR set to: 0
  3322  001848  0E05               	movlw	5
  3323  00184A  0100               	movlb	0	; () banked
  3324  00184C  6585               	cpfsgt	getTime@i& (0+255),b
  3325  00184E  D001               	goto	l3864
  3326  001850  D012               	goto	l3870
  3327  001852                     l3864:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
  3331  001852  0100               	movlb	0	; () banked
  3332  001854  5185               	movf	getTime@i& (0+255),w,b
  3333  001856  0D01               	mullw	1
  3334  001858  50F3               	movf	prodl,w,c
  3335  00185A  0100               	movlb	0	; () banked
  3336  00185C  2583               	addwf	getTime@time& (0+255),w,b
  3337  00185E  6ED9               	movwf	fsr2l,c
  3338  001860  50F4               	movf	prodh,w,c
  3339  001862  0100               	movlb	0	; () banked
  3340  001864  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  3341  001866  6EDA               	movwf	fsr2h,c
  3342  001868  0E01               	movlw	1
  3343  00186A  ECB4  F00F         	call	_I2C_Master_Read
  3344  00186E  6EDF               	movwf	indf2,c
  3345  001870  0100               	movlb	0	; () banked
  3346  001872  2B85               	incf	getTime@i& (0+255),f,b
  3347  001874  D7E9               	goto	l3860
  3348  001876                     l3870:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;modules.c: 92: }
  3352                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
  3353  001876  0100               	movlb	0	; () banked
  3354  001878  EE20 F006          	lfsr	2,6
  3355  00187C  5183               	movf	getTime@time& (0+255),w,b
  3356  00187E  26D9               	addwf	fsr2l,f,c
  3357  001880  5184               	movf	(getTime@time+1)& (0+255),w,b
  3358  001882  22DA               	addwfc	fsr2h,f,c
  3359  001884  0E00               	movlw	0
  3360  001886  ECB4  F00F         	call	_I2C_Master_Read
  3361  00188A  6EDF               	movwf	indf2,c
  3362                           
  3363                           ;modules.c: 94: I2C_Master_Stop();
  3364  00188C  ECF4  F010         	call	_I2C_Master_Stop	;wreg free
  3365                           
  3366                           ;modules.c: 95: (INTCONbits.GIE = 1);
  3367  001890  8EF2               	bsf	intcon,7,c	;volatile
  3368  001892  0012               	return		;funcret
  3369  001894                     __end_of_getTime:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           intcon	equ	0xFF2
  3378                           intcon3	equ	0xFF0
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _I2C_Master_Write *****************
  3389 ;; Defined at:
  3390 ;;		line 42 in file "I2C.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  d               2    1[BANK0 ] unsigned int 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        2 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    7
  3411 ;; This function calls:
  3412 ;;		_I2C_Master_Wait
  3413 ;; This function is called by:
  3414 ;;		_getTime
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text11
  3419  0021C4                     __ptext11:
  3420                           	opt stack 0
  3421  0021C4                     _I2C_Master_Write:
  3422                           	opt stack 21
  3423                           
  3424                           ;I2C.c: 43: I2C_Master_Wait();
  3425                           
  3426                           ;incstack = 0
  3427  0021C4  ECB3  F010         	call	_I2C_Master_Wait	;wreg free
  3428                           
  3429                           ;I2C.c: 44: SSPBUF = d;
  3430  0021C8  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3431  0021CC  0012               	return		;funcret
  3432  0021CE                     __end_of_I2C_Master_Write:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           intcon3	equ	0xFF0
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           indf2	equ	0xFDF
  3445                           postinc2	equ	0xFDE
  3446                           postdec2	equ	0xFDD
  3447                           fsr2h	equ	0xFDA
  3448                           fsr2l	equ	0xFD9
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _I2C_Master_Stop *****************
  3452 ;; Defined at:
  3453 ;;		line 37 in file "I2C.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  1    wreg      void 
  3460 ;; Registers used:
  3461 ;;		wreg, status,2, status,0, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;Total ram usage:        0 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    7
  3474 ;; This function calls:
  3475 ;;		_I2C_Master_Wait
  3476 ;; This function is called by:
  3477 ;;		_getTime
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text12
  3482  0021E8                     __ptext12:
  3483                           	opt stack 0
  3484  0021E8                     _I2C_Master_Stop:
  3485                           	opt stack 21
  3486                           
  3487                           ;I2C.c: 38: I2C_Master_Wait();
  3488                           
  3489                           ;incstack = 0
  3490  0021E8  ECB3  F010         	call	_I2C_Master_Wait	;wreg free
  3491                           
  3492                           ;I2C.c: 39: PEN = 1;
  3493  0021EC  84C5               	bsf	4037,2,c	;volatile
  3494  0021EE  0012               	return		;funcret
  3495  0021F0                     __end_of_I2C_Master_Stop:
  3496                           	opt stack 0
  3497                           tblptru	equ	0xFF8
  3498                           tblptrh	equ	0xFF7
  3499                           tblptrl	equ	0xFF6
  3500                           tablat	equ	0xFF5
  3501                           prodh	equ	0xFF4
  3502                           prodl	equ	0xFF3
  3503                           intcon	equ	0xFF2
  3504                           intcon3	equ	0xFF0
  3505                           postinc0	equ	0xFEE
  3506                           wreg	equ	0xFE8
  3507                           indf2	equ	0xFDF
  3508                           postinc2	equ	0xFDE
  3509                           postdec2	equ	0xFDD
  3510                           fsr2h	equ	0xFDA
  3511                           fsr2l	equ	0xFD9
  3512                           status	equ	0xFD8
  3513                           
  3514 ;; *************** function _I2C_Master_Start *****************
  3515 ;; Defined at:
  3516 ;;		line 27 in file "I2C.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;		None
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;		None
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, status,2, status,0, cstack
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;Total ram usage:        0 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    7
  3537 ;; This function calls:
  3538 ;;		_I2C_Master_Wait
  3539 ;; This function is called by:
  3540 ;;		_getTime
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text13
  3545  0021F0                     __ptext13:
  3546                           	opt stack 0
  3547  0021F0                     _I2C_Master_Start:
  3548                           	opt stack 21
  3549                           
  3550                           ;I2C.c: 28: I2C_Master_Wait();
  3551                           
  3552                           ;incstack = 0
  3553  0021F0  ECB3  F010         	call	_I2C_Master_Wait	;wreg free
  3554                           
  3555                           ;I2C.c: 29: SEN = 1;
  3556  0021F4  80C5               	bsf	4037,0,c	;volatile
  3557  0021F6  0012               	return		;funcret
  3558  0021F8                     __end_of_I2C_Master_Start:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           intcon	equ	0xFF2
  3567                           intcon3	equ	0xFF0
  3568                           postinc0	equ	0xFEE
  3569                           wreg	equ	0xFE8
  3570                           indf2	equ	0xFDF
  3571                           postinc2	equ	0xFDE
  3572                           postdec2	equ	0xFDD
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _I2C_Master_Read *****************
  3578 ;; Defined at:
  3579 ;;		line 47 in file "I2C.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  a               1    wreg     unsigned char 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  a               1    1[BANK0 ] unsigned char 
  3584 ;;  temp            1    2[BANK0 ] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      unsigned char 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;Total ram usage:        2 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    7
  3601 ;; This function calls:
  3602 ;;		_I2C_Master_Wait
  3603 ;; This function is called by:
  3604 ;;		_getTime
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text14
  3609  001F68                     __ptext14:
  3610                           	opt stack 0
  3611  001F68                     _I2C_Master_Read:
  3612                           	opt stack 21
  3613                           
  3614                           ;incstack = 0
  3615                           ;I2C_Master_Read@a stored from wreg
  3616  001F68  0100               	movlb	0	; () banked
  3617  001F6A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  3618                           
  3619                           ;I2C.c: 48: unsigned char temp;
  3620                           ;I2C.c: 49: I2C_Master_Wait();
  3621  001F6C  ECB3  F010         	call	_I2C_Master_Wait	;wreg free
  3622                           
  3623                           ;I2C.c: 50: RCEN = 1;
  3624  001F70  86C5               	bsf	4037,3,c	;volatile
  3625                           
  3626                           ;I2C.c: 51: I2C_Master_Wait();
  3627  001F72  ECB3  F010         	call	_I2C_Master_Wait	;wreg free
  3628                           
  3629                           ;I2C.c: 52: temp = SSPBUF;
  3630  001F76  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  3631                           
  3632                           ;I2C.c: 53: I2C_Master_Wait();
  3633  001F7A  ECB3  F010         	call	_I2C_Master_Wait	;wreg free
  3634                           
  3635                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3636  001F7E  0100               	movlb	0	; () banked
  3637  001F80  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  3638  001F82  0100               	movlb	0	; () banked
  3639  001F84  A4D8               	btfss	status,2,c
  3640  001F86  D002               	goto	u2000
  3641  001F88  8AC5               	bsf	4037,5,c	;volatile
  3642  001F8A  D001               	goto	l3196
  3643  001F8C                     u2000:
  3644  001F8C  9AC5               	bcf	4037,5,c	;volatile
  3645  001F8E                     l3196:
  3646                           
  3647                           ;I2C.c: 55: ACKEN = 1;
  3648  001F8E  88C5               	bsf	4037,4,c	;volatile
  3649                           
  3650                           ;I2C.c: 56: return temp;
  3651  001F90  0100               	movlb	0	; () banked
  3652  001F92  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  3653  001F94  0012               	return	
  3654  001F96                     __end_of_I2C_Master_Read:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           intcon3	equ	0xFF0
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           postdec2	equ	0xFDD
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _I2C_Master_Wait *****************
  3674 ;; Defined at:
  3675 ;;		line 23 in file "I2C.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;		None
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:        1 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    6
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_I2C_Master_Start
  3700 ;;		_I2C_Master_Stop
  3701 ;;		_I2C_Master_Write
  3702 ;;		_I2C_Master_Read
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text15
  3707  002166                     __ptext15:
  3708                           	opt stack 0
  3709  002166                     _I2C_Master_Wait:
  3710                           	opt stack 21
  3711  002166                     l375:
  3712  002166  B4C7               	btfsc	4039,2,c	;volatile
  3713  002168  D7FE               	goto	l375
  3714  00216A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  3715  00216E  0E1F               	movlw	31
  3716  002170  0100               	movlb	0	; () banked
  3717  002172  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3718  002174  B4D8               	btfsc	status,2,c
  3719  002176  0012               	return	
  3720  002178  D7F6               	goto	l375
  3721  00217A                     __end_of_I2C_Master_Wait:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           intcon3	equ	0xFF0
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _initialize *****************
  3741 ;; Defined at:
  3742 ;;		line 18 in file "main.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;		None
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;Total ram usage:        1 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    9
  3763 ;; This function calls:
  3764 ;;		_I2C_Master_Init
  3765 ;;		_initLCD
  3766 ;;		_initLatest
  3767 ;;		_lcdInst
  3768 ;; This function is called by:
  3769 ;;		_main
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text16
  3774  00199E                     __ptext16:
  3775                           	opt stack 0
  3776  00199E                     _initialize:
  3777                           	opt stack 21
  3778                           
  3779                           ;main.c: 19: TRISA = 0xFF;
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;incstack = 0
  3783  00199E  6892               	setf	3986,c	;volatile
  3784                           
  3785                           ;main.c: 20: TRISB = 0xFF;
  3786  0019A0  6893               	setf	3987,c	;volatile
  3787                           
  3788                           ;main.c: 21: TRISC = 0x00;
  3789  0019A2  0E00               	movlw	0
  3790  0019A4  6E94               	movwf	3988,c	;volatile
  3791                           
  3792                           ;main.c: 22: TRISD = 0x00;
  3793  0019A6  0E00               	movlw	0
  3794  0019A8  6E95               	movwf	3989,c	;volatile
  3795                           
  3796                           ;main.c: 23: TRISE = 0x00;
  3797  0019AA  0E00               	movlw	0
  3798  0019AC  6E96               	movwf	3990,c	;volatile
  3799                           
  3800                           ;main.c: 25: RBPU = 0;
  3801  0019AE  9EF1               	bcf	intcon2,7,c	;volatile
  3802                           
  3803                           ;main.c: 26: LATA = 0x00;
  3804  0019B0  0E00               	movlw	0
  3805  0019B2  6E89               	movwf	3977,c	;volatile
  3806                           
  3807                           ;main.c: 27: LATB = 0x00;
  3808  0019B4  0E00               	movlw	0
  3809  0019B6  6E8A               	movwf	3978,c	;volatile
  3810                           
  3811                           ;main.c: 28: LATC = 0x00;
  3812  0019B8  0E00               	movlw	0
  3813  0019BA  6E8B               	movwf	3979,c	;volatile
  3814                           
  3815                           ;main.c: 29: LATD = 0x00;
  3816  0019BC  0E00               	movlw	0
  3817  0019BE  6E8C               	movwf	3980,c	;volatile
  3818                           
  3819                           ;main.c: 30: LATE = 0x00;
  3820  0019C0  0E00               	movlw	0
  3821  0019C2  6E8D               	movwf	3981,c	;volatile
  3822                           
  3823                           ;main.c: 32: ADCON0 = 0x00;
  3824  0019C4  0E00               	movlw	0
  3825  0019C6  6EC2               	movwf	4034,c	;volatile
  3826                           
  3827                           ;main.c: 33: ADCON1 = 0x0C;
  3828  0019C8  0E0C               	movlw	12
  3829  0019CA  6EC1               	movwf	4033,c	;volatile
  3830                           
  3831                           ;main.c: 34: CVRCON = 0x00;
  3832  0019CC  0E00               	movlw	0
  3833  0019CE  6EB5               	movwf	4021,c	;volatile
  3834                           
  3835                           ;main.c: 35: ADFM = 1;
  3836  0019D0  8EC0               	bsf	4032,7,c	;volatile
  3837                           
  3838                           ;main.c: 37: initLCD();
  3839  0019D2  EC1E  F00F         	call	_initLCD	;wreg free
  3840                           
  3841                           ;main.c: 38: lcdInst(0x01);;
  3842  0019D6  0E01               	movlw	1
  3843  0019D8  ECCE  F010         	call	_lcdInst
  3844                           
  3845                           ;main.c: 39: _delay((unsigned long)((50)*(8000000/4000.0)));
  3846  0019DC  0E82               	movlw	130
  3847  0019DE  0100               	movlb	0	; () banked
  3848  0019E0  6F95               	movwf	??_initialize& (0+255),b
  3849  0019E2  0EDD               	movlw	221
  3850  0019E4                     u3077:
  3851  0019E4  2EE8               	decfsz	wreg,f,c
  3852  0019E6  D7FE               	bra	u3077
  3853  0019E8  2F95               	decfsz	??_initialize& (0+255),f,b
  3854  0019EA  D7FC               	bra	u3077
  3855  0019EC  D000               	nop2	
  3856                           
  3857                           ;main.c: 40: I2C_Master_Init(10000);
  3858  0019EE  0E10               	movlw	16
  3859  0019F0  0100               	movlb	0	; () banked
  3860  0019F2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3861  0019F4  0E27               	movlw	39
  3862  0019F6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3863  0019F8  0E00               	movlw	0
  3864  0019FA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3865  0019FC  0E00               	movlw	0
  3866  0019FE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3867  001A00  EC28  F00E         	call	_I2C_Master_Init	;wreg free
  3868                           
  3869                           ;main.c: 42: _delay((unsigned long)((50)*(8000000/4000.0)));
  3870  001A04  0E82               	movlw	130
  3871  001A06  0100               	movlb	0	; () banked
  3872  001A08  6F95               	movwf	??_initialize& (0+255),b
  3873  001A0A  0EDD               	movlw	221
  3874  001A0C                     u3087:
  3875  001A0C  2EE8               	decfsz	wreg,f,c
  3876  001A0E  D7FE               	bra	u3087
  3877  001A10  2F95               	decfsz	??_initialize& (0+255),f,b
  3878  001A12  D7FC               	bra	u3087
  3879  001A14  D000               	nop2	
  3880                           
  3881                           ;main.c: 43: initLatest();
  3882  001A16  EC41  F010         	call	_initLatest	;wreg free
  3883  001A1A  0012               	return		;funcret
  3884  001A1C                     __end_of_initialize:
  3885                           	opt stack 0
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           prodh	equ	0xFF4
  3891                           prodl	equ	0xFF3
  3892                           intcon	equ	0xFF2
  3893                           intcon2	equ	0xFF1
  3894                           intcon3	equ	0xFF0
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           postdec2	equ	0xFDD
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _initLatest *****************
  3905 ;; Defined at:
  3906 ;;		line 9 in file "eeprom.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;Total ram usage:        0 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    7
  3927 ;; This function calls:
  3928 ;;		_ReadEE
  3929 ;; This function is called by:
  3930 ;;		_initialize
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text17
  3935  002082                     __ptext17:
  3936                           	opt stack 0
  3937  002082                     _initLatest:
  3938                           	opt stack 22
  3939                           
  3940                           ;eeprom.c: 10: Latest = ReadEE(160);
  3941                           
  3942                           ;incstack = 0
  3943  002082  0E00               	movlw	0
  3944  002084  0100               	movlb	0	; () banked
  3945  002086  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  3946  002088  0EA0               	movlw	160
  3947  00208A  6F80               	movwf	ReadEE@address& (0+255),b
  3948  00208C  EC9C  F010         	call	_ReadEE	;wreg free
  3949  002090  0100               	movlb	0	; () banked
  3950  002092  6FC6               	movwf	_Latest& (0+255),b
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;eeprom.c: 11: if (Latest > 3) {
  3954  002094  0E03               	movlw	3
  3955  002096  0100               	movlb	0	; () banked
  3956  002098  65C6               	cpfsgt	_Latest& (0+255),b
  3957  00209A  0012               	return	
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;eeprom.c: 12: Latest = 0;
  3961  00209C  0E00               	movlw	0
  3962  00209E  0100               	movlb	0	; () banked
  3963  0020A0  6FC6               	movwf	_Latest& (0+255),b
  3964  0020A2  0012               	return	
  3965  0020A4                     __end_of_initLatest:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           intcon2	equ	0xFF1
  3975                           intcon3	equ	0xFF0
  3976                           postinc0	equ	0xFEE
  3977                           wreg	equ	0xFE8
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           postdec2	equ	0xFDD
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           
  3985 ;; *************** function _ReadEE *****************
  3986 ;; Defined at:
  3987 ;;		line 16 in file "eeprom.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  address         2    0[BANK0 ] unsigned int 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      unsigned char 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;Total ram usage:        2 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    6
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_initLatest
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text18
  4016  002138                     __ptext18:
  4017                           	opt stack 0
  4018  002138                     _ReadEE:
  4019                           	opt stack 22
  4020                           
  4021                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;incstack = 0
  4025  002138  0100               	movlb	0	; () banked
  4026  00213A  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  4027  00213C  6EAA               	movwf	4010,c	;volatile
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  4031  00213E  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  4035  002142  9EA6               	bcf	4006,7,c	;volatile
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  4039  002144  9CA6               	bcf	4006,6,c	;volatile
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;eeprom.c: 24: EECON1bits.RD = 1;
  4043  002146  80A6               	bsf	4006,0,c	;volatile
  4044  002148                     l423:
  4045  002148  B0A6               	btfsc	4006,0,c	;volatile
  4046  00214A  D7FE               	goto	l423
  4047                           
  4048                           ;eeprom.c: 30: return EEDATA;
  4049  00214C  50A8               	movf	4008,w,c	;volatile
  4050  00214E  0012               	return	
  4051  002150                     __end_of_ReadEE:
  4052                           	opt stack 0
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           prodh	equ	0xFF4
  4058                           prodl	equ	0xFF3
  4059                           intcon	equ	0xFF2
  4060                           intcon2	equ	0xFF1
  4061                           intcon3	equ	0xFF0
  4062                           postinc0	equ	0xFEE
  4063                           wreg	equ	0xFE8
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _initLCD *****************
  4072 ;; Defined at:
  4073 ;;		line 9 in file "lcd.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;Total ram usage:        1 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    8
  4094 ;; This function calls:
  4095 ;;		_lcdInst
  4096 ;; This function is called by:
  4097 ;;		_initialize
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text19
  4102  001E3C                     __ptext19:
  4103                           	opt stack 0
  4104  001E3C                     _initLCD:
  4105                           	opt stack 21
  4106                           
  4107                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4108                           
  4109                           ;incstack = 0
  4110  001E3C  0E27               	movlw	39
  4111  001E3E  0100               	movlb	0	; () banked
  4112  001E40  6F83               	movwf	??_initLCD& (0+255),b
  4113  001E42  0EF5               	movlw	245
  4114  001E44                     u3097:
  4115  001E44  2EE8               	decfsz	wreg,f,c
  4116  001E46  D7FE               	bra	u3097
  4117  001E48  2F83               	decfsz	??_initLCD& (0+255),f,b
  4118  001E4A  D7FC               	bra	u3097
  4119                           
  4120                           ;lcd.c: 11: lcdInst(0b00110011);
  4121  001E4C  0E33               	movlw	51
  4122  001E4E  ECCE  F010         	call	_lcdInst
  4123                           
  4124                           ;lcd.c: 12: lcdInst(0b00110010);
  4125  001E52  0E32               	movlw	50
  4126  001E54  ECCE  F010         	call	_lcdInst
  4127                           
  4128                           ;lcd.c: 13: lcdInst(0b00101000);
  4129  001E58  0E28               	movlw	40
  4130  001E5A  ECCE  F010         	call	_lcdInst
  4131                           
  4132                           ;lcd.c: 14: lcdInst(0b00001111);
  4133  001E5E  0E0F               	movlw	15
  4134  001E60  ECCE  F010         	call	_lcdInst
  4135                           
  4136                           ;lcd.c: 15: lcdInst(0b00000110);
  4137  001E64  0E06               	movlw	6
  4138  001E66  ECCE  F010         	call	_lcdInst
  4139                           
  4140                           ;lcd.c: 16: lcdInst(0b00000001);
  4141  001E6A  0E01               	movlw	1
  4142  001E6C  ECCE  F010         	call	_lcdInst
  4143                           
  4144                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4145  001E70  0E27               	movlw	39
  4146  001E72  0100               	movlb	0	; () banked
  4147  001E74  6F83               	movwf	??_initLCD& (0+255),b
  4148  001E76  0EF5               	movlw	245
  4149  001E78                     u3107:
  4150  001E78  2EE8               	decfsz	wreg,f,c
  4151  001E7A  D7FE               	bra	u3107
  4152  001E7C  2F83               	decfsz	??_initLCD& (0+255),f,b
  4153  001E7E  D7FC               	bra	u3107
  4154  001E80  0012               	return		;funcret
  4155  001E82                     __end_of_initLCD:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           intcon2	equ	0xFF1
  4165                           intcon3	equ	0xFF0
  4166                           postinc0	equ	0xFEE
  4167                           wreg	equ	0xFE8
  4168                           indf2	equ	0xFDF
  4169                           postinc2	equ	0xFDE
  4170                           postdec2	equ	0xFDD
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function _lcdInst *****************
  4176 ;; Defined at:
  4177 ;;		line 20 in file "lcd.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  data            1    wreg     unsigned char 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  data            1    2[BANK0 ] unsigned char 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;Total ram usage:        1 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    7
  4198 ;; This function calls:
  4199 ;;		_lcdNibble
  4200 ;; This function is called by:
  4201 ;;		_initialize
  4202 ;;		_initLCD
  4203 ;;		_line0
  4204 ;;		_line1
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text20
  4209  00219C                     __ptext20:
  4210                           	opt stack 0
  4211  00219C                     _lcdInst:
  4212                           	opt stack 21
  4213                           
  4214                           ;incstack = 0
  4215                           ;lcdInst@data stored from wreg
  4216  00219C  0100               	movlb	0	; () banked
  4217  00219E  6F82               	movwf	lcdInst@data& (0+255),b
  4218                           
  4219                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4220  0021A0  948C               	bcf	3980,2,c	;volatile
  4221                           
  4222                           ;lcd.c: 22: lcdNibble(data);
  4223  0021A2  0100               	movlb	0	; () banked
  4224  0021A4  5182               	movf	lcdInst@data& (0+255),w,b
  4225  0021A6  ECC3  F00D         	call	_lcdNibble
  4226  0021AA  0012               	return		;funcret
  4227  0021AC                     __end_of_lcdInst:
  4228                           	opt stack 0
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           intcon2	equ	0xFF1
  4237                           intcon3	equ	0xFF0
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           indf2	equ	0xFDF
  4241                           postinc2	equ	0xFDE
  4242                           postdec2	equ	0xFDD
  4243                           fsr2h	equ	0xFDA
  4244                           fsr2l	equ	0xFD9
  4245                           status	equ	0xFD8
  4246                           
  4247 ;; *************** function _lcdNibble *****************
  4248 ;; Defined at:
  4249 ;;		line 30 in file "lcd.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  data            1    wreg     unsigned char 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  data            1    1[BANK0 ] unsigned char 
  4254 ;;  temp            1    0[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;Total ram usage:        2 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    6
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_lcdInst
  4275 ;;		_putch
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text21
  4280  001B86                     __ptext21:
  4281                           	opt stack 0
  4282  001B86                     _lcdNibble:
  4283                           	opt stack 21
  4284                           
  4285                           ;incstack = 0
  4286                           ;lcdNibble@data stored from wreg
  4287  001B86  0100               	movlb	0	; () banked
  4288  001B88  6F81               	movwf	lcdNibble@data& (0+255),b
  4289                           
  4290                           ;lcd.c: 32: char temp = data & 0xF0;
  4291  001B8A  0100               	movlb	0	; () banked
  4292  001B8C  5181               	movf	lcdNibble@data& (0+255),w,b
  4293  001B8E  0BF0               	andlw	240
  4294  001B90  0100               	movlb	0	; () banked
  4295  001B92  6F80               	movwf	lcdNibble@temp& (0+255),b
  4296                           
  4297                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4298  001B94  508C               	movf	3980,w,c	;volatile
  4299  001B96  0B0F               	andlw	15
  4300  001B98  6E8C               	movwf	3980,c	;volatile
  4301                           
  4302                           ;lcd.c: 34: LATD = temp | LATD;
  4303  001B9A  0100               	movlb	0	; () banked
  4304  001B9C  5180               	movf	lcdNibble@temp& (0+255),w,b
  4305  001B9E  108C               	iorwf	3980,w,c	;volatile
  4306  001BA0  6E8C               	movwf	3980,c	;volatile
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4310  001BA2  968C               	bcf	3980,3,c	;volatile
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4314  001BA4  0E10               	movlw	16
  4315  001BA6                     u3117:
  4316  001BA6  2EE8               	decfsz	wreg,f,c
  4317  001BA8  D7FE               	bra	u3117
  4318  001BAA  D000               	nop2	
  4319                           
  4320                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4321  001BAC  868C               	bsf	3980,3,c	;volatile
  4322                           
  4323                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4324  001BAE  0E10               	movlw	16
  4325  001BB0                     u3127:
  4326  001BB0  2EE8               	decfsz	wreg,f,c
  4327  001BB2  D7FE               	bra	u3127
  4328  001BB4  D000               	nop2	
  4329                           
  4330                           ;lcd.c: 41: data = data << 4;
  4331  001BB6  0100               	movlb	0	; () banked
  4332  001BB8  3981               	swapf	lcdNibble@data& (0+255),w,b
  4333  001BBA  0BF0               	andlw	240
  4334  001BBC  0100               	movlb	0	; () banked
  4335  001BBE  6F81               	movwf	lcdNibble@data& (0+255),b
  4336                           
  4337                           ;lcd.c: 43: temp = data & 0xF0;
  4338  001BC0  0100               	movlb	0	; () banked
  4339  001BC2  5181               	movf	lcdNibble@data& (0+255),w,b
  4340  001BC4  0BF0               	andlw	240
  4341  001BC6  0100               	movlb	0	; () banked
  4342  001BC8  6F80               	movwf	lcdNibble@temp& (0+255),b
  4343                           
  4344                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4345  001BCA  508C               	movf	3980,w,c	;volatile
  4346  001BCC  0B0F               	andlw	15
  4347  001BCE  6E8C               	movwf	3980,c	;volatile
  4348                           
  4349                           ;lcd.c: 45: LATD = temp | LATD;
  4350  001BD0  0100               	movlb	0	; () banked
  4351  001BD2  5180               	movf	lcdNibble@temp& (0+255),w,b
  4352  001BD4  108C               	iorwf	3980,w,c	;volatile
  4353  001BD6  6E8C               	movwf	3980,c	;volatile
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4357  001BD8  968C               	bcf	3980,3,c	;volatile
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4361  001BDA  0E10               	movlw	16
  4362  001BDC                     u3137:
  4363  001BDC  2EE8               	decfsz	wreg,f,c
  4364  001BDE  D7FE               	bra	u3137
  4365  001BE0  D000               	nop2	
  4366                           
  4367                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4368  001BE2  868C               	bsf	3980,3,c	;volatile
  4369                           
  4370                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4371  001BE4  0E10               	movlw	16
  4372  001BE6                     u3147:
  4373  001BE6  2EE8               	decfsz	wreg,f,c
  4374  001BE8  D7FE               	bra	u3147
  4375  001BEA  D000               	nop2	
  4376  001BEC  0012               	return		;funcret
  4377  001BEE                     __end_of_lcdNibble:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           intcon2	equ	0xFF1
  4387                           intcon3	equ	0xFF0
  4388                           postinc0	equ	0xFEE
  4389                           wreg	equ	0xFE8
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _I2C_Master_Init *****************
  4398 ;; Defined at:
  4399 ;;		line 13 in file "I2C.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  c               4   13[BANK0 ] const unsigned long 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;		None
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  1    wreg      void 
  4406 ;; Registers used:
  4407 ;;		wreg, status,2, status,0, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4413 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;Total ram usage:        8 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    7
  4420 ;; This function calls:
  4421 ;;		___lldiv
  4422 ;; This function is called by:
  4423 ;;		_initialize
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text22
  4428  001C50                     __ptext22:
  4429                           	opt stack 0
  4430  001C50                     _I2C_Master_Init:
  4431                           	opt stack 22
  4432                           
  4433                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4434                           
  4435                           ;incstack = 0
  4436  001C50  0E00               	movlw	0
  4437  001C52  6EC7               	movwf	4039,c	;volatile
  4438                           
  4439                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4440  001C54  0E28               	movlw	40
  4441  001C56  6EC6               	movwf	4038,c	;volatile
  4442                           
  4443                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4444  001C58  0E00               	movlw	0
  4445  001C5A  6EC5               	movwf	4037,c	;volatile
  4446                           
  4447                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4448  001C5C  0E00               	movlw	0
  4449  001C5E  0100               	movlb	0	; () banked
  4450  001C60  6F80               	movwf	___lldiv@dividend& (0+255),b
  4451  001C62  0E12               	movlw	18
  4452  001C64  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4453  001C66  0E7A               	movlw	122
  4454  001C68  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4455  001C6A  0E00               	movlw	0
  4456  001C6C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4457  001C6E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4458  001C72  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4459  001C76  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4460  001C7A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4461  001C7E  0E02               	movlw	2
  4462  001C80                     u2605:
  4463  001C80  90D8               	bcf	status,0,c
  4464  001C82  0100               	movlb	0	; () banked
  4465  001C84  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4466  001C86  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4467  001C88  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4468  001C8A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4469  001C8C  2EE8               	decfsz	wreg,f,c
  4470  001C8E  D7F8               	goto	u2605
  4471  001C90  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4472  001C94  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4473  001C98  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4474  001C9C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4475  001CA0  ECFC  F009         	call	___lldiv	;wreg free
  4476  001CA4  0100               	movlb	0	; () banked
  4477  001CA6  0580               	decf	?___lldiv& (0+255),w,b
  4478  001CA8  6EC8               	movwf	4040,c	;volatile
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;I2C.c: 19: TRISC3 = 1;
  4482  001CAA  8694               	bsf	3988,3,c	;volatile
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;I2C.c: 20: TRISC4 = 1;
  4486  001CAC  8894               	bsf	3988,4,c	;volatile
  4487                           
  4488                           ; BSR set to: 0
  4489  001CAE  0012               	return		;funcret
  4490  001CB0                     __end_of_I2C_Master_Init:
  4491                           	opt stack 0
  4492                           tblptru	equ	0xFF8
  4493                           tblptrh	equ	0xFF7
  4494                           tblptrl	equ	0xFF6
  4495                           tablat	equ	0xFF5
  4496                           prodh	equ	0xFF4
  4497                           prodl	equ	0xFF3
  4498                           intcon	equ	0xFF2
  4499                           intcon2	equ	0xFF1
  4500                           intcon3	equ	0xFF0
  4501                           postinc0	equ	0xFEE
  4502                           wreg	equ	0xFE8
  4503                           indf2	equ	0xFDF
  4504                           postinc2	equ	0xFDE
  4505                           postdec2	equ	0xFDD
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510 ;; *************** function ___lldiv *****************
  4511 ;; Defined at:
  4512 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  dividend        4    0[BANK0 ] unsigned long 
  4515 ;;  divisor         4    4[BANK0 ] unsigned long 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  quotient        4    8[BANK0 ] unsigned long 
  4518 ;;  counter         1   12[BANK0 ] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  4    0[BANK0 ] unsigned long 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:       13 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    6
  4535 ;; This function calls:
  4536 ;;		Nothing
  4537 ;; This function is called by:
  4538 ;;		_I2C_Master_Init
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text23
  4543  0013F8                     __ptext23:
  4544                           	opt stack 0
  4545  0013F8                     ___lldiv:
  4546                           	opt stack 22
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;incstack = 0
  4550  0013F8  0E00               	movlw	0
  4551  0013FA  0100               	movlb	0	; () banked
  4552  0013FC  6F88               	movwf	___lldiv@quotient& (0+255),b
  4553  0013FE  0E00               	movlw	0
  4554  001400  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4555  001402  0E00               	movlw	0
  4556  001404  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4557  001406  0E00               	movlw	0
  4558  001408  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4559                           
  4560                           ; BSR set to: 0
  4561  00140A  0100               	movlb	0	; () banked
  4562  00140C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4563  00140E  0100               	movlb	0	; () banked
  4564  001410  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4565  001412  0100               	movlb	0	; () banked
  4566  001414  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4567  001416  0100               	movlb	0	; () banked
  4568  001418  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4569  00141A  B4D8               	btfsc	status,2,c
  4570  00141C  D042               	goto	l874
  4571                           
  4572                           ; BSR set to: 0
  4573  00141E  0E01               	movlw	1
  4574  001420  0100               	movlb	0	; () banked
  4575  001422  6F8C               	movwf	___lldiv@counter& (0+255),b
  4576  001424  D008               	goto	l3350
  4577  001426                     l3348:
  4578                           
  4579                           ; BSR set to: 0
  4580  001426  0100               	movlb	0	; () banked
  4581  001428  90D8               	bcf	status,0,c
  4582  00142A  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4583  00142C  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4584  00142E  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4585  001430  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4586  001432  0100               	movlb	0	; () banked
  4587  001434  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4588  001436                     l3350:
  4589                           
  4590                           ; BSR set to: 0
  4591  001436  0100               	movlb	0	; () banked
  4592  001438  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4593  00143A  D7F5               	goto	l3348
  4594  00143C                     l3352:
  4595                           
  4596                           ; BSR set to: 0
  4597  00143C  0100               	movlb	0	; () banked
  4598  00143E  90D8               	bcf	status,0,c
  4599  001440  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4600  001442  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4601  001444  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4602  001446  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4603                           
  4604                           ; BSR set to: 0
  4605  001448  0100               	movlb	0	; () banked
  4606  00144A  5184               	movf	___lldiv@divisor& (0+255),w,b
  4607  00144C  0100               	movlb	0	; () banked
  4608  00144E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4609  001450  0100               	movlb	0	; () banked
  4610  001452  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4611  001454  0100               	movlb	0	; () banked
  4612  001456  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4613  001458  0100               	movlb	0	; () banked
  4614  00145A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4615  00145C  0100               	movlb	0	; () banked
  4616  00145E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4617  001460  0100               	movlb	0	; () banked
  4618  001462  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4619  001464  0100               	movlb	0	; () banked
  4620  001466  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4621  001468  A0D8               	btfss	status,0,c
  4622  00146A  D012               	goto	l3360
  4623                           
  4624                           ; BSR set to: 0
  4625  00146C  0100               	movlb	0	; () banked
  4626  00146E  5184               	movf	___lldiv@divisor& (0+255),w,b
  4627  001470  0100               	movlb	0	; () banked
  4628  001472  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4629  001474  0100               	movlb	0	; () banked
  4630  001476  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4631  001478  0100               	movlb	0	; () banked
  4632  00147A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4633  00147C  0100               	movlb	0	; () banked
  4634  00147E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4635  001480  0100               	movlb	0	; () banked
  4636  001482  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4637  001484  0100               	movlb	0	; () banked
  4638  001486  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4639  001488  0100               	movlb	0	; () banked
  4640  00148A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4641                           
  4642                           ; BSR set to: 0
  4643  00148C  0100               	movlb	0	; () banked
  4644  00148E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4645  001490                     l3360:
  4646                           
  4647                           ; BSR set to: 0
  4648  001490  0100               	movlb	0	; () banked
  4649  001492  90D8               	bcf	status,0,c
  4650  001494  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4651  001496  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4652  001498  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4653  00149A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4654                           
  4655                           ; BSR set to: 0
  4656  00149C  0100               	movlb	0	; () banked
  4657  00149E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4658  0014A0  D7CD               	goto	l3352
  4659  0014A2                     l874:
  4660                           
  4661                           ; BSR set to: 0
  4662  0014A2  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4663  0014A6  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4664  0014AA  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4665  0014AE  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4666                           
  4667                           ; BSR set to: 0
  4668  0014B2  0012               	return		;funcret
  4669  0014B4                     __end_of___lldiv:
  4670                           	opt stack 0
  4671                           tblptru	equ	0xFF8
  4672                           tblptrh	equ	0xFF7
  4673                           tblptrl	equ	0xFF6
  4674                           tablat	equ	0xFF5
  4675                           prodh	equ	0xFF4
  4676                           prodl	equ	0xFF3
  4677                           intcon	equ	0xFF2
  4678                           intcon2	equ	0xFF1
  4679                           intcon3	equ	0xFF0
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           indf2	equ	0xFDF
  4683                           postinc2	equ	0xFDE
  4684                           postdec2	equ	0xFDD
  4685                           fsr2h	equ	0xFDA
  4686                           fsr2l	equ	0xFD9
  4687                           status	equ	0xFD8
  4688                           
  4689 ;; *************** function _intrpt *****************
  4690 ;; Defined at:
  4691 ;;		line 160 in file "main.c"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;		None
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  keypress        1  114[COMRAM] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      void 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;Total ram usage:       17 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    5
  4712 ;; This function calls:
  4713 ;;		_PermLog
  4714 ;;		_simulate
  4715 ;;		_stopMoving
  4716 ;; This function is called by:
  4717 ;;		Interrupt level 2
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	intcode
  4722  000008                     __pintcode:
  4723                           	opt stack 0
  4724  000008                     _intrpt:
  4725                           	opt stack 21
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;incstack = 0
  4729  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4730  00000A  ED11  F008         	call	int_func,f	;refresh shadow registers
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           intcon2	equ	0xFF1
  4739                           intcon3	equ	0xFF0
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749                           	psect	intcode_body
  4750  001022                     __pintcode_body:
  4751                           	opt stack 21
  4752  001022                     int_func:
  4753                           	opt stack 21
  4754  001022  0006               	pop		; remove dummy address from shadow register refresh
  4755  001024  CFFA F065          	movff	pclath,??_intrpt+2
  4756  001028  CFFB F066          	movff	pclatu,??_intrpt+3
  4757  00102C  CFE9 F067          	movff	fsr0l,??_intrpt+4
  4758  001030  CFEA F068          	movff	fsr0h,??_intrpt+5
  4759  001034  CFE1 F069          	movff	fsr1l,??_intrpt+6
  4760  001038  CFE2 F06A          	movff	fsr1h,??_intrpt+7
  4761  00103C  CFD9 F06B          	movff	fsr2l,??_intrpt+8
  4762  001040  CFDA F06C          	movff	fsr2h,??_intrpt+9
  4763  001044  CFF3 F06D          	movff	prodl,??_intrpt+10
  4764  001048  CFF4 F06E          	movff	prodh,??_intrpt+11
  4765  00104C  CFF6 F06F          	movff	tblptrl,??_intrpt+12
  4766  001050  CFF7 F070          	movff	tblptrh,??_intrpt+13
  4767  001054  CFF8 F071          	movff	tblptru,??_intrpt+14
  4768  001058  CFF5 F072          	movff	tablat,??_intrpt+15
  4769                           
  4770                           ;main.c: 166: (INTCONbits.GIE = 0);
  4771  00105C  9EF2               	bcf	intcon,7,c	;volatile
  4772                           
  4773                           ;main.c: 167: if (INT1IF) {
  4774  00105E  A0F0               	btfss	intcon3,0,c	;volatile
  4775  001060  D02C               	goto	i2l136
  4776                           
  4777                           ;main.c: 168: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4778  001062  3881               	swapf	3969,w,c	;volatile
  4779  001064  0B0F               	andlw	15
  4780  001066  0B0F               	andlw	15
  4781  001068  6E73               	movwf	intrpt@keypress,c
  4782                           
  4783                           ;main.c: 169: INT1IF = 0;
  4784  00106A  90F0               	bcf	intcon3,0,c	;volatile
  4785                           
  4786                           ;main.c: 170: switch (mode) {
  4787  00106C  D018               	goto	i2l4236
  4788  00106E                     i2l4218:
  4789                           
  4790                           ;main.c: 172: if (keypress < 4) {
  4791  00106E  0E04               	movlw	4
  4792  001070  6073               	cpfslt	intrpt@keypress,c
  4793  001072  D00C               	goto	i2l4226
  4794                           
  4795                           ;main.c: 173: mode = 2;
  4796  001074  0E00               	movlw	0
  4797  001076  6E75               	movwf	_mode+1,c
  4798  001078  0E02               	movlw	2
  4799  00107A  6E74               	movwf	_mode,c
  4800                           
  4801                           ;main.c: 174: PermLog(keypress);
  4802  00107C  5073               	movf	intrpt@keypress,w,c
  4803  00107E  EC0E  F00D         	call	_PermLog
  4804                           
  4805                           ;main.c: 175: mode = 0;
  4806  001082  0E00               	movlw	0
  4807  001084  6E75               	movwf	_mode+1,c
  4808  001086  0E00               	movlw	0
  4809  001088  6E74               	movwf	_mode,c
  4810                           
  4811                           ;main.c: 176: } else {
  4812  00108A  D015               	goto	i2l143
  4813  00108C                     i2l4226:
  4814                           
  4815                           ;main.c: 177: mode = 1;
  4816  00108C  0E00               	movlw	0
  4817  00108E  6E75               	movwf	_mode+1,c
  4818  001090  0E01               	movlw	1
  4819  001092  6E74               	movwf	_mode,c
  4820                           
  4821                           ;main.c: 178: (INTCONbits.GIE = 1);
  4822  001094  8EF2               	bsf	intcon,7,c	;volatile
  4823                           
  4824                           ;main.c: 179: simulate();
  4825  001096  ECED  F001         	call	_simulate	;wreg free
  4826                           
  4827                           ;main.c: 180: (INTCONbits.GIE = 0);
  4828  00109A  9EF2               	bcf	intcon,7,c	;volatile
  4829                           
  4830                           ;main.c: 185: }
  4831                           
  4832                           ;main.c: 184: break;
  4833                           
  4834                           ;main.c: 183: default:
  4835                           
  4836                           ;main.c: 181: }
  4837                           ;main.c: 182: break;
  4838  00109C  D00C               	goto	i2l143
  4839  00109E                     i2l4236:
  4840  00109E  C074  F063         	movff	_mode,??_intrpt
  4841  0010A2  C075  F064         	movff	_mode+1,??_intrpt+1
  4842                           
  4843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4844                           ; Switch size 1, requested type "space"
  4845                           ; Number of cases is 1, Range of values is 0 to 0
  4846                           ; switch strategies available:
  4847                           ; Name         Instructions Cycles
  4848                           ; simple_byte            4     3 (average)
  4849                           ;	Chosen strategy is simple_byte
  4850  0010A6  5064               	movf	??_intrpt+1,w,c
  4851  0010A8  0A00               	xorlw	0	; case 0
  4852  0010AA  A4D8               	btfss	status,2,c
  4853  0010AC  D004               	goto	i2l143
  4854                           
  4855                           ; Switch size 1, requested type "space"
  4856                           ; Number of cases is 1, Range of values is 0 to 0
  4857                           ; switch strategies available:
  4858                           ; Name         Instructions Cycles
  4859                           ; simple_byte            4     3 (average)
  4860                           ;	Chosen strategy is simple_byte
  4861  0010AE  5063               	movf	??_intrpt,w,c
  4862  0010B0  0A00               	xorlw	0	; case 0
  4863  0010B2  B4D8               	btfsc	status,2,c
  4864  0010B4  D7DC               	goto	i2l4218
  4865  0010B6                     i2l143:
  4866  0010B6  B281               	btfsc	3969,1,c	;volatile
  4867  0010B8  D7FE               	goto	i2l143
  4868  0010BA                     i2l136:
  4869                           
  4870                           ;main.c: 187: }
  4871                           ;main.c: 188: if (INT2IF) {
  4872  0010BA  A2F0               	btfss	intcon3,1,c	;volatile
  4873  0010BC  D018               	goto	i2l146
  4874                           
  4875                           ;main.c: 189: INT2IF = 0;
  4876  0010BE  92F0               	bcf	intcon3,1,c	;volatile
  4877                           
  4878                           ;main.c: 190: switch (mode) {
  4879  0010C0  D008               	goto	i2l4246
  4880  0010C2                     i2l4240:
  4881                           
  4882                           ;main.c: 192: mode = 3;
  4883  0010C2  0E00               	movlw	0
  4884  0010C4  6E75               	movwf	_mode+1,c
  4885  0010C6  0E03               	movlw	3
  4886  0010C8  6E74               	movwf	_mode,c
  4887                           
  4888                           ;main.c: 193: stopMoving(1);
  4889  0010CA  0E01               	movlw	1
  4890  0010CC  EC99  F00F         	call	_stopMoving
  4891                           
  4892                           ;main.c: 197: }
  4893                           
  4894                           ;main.c: 196: break;
  4895                           
  4896                           ;main.c: 195: default:
  4897                           
  4898                           ;main.c: 194: break;
  4899  0010D0  D00C               	goto	i2l151
  4900  0010D2                     i2l4246:
  4901  0010D2  C074  F063         	movff	_mode,??_intrpt
  4902  0010D6  C075  F064         	movff	_mode+1,??_intrpt+1
  4903                           
  4904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4905                           ; Switch size 1, requested type "space"
  4906                           ; Number of cases is 1, Range of values is 0 to 0
  4907                           ; switch strategies available:
  4908                           ; Name         Instructions Cycles
  4909                           ; simple_byte            4     3 (average)
  4910                           ;	Chosen strategy is simple_byte
  4911  0010DA  5064               	movf	??_intrpt+1,w,c
  4912  0010DC  0A00               	xorlw	0	; case 0
  4913  0010DE  A4D8               	btfss	status,2,c
  4914  0010E0  D004               	goto	i2l151
  4915                           
  4916                           ; Switch size 1, requested type "space"
  4917                           ; Number of cases is 1, Range of values is 1 to 1
  4918                           ; switch strategies available:
  4919                           ; Name         Instructions Cycles
  4920                           ; simple_byte            4     3 (average)
  4921                           ;	Chosen strategy is simple_byte
  4922  0010E2  5063               	movf	??_intrpt,w,c
  4923  0010E4  0A01               	xorlw	1	; case 1
  4924  0010E6  B4D8               	btfsc	status,2,c
  4925  0010E8  D7EC               	goto	i2l4240
  4926  0010EA                     i2l151:
  4927  0010EA  B481               	btfsc	3969,2,c	;volatile
  4928  0010EC  D7FE               	goto	i2l151
  4929  0010EE                     i2l146:
  4930                           
  4931                           ;main.c: 199: }
  4932                           ;main.c: 200: (INTCONbits.GIE = 1);
  4933  0010EE  8EF2               	bsf	intcon,7,c	;volatile
  4934  0010F0  C072  FFF5         	movff	??_intrpt+15,tablat
  4935  0010F4  C071  FFF8         	movff	??_intrpt+14,tblptru
  4936  0010F8  C070  FFF7         	movff	??_intrpt+13,tblptrh
  4937  0010FC  C06F  FFF6         	movff	??_intrpt+12,tblptrl
  4938  001100  C06E  FFF4         	movff	??_intrpt+11,prodh
  4939  001104  C06D  FFF3         	movff	??_intrpt+10,prodl
  4940  001108  C06C  FFDA         	movff	??_intrpt+9,fsr2h
  4941  00110C  C06B  FFD9         	movff	??_intrpt+8,fsr2l
  4942  001110  C06A  FFE2         	movff	??_intrpt+7,fsr1h
  4943  001114  C069  FFE1         	movff	??_intrpt+6,fsr1l
  4944  001118  C068  FFEA         	movff	??_intrpt+5,fsr0h
  4945  00111C  C067  FFE9         	movff	??_intrpt+4,fsr0l
  4946  001120  C066  FFFB         	movff	??_intrpt+3,pclatu
  4947  001124  C065  FFFA         	movff	??_intrpt+2,pclath
  4948  001128  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4949  00112A  0011               	retfie		f
  4950  00112C                     __end_of_intrpt:
  4951                           	opt stack 0
  4952                           pclatu	equ	0xFFB
  4953                           pclath	equ	0xFFA
  4954                           tblptru	equ	0xFF8
  4955                           tblptrh	equ	0xFF7
  4956                           tblptrl	equ	0xFF6
  4957                           tablat	equ	0xFF5
  4958                           prodh	equ	0xFF4
  4959                           prodl	equ	0xFF3
  4960                           intcon	equ	0xFF2
  4961                           intcon2	equ	0xFF1
  4962                           intcon3	equ	0xFF0
  4963                           postinc0	equ	0xFEE
  4964                           fsr0h	equ	0xFEA
  4965                           fsr0l	equ	0xFE9
  4966                           wreg	equ	0xFE8
  4967                           fsr1h	equ	0xFE2
  4968                           fsr1l	equ	0xFE1
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           postdec2	equ	0xFDD
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _simulate *****************
  4977 ;; Defined at:
  4978 ;;		line 51 in file "main.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  portCCW         6   72[COMRAM] int [3]
  4983 ;;  portCW          6   66[COMRAM] int [3]
  4984 ;;  sorted          4   92[COMRAM] unsigned char [4]
  4985 ;;  start           4   88[COMRAM] unsigned int [2]
  4986 ;;  now             4   84[COMRAM] unsigned int [2]
  4987 ;;  period          2   96[COMRAM] unsigned int 
  4988 ;;  V9              2   82[COMRAM] int 
  4989 ;;  C               2   80[COMRAM] int 
  4990 ;;  AA              2   78[COMRAM] int 
  4991 ;;  stop            2   62[COMRAM] int 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      void 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:       38 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    4
  5008 ;; This function calls:
  5009 ;;		_CCW90
  5010 ;;		_CW90
  5011 ;;		_HexDecToDec2
  5012 ;;		_WriteRun
  5013 ;;		_check9
  5014 ;;		_checkAA
  5015 ;;		_checkC
  5016 ;;		_showInfo
  5017 ;;		_stopMoving
  5018 ;;		i2___wmul
  5019 ;;		i2_getTime
  5020 ;;		i2_line0
  5021 ;;		i2_line1
  5022 ;;		i2_printf
  5023 ;; This function is called by:
  5024 ;;		_intrpt
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text25
  5029  0003DA                     __ptext25:
  5030                           	opt stack 0
  5031  0003DA                     _simulate:
  5032                           	opt stack 21
  5033                           
  5034                           ;main.c: 52: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5035                           
  5036                           ;incstack = 0
  5037  0003DA  C0C2  F055         	movff	simulate@F3106,simulate@now
  5038  0003DE  C0C3  F056         	movff	simulate@F3106+1,simulate@now+1
  5039  0003E2  C0C4  F057         	movff	simulate@F3106+2,simulate@now+2
  5040  0003E6  C0C5  F058         	movff	simulate@F3106+3,simulate@now+3
  5041  0003EA  C0BE  F059         	movff	simulate@F3108,simulate@start
  5042  0003EE  C0BF  F05A         	movff	simulate@F3108+1,simulate@start+1
  5043  0003F2  C0C0  F05B         	movff	simulate@F3108+2,simulate@start+2
  5044  0003F6  C0C1  F05C         	movff	simulate@F3108+3,simulate@start+3
  5045                           
  5046                           ;main.c: 53: unsigned char sorted[] = {0, 0, 0, 0};
  5047  0003FA  C0BA  F05D         	movff	simulate@F3110,simulate@sorted
  5048  0003FE  C0BB  F05E         	movff	simulate@F3110+1,simulate@sorted+1
  5049  000402  C0BC  F05F         	movff	simulate@F3110+2,simulate@sorted+2
  5050  000406  C0BD  F060         	movff	simulate@F3110+3,simulate@sorted+3
  5051                           
  5052                           ;main.c: 54: unsigned int period = 0;
  5053  00040A  0E00               	movlw	0
  5054  00040C  6E62               	movwf	simulate@period+1,c
  5055  00040E  0E00               	movlw	0
  5056  000410  6E61               	movwf	simulate@period,c
  5057                           
  5058                           ;main.c: 55: int stop = 0;
  5059  000412  0E00               	movlw	0
  5060  000414  6E40               	movwf	simulate@stop+1,c
  5061  000416  0E00               	movlw	0
  5062  000418  6E3F               	movwf	simulate@stop,c
  5063                           
  5064                           ;main.c: 56: int AA, C, V9;
  5065                           ;main.c: 57: line0();
  5066  00041A  EC08  F011         	call	i2_line0	;wreg free
  5067                           
  5068                           ;main.c: 58: printf("Simulating...          ");
  5069  00041E  0EAE               	movlw	low STR_2
  5070  000420  6E0D               	movwf	i2printf@f,c
  5071  000422  0EFE               	movlw	high STR_2
  5072  000424  6E0E               	movwf	i2printf@f+1,c
  5073  000426  EC91  F003         	call	i2_printf	;wreg free
  5074                           
  5075                           ;main.c: 59: start[0] = time[0];
  5076  00042A  C076  F059         	movff	_time,simulate@start
  5077  00042E  6A5A               	clrf	simulate@start+1,c
  5078                           
  5079                           ;main.c: 60: start[1] = time[1];
  5080  000430  C077  F05B         	movff	_time+1,simulate@start+2
  5081  000434  6A5C               	clrf	simulate@start+3,c
  5082                           
  5083                           ;main.c: 61: LATC5 = 1;
  5084  000436  8A8B               	bsf	3979,5,c	;volatile
  5085                           
  5086                           ;main.c: 62: INT2IE = 1;
  5087  000438  88F0               	bsf	intcon3,4,c	;volatile
  5088                           
  5089                           ;main.c: 63: INT2IF = 0;
  5090  00043A  92F0               	bcf	intcon3,1,c	;volatile
  5091                           
  5092                           ;main.c: 64: while (!stop) {
  5093  00043C  D139               	goto	i2l4160
  5094  00043E                     i2l4070:
  5095                           
  5096                           ;main.c: 66: line0();
  5097  00043E  EC08  F011         	call	i2_line0	;wreg free
  5098                           
  5099                           ;main.c: 67: AA = checkAA(sorted);
  5100  000442  0E5D               	movlw	low simulate@sorted
  5101  000444  6E3B               	movwf	checkAA@sorted,c
  5102  000446  0E00               	movlw	high simulate@sorted
  5103  000448  6E3C               	movwf	checkAA@sorted+1,c
  5104  00044A  EC0E  F00B         	call	_checkAA	;wreg free
  5105  00044E  C03B  F04F         	movff	?_checkAA,simulate@AA
  5106  000452  C03C  F050         	movff	?_checkAA+1,simulate@AA+1
  5107                           
  5108                           ;main.c: 69: C = checkC(sorted);
  5109  000456  0E5D               	movlw	low simulate@sorted
  5110  000458  6E3B               	movwf	checkC@sorted,c
  5111  00045A  0E00               	movlw	high simulate@sorted
  5112  00045C  6E3C               	movwf	checkC@sorted+1,c
  5113  00045E  EC5A  F00A         	call	_checkC	;wreg free
  5114  000462  C03B  F051         	movff	?_checkC,simulate@C
  5115  000466  C03C  F052         	movff	?_checkC+1,simulate@C+1
  5116                           
  5117                           ;main.c: 71: V9 = check9(sorted);
  5118  00046A  0E5D               	movlw	low simulate@sorted
  5119  00046C  6E3B               	movwf	check9@sorted,c
  5120  00046E  0E00               	movlw	high simulate@sorted
  5121  000470  6E3C               	movwf	check9@sorted+1,c
  5122  000472  ECB4  F00A         	call	_check9	;wreg free
  5123  000476  C03B  F053         	movff	?_check9,simulate@V9
  5124  00047A  C03C  F054         	movff	?_check9+1,simulate@V9+1
  5125                           
  5126                           ;main.c: 72: printf("    ");
  5127  00047E  0ECF               	movlw	low (STR_29+11)
  5128  000480  6E0D               	movwf	i2printf@f,c
  5129  000482  0EFF               	movlw	high (STR_29+11)
  5130  000484  6E0E               	movwf	i2printf@f+1,c
  5131  000486  EC91  F003         	call	i2_printf	;wreg free
  5132                           
  5133                           ;main.c: 75: int portCW[] = {0, 0, 0};
  5134  00048A  EE20  F0B0         	lfsr	2,simulate@F3117
  5135  00048E  EE10  F043         	lfsr	1,simulate@portCW
  5136  000492  0E05               	movlw	5
  5137  000494                     i2u291_41:
  5138  000494  CFDB FFE3          	movff	plusw2,plusw1
  5139  000498  06E8               	decf	wreg,f,c
  5140  00049A  E2FC               	bc	i2u291_41
  5141                           
  5142                           ;main.c: 76: int portCCW[] = {0, 0, 0};
  5143  00049C  EE20  F0AA         	lfsr	2,simulate@F3119
  5144  0004A0  EE10  F049         	lfsr	1,simulate@portCCW
  5145  0004A4  0E05               	movlw	5
  5146  0004A6                     i2u292_41:
  5147  0004A6  CFDB FFE3          	movff	plusw2,plusw1
  5148  0004AA  06E8               	decf	wreg,f,c
  5149  0004AC  E2FC               	bc	i2u292_41
  5150                           
  5151                           ;main.c: 78: line1();
  5152  0004AE  EC04  F011         	call	i2_line1	;wreg free
  5153                           
  5154                           ;main.c: 79: printf("AA:");
  5155  0004B2  0EEE               	movlw	low STR_4
  5156  0004B4  6E0D               	movwf	i2printf@f,c
  5157  0004B6  0EFF               	movlw	high STR_4
  5158  0004B8  6E0E               	movwf	i2printf@f+1,c
  5159  0004BA  EC91  F003         	call	i2_printf	;wreg free
  5160                           
  5161                           ;main.c: 80: if (!AA) {
  5162  0004BE  504F               	movf	simulate@AA,w,c
  5163  0004C0  1050               	iorwf	simulate@AA+1,w,c
  5164  0004C2  A4D8               	btfss	status,2,c
  5165  0004C4  D00B               	goto	i2l4092
  5166                           
  5167                           ;main.c: 81: portCCW[0] = 1;
  5168  0004C6  0E00               	movlw	0
  5169  0004C8  6E4A               	movwf	simulate@portCCW+1,c
  5170  0004CA  0E01               	movlw	1
  5171  0004CC  6E49               	movwf	simulate@portCCW,c
  5172                           
  5173                           ;main.c: 82: printf(" -");
  5174  0004CE  0EF9               	movlw	low STR_5
  5175  0004D0  6E0D               	movwf	i2printf@f,c
  5176  0004D2  0EFF               	movlw	high STR_5
  5177  0004D4  6E0E               	movwf	i2printf@f+1,c
  5178  0004D6  EC91  F003         	call	i2_printf	;wreg free
  5179                           
  5180                           ;main.c: 83: } else if (AA == 1) {
  5181  0004DA  D015               	goto	i2l116
  5182  0004DC                     i2l4092:
  5183  0004DC  044F               	decf	simulate@AA,w,c
  5184  0004DE  1050               	iorwf	simulate@AA+1,w,c
  5185  0004E0  A4D8               	btfss	status,2,c
  5186  0004E2  D00B               	goto	i2l4098
  5187                           
  5188                           ;main.c: 84: portCW[0] = 1;
  5189  0004E4  0E00               	movlw	0
  5190  0004E6  6E44               	movwf	simulate@portCW+1,c
  5191  0004E8  0E01               	movlw	1
  5192  0004EA  6E43               	movwf	simulate@portCW,c
  5193                           
  5194                           ;main.c: 85: printf(" +");
  5195  0004EC  0EF6               	movlw	low STR_6
  5196  0004EE  6E0D               	movwf	i2printf@f,c
  5197  0004F0  0EFF               	movlw	high STR_6
  5198  0004F2  6E0E               	movwf	i2printf@f+1,c
  5199  0004F4  EC91  F003         	call	i2_printf	;wreg free
  5200                           
  5201                           ;main.c: 86: } else {
  5202  0004F8  D006               	goto	i2l116
  5203  0004FA                     i2l4098:
  5204                           
  5205                           ;main.c: 87: printf(" 0");
  5206  0004FA  0EFC               	movlw	low STR_7
  5207  0004FC  6E0D               	movwf	i2printf@f,c
  5208  0004FE  0EFF               	movlw	high STR_7
  5209  000500  6E0E               	movwf	i2printf@f+1,c
  5210  000502  EC91  F003         	call	i2_printf	;wreg free
  5211  000506                     i2l116:
  5212                           
  5213                           ;main.c: 88: }
  5214                           ;main.c: 90: printf(" C:");
  5215  000506  0EF2               	movlw	low STR_8
  5216  000508  6E0D               	movwf	i2printf@f,c
  5217  00050A  0EFF               	movlw	high STR_8
  5218  00050C  6E0E               	movwf	i2printf@f+1,c
  5219  00050E  EC91  F003         	call	i2_printf	;wreg free
  5220                           
  5221                           ;main.c: 92: if (!C) {
  5222  000512  5051               	movf	simulate@C,w,c
  5223  000514  1052               	iorwf	simulate@C+1,w,c
  5224  000516  A4D8               	btfss	status,2,c
  5225  000518  D00B               	goto	i2l4106
  5226                           
  5227                           ;main.c: 93: portCCW[1] = 1;
  5228  00051A  0E00               	movlw	0
  5229  00051C  6E4C               	movwf	simulate@portCCW+3,c
  5230  00051E  0E01               	movlw	1
  5231  000520  6E4B               	movwf	simulate@portCCW+2,c
  5232                           
  5233                           ;main.c: 94: printf(" -");
  5234  000522  0EF9               	movlw	low STR_5
  5235  000524  6E0D               	movwf	i2printf@f,c
  5236  000526  0EFF               	movlw	high STR_5
  5237  000528  6E0E               	movwf	i2printf@f+1,c
  5238  00052A  EC91  F003         	call	i2_printf	;wreg free
  5239                           
  5240                           ;main.c: 95: } else if (C == 1) {
  5241  00052E  D015               	goto	i2l120
  5242  000530                     i2l4106:
  5243  000530  0451               	decf	simulate@C,w,c
  5244  000532  1052               	iorwf	simulate@C+1,w,c
  5245  000534  A4D8               	btfss	status,2,c
  5246  000536  D00B               	goto	i2l4112
  5247                           
  5248                           ;main.c: 96: portCW[1] = 1;
  5249  000538  0E00               	movlw	0
  5250  00053A  6E46               	movwf	simulate@portCW+3,c
  5251  00053C  0E01               	movlw	1
  5252  00053E  6E45               	movwf	simulate@portCW+2,c
  5253                           
  5254                           ;main.c: 97: printf(" +");
  5255  000540  0EF6               	movlw	low STR_6
  5256  000542  6E0D               	movwf	i2printf@f,c
  5257  000544  0EFF               	movlw	high STR_6
  5258  000546  6E0E               	movwf	i2printf@f+1,c
  5259  000548  EC91  F003         	call	i2_printf	;wreg free
  5260                           
  5261                           ;main.c: 98: } else {
  5262  00054C  D006               	goto	i2l120
  5263  00054E                     i2l4112:
  5264                           
  5265                           ;main.c: 99: printf(" 0");
  5266  00054E  0EFC               	movlw	low STR_7
  5267  000550  6E0D               	movwf	i2printf@f,c
  5268  000552  0EFF               	movlw	high STR_7
  5269  000554  6E0E               	movwf	i2printf@f+1,c
  5270  000556  EC91  F003         	call	i2_printf	;wreg free
  5271  00055A                     i2l120:
  5272                           
  5273                           ;main.c: 100: }
  5274                           ;main.c: 102: printf(" 9V:");
  5275  00055A  0EDD               	movlw	low STR_12
  5276  00055C  6E0D               	movwf	i2printf@f,c
  5277  00055E  0EFF               	movlw	high STR_12
  5278  000560  6E0E               	movwf	i2printf@f+1,c
  5279  000562  EC91  F003         	call	i2_printf	;wreg free
  5280                           
  5281                           ;main.c: 104: if (!V9) {
  5282  000566  5053               	movf	simulate@V9,w,c
  5283  000568  1054               	iorwf	simulate@V9+1,w,c
  5284  00056A  A4D8               	btfss	status,2,c
  5285  00056C  D00B               	goto	i2l4120
  5286                           
  5287                           ;main.c: 105: portCCW[2] = 1;
  5288  00056E  0E00               	movlw	0
  5289  000570  6E4E               	movwf	simulate@portCCW+5,c
  5290  000572  0E01               	movlw	1
  5291  000574  6E4D               	movwf	simulate@portCCW+4,c
  5292                           
  5293                           ;main.c: 106: printf(" -");
  5294  000576  0EF9               	movlw	low STR_5
  5295  000578  6E0D               	movwf	i2printf@f,c
  5296  00057A  0EFF               	movlw	high STR_5
  5297  00057C  6E0E               	movwf	i2printf@f+1,c
  5298  00057E  EC91  F003         	call	i2_printf	;wreg free
  5299                           
  5300                           ;main.c: 108: } else if (V9 == 1) {
  5301  000582  D015               	goto	i2l4128
  5302  000584                     i2l4120:
  5303  000584  0453               	decf	simulate@V9,w,c
  5304  000586  1054               	iorwf	simulate@V9+1,w,c
  5305  000588  A4D8               	btfss	status,2,c
  5306  00058A  D00B               	goto	i2l4126
  5307                           
  5308                           ;main.c: 109: portCW[2] = 1;
  5309  00058C  0E00               	movlw	0
  5310  00058E  6E48               	movwf	simulate@portCW+5,c
  5311  000590  0E01               	movlw	1
  5312  000592  6E47               	movwf	simulate@portCW+4,c
  5313                           
  5314                           ;main.c: 110: printf(" +");
  5315  000594  0EF6               	movlw	low STR_6
  5316  000596  6E0D               	movwf	i2printf@f,c
  5317  000598  0EFF               	movlw	high STR_6
  5318  00059A  6E0E               	movwf	i2printf@f+1,c
  5319  00059C  EC91  F003         	call	i2_printf	;wreg free
  5320                           
  5321                           ;main.c: 111: } else {
  5322  0005A0  D006               	goto	i2l4128
  5323  0005A2                     i2l4126:
  5324                           
  5325                           ;main.c: 112: printf(" 0");
  5326  0005A2  0EFC               	movlw	low STR_7
  5327  0005A4  6E0D               	movwf	i2printf@f,c
  5328  0005A6  0EFF               	movlw	high STR_7
  5329  0005A8  6E0E               	movwf	i2printf@f+1,c
  5330  0005AA  EC91  F003         	call	i2_printf	;wreg free
  5331  0005AE                     i2l4128:
  5332                           
  5333                           ;main.c: 113: }
  5334                           ;main.c: 116: CCW90(portCCW);
  5335  0005AE  0E49               	movlw	low simulate@portCCW
  5336  0005B0  6E16               	movwf	CCW90@port,c
  5337  0005B2  0E00               	movlw	high simulate@portCCW
  5338  0005B4  6E17               	movwf	CCW90@port+1,c
  5339  0005B6  EC61  F010         	call	_CCW90	;wreg free
  5340                           
  5341                           ;main.c: 117: CW90(portCW);
  5342  0005BA  0E43               	movlw	low simulate@portCW
  5343  0005BC  6E16               	movwf	CW90@port,c
  5344  0005BE  0E00               	movlw	high simulate@portCW
  5345  0005C0  6E17               	movwf	CW90@port+1,c
  5346  0005C2  EC52  F010         	call	_CW90	;wreg free
  5347                           
  5348                           ;main.c: 118: LATC0 = 0;
  5349  0005C6  908B               	bcf	3979,0,c	;volatile
  5350                           
  5351                           ;main.c: 119: LATC1 = 0;
  5352  0005C8  928B               	bcf	3979,1,c	;volatile
  5353                           
  5354                           ;main.c: 120: LATC2 = 0;
  5355  0005CA  948B               	bcf	3979,2,c	;volatile
  5356                           
  5357                           ;main.c: 125: }
  5358                           ;main.c: 126: getTime(time);
  5359  0005CC  0E76               	movlw	low _time
  5360  0005CE  6E04               	movwf	i2getTime@time,c
  5361  0005D0  0E00               	movlw	high _time
  5362  0005D2  6E05               	movwf	i2getTime@time+1,c
  5363  0005D4  EC88  F00D         	call	i2_getTime	;wreg free
  5364                           
  5365                           ;main.c: 127: now[0] = time[0];
  5366  0005D8  C076  F055         	movff	_time,simulate@now
  5367  0005DC  6A56               	clrf	simulate@now+1,c
  5368                           
  5369                           ;main.c: 128: now[1] = time[1];
  5370  0005DE  C077  F057         	movff	_time+1,simulate@now+2
  5371  0005E2  6A58               	clrf	simulate@now+3,c
  5372                           
  5373                           ;main.c: 129: line0();
  5374  0005E4  EC08  F011         	call	i2_line0	;wreg free
  5375                           
  5376                           ;main.c: 130: printf("%02x:%02x to %02x:%02x  ", start[1], start[0], now[1], now[0]);
  5377  0005E8  0E4D               	movlw	low STR_16
  5378  0005EA  6E0D               	movwf	i2printf@f,c
  5379  0005EC  0EFE               	movlw	high STR_16
  5380  0005EE  6E0E               	movwf	i2printf@f+1,c
  5381  0005F0  C05B  F00F         	movff	simulate@start+2,?i2_printf+2
  5382  0005F4  C05C  F010         	movff	simulate@start+3,?i2_printf+3
  5383  0005F8  C059  F011         	movff	simulate@start,?i2_printf+4
  5384  0005FC  C05A  F012         	movff	simulate@start+1,?i2_printf+5
  5385  000600  C057  F013         	movff	simulate@now+2,?i2_printf+6
  5386  000604  C058  F014         	movff	simulate@now+3,?i2_printf+7
  5387  000608  C055  F015         	movff	simulate@now,?i2_printf+8
  5388  00060C  C056  F016         	movff	simulate@now+1,?i2_printf+9
  5389  000610  EC91  F003         	call	i2_printf	;wreg free
  5390                           
  5391                           ;main.c: 131: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5392  000614  C057  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5393  000618  C058  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5394  00061C  ECFA  F00E         	call	_HexDecToDec2	;wreg free
  5395  000620  C007  F03D         	movff	?_HexDecToDec2,??_simulate
  5396  000624  C008  F03E         	movff	?_HexDecToDec2+1,??_simulate+1
  5397  000628  C05B  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5398  00062C  C05C  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5399  000630  ECFA  F00E         	call	_HexDecToDec2	;wreg free
  5400  000634  1E07               	comf	?_HexDecToDec2,f,c
  5401  000636  1E08               	comf	?_HexDecToDec2+1,f,c
  5402  000638  4A07               	infsnz	?_HexDecToDec2,f,c
  5403  00063A  2A08               	incf	?_HexDecToDec2+1,f,c
  5404  00063C  5007               	movf	?_HexDecToDec2,w,c
  5405  00063E  243D               	addwf	??_simulate,w,c
  5406  000640  6E41               	movwf	_simulate$1505,c
  5407  000642  5008               	movf	?_HexDecToDec2+1,w,c
  5408  000644  203E               	addwfc	??_simulate+1,w,c
  5409  000646  6E42               	movwf	_simulate$1505+1,c
  5410                           
  5411                           ;main.c: 131: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5412  000648  C041  F001         	movff	_simulate$1505,i2___wmul@multiplier
  5413  00064C  C042  F002         	movff	_simulate$1505+1,i2___wmul@multiplier+1
  5414  000650  0E00               	movlw	0
  5415  000652  6E04               	movwf	i2___wmul@multiplicand+1,c
  5416  000654  0E3C               	movlw	60
  5417  000656  6E03               	movwf	i2___wmul@multiplicand,c
  5418  000658  EC2E  F010         	call	i2___wmul	;wreg free
  5419  00065C  C001  F03D         	movff	?i2___wmul,??_simulate
  5420  000660  C002  F03E         	movff	?i2___wmul+1,??_simulate+1
  5421  000664  C055  F007         	movff	simulate@now,HexDecToDec2@hex
  5422  000668  C056  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5423  00066C  ECFA  F00E         	call	_HexDecToDec2	;wreg free
  5424  000670  5007               	movf	?_HexDecToDec2,w,c
  5425  000672  263D               	addwf	??_simulate,f,c
  5426  000674  5008               	movf	?_HexDecToDec2+1,w,c
  5427  000676  223E               	addwfc	??_simulate+1,f,c
  5428  000678  C059  F007         	movff	simulate@start,HexDecToDec2@hex
  5429  00067C  C05A  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5430  000680  ECFA  F00E         	call	_HexDecToDec2	;wreg free
  5431  000684  1E07               	comf	?_HexDecToDec2,f,c
  5432  000686  1E08               	comf	?_HexDecToDec2+1,f,c
  5433  000688  4A07               	infsnz	?_HexDecToDec2,f,c
  5434  00068A  2A08               	incf	?_HexDecToDec2+1,f,c
  5435  00068C  5007               	movf	?_HexDecToDec2,w,c
  5436  00068E  243D               	addwf	??_simulate,w,c
  5437  000690  6E61               	movwf	simulate@period,c
  5438  000692  5008               	movf	?_HexDecToDec2+1,w,c
  5439  000694  203E               	addwfc	??_simulate+1,w,c
  5440  000696  6E62               	movwf	simulate@period+1,c
  5441                           
  5442                           ;main.c: 132: line1();
  5443  000698  EC04  F011         	call	i2_line1	;wreg free
  5444                           
  5445                           ;main.c: 133: printf("Period: %u        ", period);
  5446  00069C  0E6C               	movlw	low STR_17
  5447  00069E  6E0D               	movwf	i2printf@f,c
  5448  0006A0  0EFF               	movlw	high STR_17
  5449  0006A2  6E0E               	movwf	i2printf@f+1,c
  5450  0006A4  C061  F00F         	movff	simulate@period,?i2_printf+2
  5451  0006A8  C062  F010         	movff	simulate@period+1,?i2_printf+3
  5452  0006AC  EC91  F003         	call	i2_printf	;wreg free
  5453  0006B0                     i2l4160:
  5454  0006B0  503F               	movf	simulate@stop,w,c
  5455  0006B2  1040               	iorwf	simulate@stop+1,w,c
  5456  0006B4  B4D8               	btfsc	status,2,c
  5457  0006B6  D6C3               	goto	i2l4070
  5458                           
  5459                           ;main.c: 136: }
  5460                           ;main.c: 138: }
  5461                           ;main.c: 140: mode = 2;
  5462  0006B8  0E00               	movlw	0
  5463  0006BA  6E75               	movwf	_mode+1,c
  5464  0006BC  0E02               	movlw	2
  5465  0006BE  6E74               	movwf	_mode,c
  5466                           
  5467                           ;main.c: 141: INT2IE = 0;
  5468  0006C0  98F0               	bcf	intcon3,4,c	;volatile
  5469                           
  5470                           ;main.c: 142: stopMoving(0);
  5471  0006C2  0E00               	movlw	0
  5472  0006C4  EC99  F00F         	call	_stopMoving
  5473                           
  5474                           ;main.c: 143: line1();
  5475  0006C8  EC04  F011         	call	i2_line1	;wreg free
  5476                           
  5477                           ;main.c: 144: printf("Sorting Complete          ");
  5478  0006CC  0EE7               	movlw	low STR_18
  5479  0006CE  6E0D               	movwf	i2printf@f,c
  5480  0006D0  0EFD               	movlw	high STR_18
  5481  0006D2  6E0E               	movwf	i2printf@f+1,c
  5482  0006D4  EC91  F003         	call	i2_printf	;wreg free
  5483                           
  5484                           ;main.c: 145: WriteRun(sorted, period);
  5485  0006D8  0E5D               	movlw	low simulate@sorted
  5486  0006DA  6E07               	movwf	WriteRun@sorted,c
  5487  0006DC  0E00               	movlw	high simulate@sorted
  5488  0006DE  6E08               	movwf	WriteRun@sorted+1,c
  5489  0006E0  C061  F009         	movff	simulate@period,WriteRun@time
  5490  0006E4  C062  F00A         	movff	simulate@period+1,WriteRun@time+1
  5491  0006E8  EC22  F006         	call	_WriteRun	;wreg free
  5492                           
  5493                           ;main.c: 146: _delay((unsigned long)((700)*(8000000/4000.0)));
  5494  0006EC  0E08               	movlw	8
  5495  0006EE  6E3E               	movwf	(??_simulate+1)& (0+255),c
  5496  0006F0  0E1B               	movlw	27
  5497  0006F2  6E3D               	movwf	??_simulate& (0+255),c
  5498  0006F4  0E27               	movlw	39
  5499  0006F6                     i2u315_47:
  5500  0006F6  2EE8               	decfsz	wreg,f,c
  5501  0006F8  D7FE               	bra	i2u315_47
  5502  0006FA  2E3D               	decfsz	??_simulate& (0+255),f,c
  5503  0006FC  D7FC               	bra	i2u315_47
  5504  0006FE  2E3E               	decfsz	(??_simulate+1)& (0+255),f,c
  5505  000700  D7FA               	bra	i2u315_47
  5506  000702  F000               	nop	
  5507                           
  5508                           ;main.c: 147: showInfo(period, sorted);
  5509  000704  C061  F029         	movff	simulate@period,showInfo@time
  5510  000708  C062  F02A         	movff	simulate@period+1,showInfo@time+1
  5511  00070C  0E5D               	movlw	low simulate@sorted
  5512  00070E  6E2B               	movwf	showInfo@sorted,c
  5513  000710  0E00               	movlw	high simulate@sorted
  5514  000712  6E2C               	movwf	showInfo@sorted+1,c
  5515  000714  EC18  F005         	call	_showInfo	;wreg free
  5516                           
  5517                           ;main.c: 148: mode = 0;
  5518  000718  0E00               	movlw	0
  5519  00071A  6E75               	movwf	_mode+1,c
  5520  00071C  0E00               	movlw	0
  5521  00071E  6E74               	movwf	_mode,c
  5522  000720  0012               	return		;funcret
  5523  000722                     __end_of_simulate:
  5524                           	opt stack 0
  5525                           pclatu	equ	0xFFB
  5526                           pclath	equ	0xFFA
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           intcon2	equ	0xFF1
  5535                           intcon3	equ	0xFF0
  5536                           postinc0	equ	0xFEE
  5537                           fsr0h	equ	0xFEA
  5538                           fsr0l	equ	0xFE9
  5539                           wreg	equ	0xFE8
  5540                           plusw1	equ	0xFE3
  5541                           fsr1h	equ	0xFE2
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           postdec2	equ	0xFDD
  5546                           plusw2	equ	0xFDB
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function i2_getTime *****************
  5552 ;; Defined at:
  5553 ;;		line 77 in file "modules.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  time            2    3[COMRAM] PTR unsigned char 
  5556 ;;		 -> time(7), 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  getTime         1    5[COMRAM] unsigned char 
  5559 ;; Return value:  Size  Location     Type
  5560 ;;                  1    wreg      void 
  5561 ;; Registers used:
  5562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5563 ;; Tracked objects:
  5564 ;;		On entry : 0/0
  5565 ;;		On exit  : 0/0
  5566 ;;		Unchanged: 0/0
  5567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5568 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;Total ram usage:        3 bytes
  5573 ;; Hardware stack levels used:    1
  5574 ;; Hardware stack levels required when called:    2
  5575 ;; This function calls:
  5576 ;;		i2_I2C_Master_Read
  5577 ;;		i2_I2C_Master_Start
  5578 ;;		i2_I2C_Master_Stop
  5579 ;;		i2_I2C_Master_Write
  5580 ;; This function is called by:
  5581 ;;		_simulate
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text26
  5586  001B10                     __ptext26:
  5587                           	opt stack 0
  5588  001B10                     i2_getTime:
  5589                           	opt stack 22
  5590                           
  5591                           ;modules.c: 78: (INTCONbits.GIE = 0);
  5592                           
  5593                           ;incstack = 0
  5594  001B10  9EF2               	bcf	intcon,7,c	;volatile
  5595                           
  5596                           ;modules.c: 82: I2C_Master_Start();
  5597  001B12  EC00  F011         	call	i2_I2C_Master_Start	;wreg free
  5598                           
  5599                           ;modules.c: 83: I2C_Master_Write(0b11010000);
  5600  001B16  0E00               	movlw	0
  5601  001B18  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5602  001B1A  0ED0               	movlw	208
  5603  001B1C  6E02               	movwf	i2I2C_Master_Write@d,c
  5604  001B1E  ECE7  F010         	call	i2_I2C_Master_Write	;wreg free
  5605                           
  5606                           ;modules.c: 84: I2C_Master_Write(0x00);
  5607  001B22  0E00               	movlw	0
  5608  001B24  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5609  001B26  0E00               	movlw	0
  5610  001B28  6E02               	movwf	i2I2C_Master_Write@d,c
  5611  001B2A  ECE7  F010         	call	i2_I2C_Master_Write	;wreg free
  5612                           
  5613                           ;modules.c: 85: I2C_Master_Stop();
  5614  001B2E  ECFC  F010         	call	i2_I2C_Master_Stop	;wreg free
  5615                           
  5616                           ;modules.c: 88: I2C_Master_Start();
  5617  001B32  EC00  F011         	call	i2_I2C_Master_Start	;wreg free
  5618                           
  5619                           ;modules.c: 89: I2C_Master_Write(0b11010001);
  5620  001B36  0E00               	movlw	0
  5621  001B38  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5622  001B3A  0ED1               	movlw	209
  5623  001B3C  6E02               	movwf	i2I2C_Master_Write@d,c
  5624  001B3E  ECE7  F010         	call	i2_I2C_Master_Write	;wreg free
  5625                           
  5626                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
  5627  001B42  0E00               	movlw	0
  5628  001B44  6E06               	movwf	i2getTime@i,c
  5629  001B46                     i2l4016:
  5630  001B46  0E05               	movlw	5
  5631  001B48  6406               	cpfsgt	i2getTime@i,c
  5632  001B4A  D001               	goto	i2l4020
  5633  001B4C  D00E               	goto	i2l4026
  5634  001B4E                     i2l4020:
  5635                           
  5636                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
  5637  001B4E  5006               	movf	i2getTime@i,w,c
  5638  001B50  0D01               	mullw	1
  5639  001B52  50F3               	movf	prodl,w,c
  5640  001B54  2404               	addwf	i2getTime@time,w,c
  5641  001B56  6ED9               	movwf	fsr2l,c
  5642  001B58  50F4               	movf	prodh,w,c
  5643  001B5A  2005               	addwfc	i2getTime@time+1,w,c
  5644  001B5C  6EDA               	movwf	fsr2h,c
  5645  001B5E  0E01               	movlw	1
  5646  001B60  EC08  F010         	call	i2_I2C_Master_Read
  5647  001B64  6EDF               	movwf	indf2,c
  5648  001B66  2A06               	incf	i2getTime@i,f,c
  5649  001B68  D7EE               	goto	i2l4016
  5650  001B6A                     i2l4026:
  5651                           
  5652                           ;modules.c: 92: }
  5653                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
  5654  001B6A  EE20 F006          	lfsr	2,6
  5655  001B6E  5004               	movf	i2getTime@time,w,c
  5656  001B70  26D9               	addwf	fsr2l,f,c
  5657  001B72  5005               	movf	i2getTime@time+1,w,c
  5658  001B74  22DA               	addwfc	fsr2h,f,c
  5659  001B76  0E00               	movlw	0
  5660  001B78  EC08  F010         	call	i2_I2C_Master_Read
  5661  001B7C  6EDF               	movwf	indf2,c
  5662                           
  5663                           ;modules.c: 94: I2C_Master_Stop();
  5664  001B7E  ECFC  F010         	call	i2_I2C_Master_Stop	;wreg free
  5665                           
  5666                           ;modules.c: 95: (INTCONbits.GIE = 1);
  5667  001B82  8EF2               	bsf	intcon,7,c	;volatile
  5668  001B84  0012               	return		;funcret
  5669  001B86                     __end_ofi2_getTime:
  5670                           	opt stack 0
  5671                           pclatu	equ	0xFFB
  5672                           pclath	equ	0xFFA
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           intcon2	equ	0xFF1
  5681                           intcon3	equ	0xFF0
  5682                           postinc0	equ	0xFEE
  5683                           fsr0h	equ	0xFEA
  5684                           fsr0l	equ	0xFE9
  5685                           wreg	equ	0xFE8
  5686                           plusw1	equ	0xFE3
  5687                           fsr1h	equ	0xFE2
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           plusw2	equ	0xFDB
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function i2_I2C_Master_Write *****************
  5698 ;; Defined at:
  5699 ;;		line 42 in file "I2C.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;  d               2    1[COMRAM] unsigned int 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;Total ram usage:        2 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    1
  5720 ;; This function calls:
  5721 ;;		i2_I2C_Master_Wait
  5722 ;; This function is called by:
  5723 ;;		i2_getTime
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text27
  5728  0021CE                     __ptext27:
  5729                           	opt stack 0
  5730  0021CE                     i2_I2C_Master_Write:
  5731                           	opt stack 22
  5732                           
  5733                           ;I2C.c: 43: I2C_Master_Wait();
  5734                           
  5735                           ;incstack = 0
  5736  0021CE  ECBD  F010         	call	i2_I2C_Master_Wait	;wreg free
  5737                           
  5738                           ;I2C.c: 44: SSPBUF = d;
  5739  0021D2  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  5740  0021D6  0012               	return		;funcret
  5741  0021D8                     __end_ofi2_I2C_Master_Write:
  5742                           	opt stack 0
  5743                           pclatu	equ	0xFFB
  5744                           pclath	equ	0xFFA
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           intcon2	equ	0xFF1
  5753                           intcon3	equ	0xFF0
  5754                           postinc0	equ	0xFEE
  5755                           fsr0h	equ	0xFEA
  5756                           fsr0l	equ	0xFE9
  5757                           wreg	equ	0xFE8
  5758                           plusw1	equ	0xFE3
  5759                           fsr1h	equ	0xFE2
  5760                           fsr1l	equ	0xFE1
  5761                           indf2	equ	0xFDF
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           plusw2	equ	0xFDB
  5765                           fsr2h	equ	0xFDA
  5766                           fsr2l	equ	0xFD9
  5767                           status	equ	0xFD8
  5768                           
  5769 ;; *************** function i2_I2C_Master_Stop *****************
  5770 ;; Defined at:
  5771 ;;		line 37 in file "I2C.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;		None
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0, cstack
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;Total ram usage:        0 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    1
  5792 ;; This function calls:
  5793 ;;		i2_I2C_Master_Wait
  5794 ;; This function is called by:
  5795 ;;		i2_getTime
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text28
  5800  0021F8                     __ptext28:
  5801                           	opt stack 0
  5802  0021F8                     i2_I2C_Master_Stop:
  5803                           	opt stack 22
  5804                           
  5805                           ;I2C.c: 38: I2C_Master_Wait();
  5806                           
  5807                           ;incstack = 0
  5808  0021F8  ECBD  F010         	call	i2_I2C_Master_Wait	;wreg free
  5809                           
  5810                           ;I2C.c: 39: PEN = 1;
  5811  0021FC  84C5               	bsf	4037,2,c	;volatile
  5812  0021FE  0012               	return		;funcret
  5813  002200                     __end_ofi2_I2C_Master_Stop:
  5814                           	opt stack 0
  5815                           pclatu	equ	0xFFB
  5816                           pclath	equ	0xFFA
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           intcon	equ	0xFF2
  5824                           intcon2	equ	0xFF1
  5825                           intcon3	equ	0xFF0
  5826                           postinc0	equ	0xFEE
  5827                           fsr0h	equ	0xFEA
  5828                           fsr0l	equ	0xFE9
  5829                           wreg	equ	0xFE8
  5830                           plusw1	equ	0xFE3
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           plusw2	equ	0xFDB
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function i2_I2C_Master_Start *****************
  5842 ;; Defined at:
  5843 ;;		line 27 in file "I2C.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      void 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;Total ram usage:        0 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    1
  5864 ;; This function calls:
  5865 ;;		i2_I2C_Master_Wait
  5866 ;; This function is called by:
  5867 ;;		i2_getTime
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text29
  5872  002200                     __ptext29:
  5873                           	opt stack 0
  5874  002200                     i2_I2C_Master_Start:
  5875                           	opt stack 22
  5876                           
  5877                           ;I2C.c: 28: I2C_Master_Wait();
  5878                           
  5879                           ;incstack = 0
  5880  002200  ECBD  F010         	call	i2_I2C_Master_Wait	;wreg free
  5881                           
  5882                           ;I2C.c: 29: SEN = 1;
  5883  002204  80C5               	bsf	4037,0,c	;volatile
  5884  002206  0012               	return		;funcret
  5885  002208                     __end_ofi2_I2C_Master_Start:
  5886                           	opt stack 0
  5887                           pclatu	equ	0xFFB
  5888                           pclath	equ	0xFFA
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon2	equ	0xFF1
  5897                           intcon3	equ	0xFF0
  5898                           postinc0	equ	0xFEE
  5899                           fsr0h	equ	0xFEA
  5900                           fsr0l	equ	0xFE9
  5901                           wreg	equ	0xFE8
  5902                           plusw1	equ	0xFE3
  5903                           fsr1h	equ	0xFE2
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           postinc2	equ	0xFDE
  5907                           postdec2	equ	0xFDD
  5908                           plusw2	equ	0xFDB
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function i2_I2C_Master_Read *****************
  5914 ;; Defined at:
  5915 ;;		line 47 in file "I2C.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  a               1    wreg     unsigned char 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  a               1    1[COMRAM] unsigned char 
  5920 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      unsigned char 
  5923 ;; Registers used:
  5924 ;;		wreg, status,2, status,0, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;Total ram usage:        2 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    1
  5937 ;; This function calls:
  5938 ;;		i2_I2C_Master_Wait
  5939 ;; This function is called by:
  5940 ;;		i2_getTime
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text30
  5945  002010                     __ptext30:
  5946                           	opt stack 0
  5947  002010                     i2_I2C_Master_Read:
  5948                           	opt stack 22
  5949                           
  5950                           ;incstack = 0
  5951                           ;i2I2C_Master_Read@a stored from wreg
  5952  002010  6E02               	movwf	i2I2C_Master_Read@a,c
  5953                           
  5954                           ;I2C.c: 48: unsigned char temp;
  5955                           ;I2C.c: 49: I2C_Master_Wait();
  5956  002012  ECBD  F010         	call	i2_I2C_Master_Wait	;wreg free
  5957                           
  5958                           ;I2C.c: 50: RCEN = 1;
  5959  002016  86C5               	bsf	4037,3,c	;volatile
  5960                           
  5961                           ;I2C.c: 51: I2C_Master_Wait();
  5962  002018  ECBD  F010         	call	i2_I2C_Master_Wait	;wreg free
  5963                           
  5964                           ;I2C.c: 52: temp = SSPBUF;
  5965  00201C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  5966                           
  5967                           ;I2C.c: 53: I2C_Master_Wait();
  5968  002020  ECBD  F010         	call	i2_I2C_Master_Wait	;wreg free
  5969                           
  5970                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  5971  002024  5002               	movf	i2I2C_Master_Read@a,w,c
  5972  002026  A4D8               	btfss	status,2,c
  5973  002028  D002               	goto	i2u237_40
  5974  00202A  8AC5               	bsf	4037,5,c	;volatile
  5975  00202C  D001               	goto	i2l3426
  5976  00202E                     i2u237_40:
  5977  00202E  9AC5               	bcf	4037,5,c	;volatile
  5978  002030                     i2l3426:
  5979                           
  5980                           ;I2C.c: 55: ACKEN = 1;
  5981  002030  88C5               	bsf	4037,4,c	;volatile
  5982                           
  5983                           ;I2C.c: 56: return temp;
  5984  002032  5003               	movf	i2I2C_Master_Read@temp,w,c
  5985  002034  0012               	return	
  5986  002036                     __end_ofi2_I2C_Master_Read:
  5987                           	opt stack 0
  5988                           pclatu	equ	0xFFB
  5989                           pclath	equ	0xFFA
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           intcon	equ	0xFF2
  5997                           intcon2	equ	0xFF1
  5998                           intcon3	equ	0xFF0
  5999                           postinc0	equ	0xFEE
  6000                           fsr0h	equ	0xFEA
  6001                           fsr0l	equ	0xFE9
  6002                           wreg	equ	0xFE8
  6003                           plusw1	equ	0xFE3
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           plusw2	equ	0xFDB
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function i2_I2C_Master_Wait *****************
  6015 ;; Defined at:
  6016 ;;		line 23 in file "I2C.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;		None
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;		None
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      void 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;Total ram usage:        1 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; This function calls:
  6037 ;;		Nothing
  6038 ;; This function is called by:
  6039 ;;		i2_I2C_Master_Start
  6040 ;;		i2_I2C_Master_Stop
  6041 ;;		i2_I2C_Master_Write
  6042 ;;		i2_I2C_Master_Read
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text31
  6047  00217A                     __ptext31:
  6048                           	opt stack 0
  6049  00217A                     i2_I2C_Master_Wait:
  6050                           	opt stack 22
  6051  00217A                     i2l375:
  6052  00217A  B4C7               	btfsc	4039,2,c	;volatile
  6053  00217C  D7FE               	goto	i2l375
  6054  00217E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6055  002182  0E1F               	movlw	31
  6056  002184  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6057  002186  B4D8               	btfsc	status,2,c
  6058  002188  0012               	return	
  6059  00218A  D7F7               	goto	i2l375
  6060  00218C                     __end_ofi2_I2C_Master_Wait:
  6061                           	opt stack 0
  6062                           pclatu	equ	0xFFB
  6063                           pclath	equ	0xFFA
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           intcon3	equ	0xFF0
  6073                           postinc0	equ	0xFEE
  6074                           fsr0h	equ	0xFEA
  6075                           fsr0l	equ	0xFE9
  6076                           wreg	equ	0xFE8
  6077                           plusw1	equ	0xFE3
  6078                           fsr1h	equ	0xFE2
  6079                           fsr1l	equ	0xFE1
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           plusw2	equ	0xFDB
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _stopMoving *****************
  6089 ;; Defined at:
  6090 ;;		line 29 in file "motors.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  em              1    wreg     unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  em              1   42[COMRAM] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        3 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    3
  6111 ;; This function calls:
  6112 ;;		i2_line0
  6113 ;;		i2_printf
  6114 ;; This function is called by:
  6115 ;;		_simulate
  6116 ;;		_intrpt
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text32
  6121  001F32                     __ptext32:
  6122                           	opt stack 0
  6123  001F32                     _stopMoving:
  6124                           	opt stack 22
  6125                           
  6126                           ;incstack = 0
  6127                           ;stopMoving@em stored from wreg
  6128  001F32  6E2B               	movwf	stopMoving@em,c
  6129                           
  6130                           ;motors.c: 30: (INTCONbits.GIE = 0);
  6131  001F34  9EF2               	bcf	intcon,7,c	;volatile
  6132                           
  6133                           ;motors.c: 31: LATC = 0;
  6134  001F36  0E00               	movlw	0
  6135  001F38  6E8B               	movwf	3979,c	;volatile
  6136                           
  6137                           ;motors.c: 32: line0();printf(em ? "Emergency          " : "Stopped          ");
  6138  001F3A  EC08  F011         	call	i2_line0	;wreg free
  6139  001F3E  502B               	movf	stopMoving@em,w,c
  6140  001F40  A4D8               	btfss	status,2,c
  6141  001F42  D004               	goto	i2l3892
  6142  001F44  0E7F               	movlw	low STR_37
  6143  001F46  6E29               	movwf	_stopMoving$553,c
  6144  001F48  0EFF               	movlw	high STR_37
  6145  001F4A  D003               	goto	L1
  6146  001F4C                     i2l3892:
  6147  001F4C  0E31               	movlw	low STR_36
  6148  001F4E  6E29               	movwf	_stopMoving$553,c
  6149  001F50  0EFF               	movlw	high STR_36
  6150  001F52                     L1:
  6151  001F52  6E2A               	movwf	_stopMoving$553+1,c
  6152  001F54  C029  F00D         	movff	_stopMoving$553,i2printf@f
  6153  001F58  C02A  F00E         	movff	_stopMoving$553+1,i2printf@f+1
  6154  001F5C  EC91  F003         	call	i2_printf	;wreg free
  6155                           
  6156                           ;motors.c: 33: if (em)
  6157  001F60  502B               	movf	stopMoving@em,w,c
  6158  001F62  B4D8               	btfsc	status,2,c
  6159  001F64  0012               	return	
  6160  001F66                     i2l280:
  6161  001F66  D7FF               	goto	i2l280
  6162  001F68                     __end_of_stopMoving:
  6163                           	opt stack 0
  6164                           pclatu	equ	0xFFB
  6165                           pclath	equ	0xFFA
  6166                           tblptru	equ	0xFF8
  6167                           tblptrh	equ	0xFF7
  6168                           tblptrl	equ	0xFF6
  6169                           tablat	equ	0xFF5
  6170                           prodh	equ	0xFF4
  6171                           prodl	equ	0xFF3
  6172                           intcon	equ	0xFF2
  6173                           intcon2	equ	0xFF1
  6174                           intcon3	equ	0xFF0
  6175                           postinc0	equ	0xFEE
  6176                           fsr0h	equ	0xFEA
  6177                           fsr0l	equ	0xFE9
  6178                           wreg	equ	0xFE8
  6179                           plusw1	equ	0xFE3
  6180                           fsr1h	equ	0xFE2
  6181                           fsr1l	equ	0xFE1
  6182                           indf2	equ	0xFDF
  6183                           postinc2	equ	0xFDE
  6184                           postdec2	equ	0xFDD
  6185                           plusw2	equ	0xFDB
  6186                           fsr2h	equ	0xFDA
  6187                           fsr2l	equ	0xFD9
  6188                           status	equ	0xFD8
  6189                           
  6190 ;; *************** function _checkC *****************
  6191 ;; Defined at:
  6192 ;;		line 62 in file "sensors.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6195 ;;		 -> simulate@sorted(4), 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  2   58[COMRAM] int 
  6200 ;; Registers used:
  6201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;Total ram usage:        2 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    3
  6214 ;; This function calls:
  6215 ;;		_checkV
  6216 ;;		i2_printf
  6217 ;; This function is called by:
  6218 ;;		_simulate
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           	psect	text33
  6223  0014B4                     __ptext33:
  6224                           	opt stack 0
  6225  0014B4                     _checkC:
  6226                           	opt stack 21
  6227                           
  6228                           ;sensors.c: 65: printf("C:");
  6229                           
  6230                           ;incstack = 0
  6231  0014B4  0EF3               	movlw	low (STR_8+1)
  6232  0014B6  6E0D               	movwf	i2printf@f,c
  6233  0014B8  0EFF               	movlw	high (STR_8+1)
  6234  0014BA  6E0E               	movwf	i2printf@f+1,c
  6235  0014BC  EC91  F003         	call	i2_printf	;wreg free
  6236                           
  6237                           ;sensors.c: 66: switch (checkV(1, 1.5)) {
  6238  0014C0  D032               	goto	i2l3798
  6239  0014C2                     i2l3770:
  6240                           
  6241                           ;sensors.c: 69: printf(" 1 ");
  6242  0014C2  0EE6               	movlw	low STR_39
  6243  0014C4  6E0D               	movwf	i2printf@f,c
  6244  0014C6  0EFF               	movlw	high STR_39
  6245  0014C8  6E0E               	movwf	i2printf@f+1,c
  6246  0014CA  EC91  F003         	call	i2_printf	;wreg free
  6247                           
  6248                           ;sensors.c: 70: sorted[1]++;
  6249  0014CE  EE20 F001          	lfsr	2,1
  6250  0014D2  503B               	movf	checkC@sorted,w,c
  6251  0014D4  26D9               	addwf	fsr2l,f,c
  6252  0014D6  503C               	movf	checkC@sorted+1,w,c
  6253  0014D8  22DA               	addwfc	fsr2h,f,c
  6254  0014DA  2ADF               	incf	indf2,f,c
  6255                           
  6256                           ;sensors.c: 71: return 1;
  6257  0014DC  0E00               	movlw	0
  6258  0014DE  6E3C               	movwf	?_checkC+1,c
  6259  0014E0  0E01               	movlw	1
  6260  0014E2  6E3B               	movwf	?_checkC,c
  6261  0014E4  0012               	return	
  6262  0014E6                     i2l3778:
  6263                           
  6264                           ;sensors.c: 74: printf(" 0 ");
  6265  0014E6  0EE2               	movlw	low STR_40
  6266  0014E8  6E0D               	movwf	i2printf@f,c
  6267  0014EA  0EFF               	movlw	high STR_40
  6268  0014EC  6E0E               	movwf	i2printf@f+1,c
  6269  0014EE  EC91  F003         	call	i2_printf	;wreg free
  6270                           
  6271                           ;sensors.c: 75: sorted[3]++;
  6272  0014F2  EE20 F003          	lfsr	2,3
  6273  0014F6  503B               	movf	checkC@sorted,w,c
  6274  0014F8  26D9               	addwf	fsr2l,f,c
  6275  0014FA  503C               	movf	checkC@sorted+1,w,c
  6276  0014FC  22DA               	addwfc	fsr2h,f,c
  6277  0014FE  2ADF               	incf	indf2,f,c
  6278                           
  6279                           ;sensors.c: 76: return 0;
  6280  001500  0E00               	movlw	0
  6281  001502  6E3C               	movwf	?_checkC+1,c
  6282  001504  0E00               	movlw	0
  6283  001506  6E3B               	movwf	?_checkC,c
  6284  001508  0012               	return	
  6285  00150A                     i2l3786:
  6286                           
  6287                           ;sensors.c: 79: printf("-1 ");
  6288  00150A  0EEA               	movlw	low STR_41
  6289  00150C  6E0D               	movwf	i2printf@f,c
  6290  00150E  0EFF               	movlw	high STR_41
  6291  001510  6E0E               	movwf	i2printf@f+1,c
  6292  001512  EC91  F003         	call	i2_printf	;wreg free
  6293                           
  6294                           ;sensors.c: 80: return -1;
  6295  001516  683B               	setf	?_checkC,c
  6296  001518  683C               	setf	?_checkC+1,c
  6297  00151A  0012               	return	
  6298  00151C                     i2l3792:
  6299                           
  6300                           ;sensors.c: 82: return 0;
  6301  00151C  0E00               	movlw	0
  6302  00151E  6E3C               	movwf	?_checkC+1,c
  6303  001520  0E00               	movlw	0
  6304  001522  6E3B               	movwf	?_checkC,c
  6305                           
  6306                           ;sensors.c: 83: }
  6307  001524  0012               	return	
  6308  001526                     i2l3798:
  6309  001526  0E00               	movlw	0
  6310  001528  6E31               	movwf	checkV@channel+1,c
  6311  00152A  0E01               	movlw	1
  6312  00152C  6E30               	movwf	checkV@channel,c
  6313  00152E  0E00               	movlw	0
  6314  001530  6E32               	movwf	checkV@max,c
  6315  001532  0EC0               	movlw	192
  6316  001534  6E33               	movwf	checkV@max+1,c
  6317  001536  0E3F               	movlw	63
  6318  001538  6E34               	movwf	checkV@max+2,c
  6319  00153A  ECD3  F006         	call	_checkV	;wreg free
  6320                           
  6321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6322                           ; Switch size 1, requested type "space"
  6323                           ; Number of cases is 2, Range of values is 0 to 255
  6324                           ; switch strategies available:
  6325                           ; Name         Instructions Cycles
  6326                           ; simple_byte            7     4 (average)
  6327                           ;	Chosen strategy is simple_byte
  6328  00153E  5031               	movf	?_checkV+1,w,c
  6329  001540  0A00               	xorlw	0	; case 0
  6330  001542  B4D8               	btfsc	status,2,c
  6331  001544  D004               	goto	i2l4458
  6332  001546  0AFF               	xorlw	255	; case 255
  6333  001548  B4D8               	btfsc	status,2,c
  6334  00154A  D009               	goto	i2l4460
  6335  00154C  D7E7               	goto	i2l3792
  6336  00154E                     i2l4458:
  6337                           
  6338                           ; Switch size 1, requested type "space"
  6339                           ; Number of cases is 2, Range of values is 0 to 1
  6340                           ; switch strategies available:
  6341                           ; Name         Instructions Cycles
  6342                           ; simple_byte            7     4 (average)
  6343                           ;	Chosen strategy is simple_byte
  6344  00154E  5030               	movf	?_checkV,w,c
  6345  001550  0A00               	xorlw	0	; case 0
  6346  001552  B4D8               	btfsc	status,2,c
  6347  001554  D7DA               	goto	i2l3786
  6348  001556  0A01               	xorlw	1	; case 1
  6349  001558  B4D8               	btfsc	status,2,c
  6350  00155A  D7B3               	goto	i2l3770
  6351  00155C  D7DF               	goto	i2l3792
  6352  00155E                     i2l4460:
  6353                           
  6354                           ; Switch size 1, requested type "space"
  6355                           ; Number of cases is 1, Range of values is 255 to 255
  6356                           ; switch strategies available:
  6357                           ; Name         Instructions Cycles
  6358                           ; simple_byte            4     3 (average)
  6359                           ;	Chosen strategy is simple_byte
  6360  00155E  5030               	movf	?_checkV,w,c
  6361  001560  0AFF               	xorlw	255	; case 255
  6362  001562  B4D8               	btfsc	status,2,c
  6363  001564  D7C0               	goto	i2l3778
  6364  001566  D7DA               	goto	i2l3792
  6365  001568                     __end_of_checkC:
  6366                           	opt stack 0
  6367                           pclatu	equ	0xFFB
  6368                           pclath	equ	0xFFA
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           intcon2	equ	0xFF1
  6377                           intcon3	equ	0xFF0
  6378                           postinc0	equ	0xFEE
  6379                           fsr0h	equ	0xFEA
  6380                           fsr0l	equ	0xFE9
  6381                           wreg	equ	0xFE8
  6382                           plusw1	equ	0xFE3
  6383                           fsr1h	equ	0xFE2
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           plusw2	equ	0xFDB
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;; *************** function _checkAA *****************
  6394 ;; Defined at:
  6395 ;;		line 38 in file "sensors.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6398 ;;		 -> simulate@sorted(4), 
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;		None
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  2   58[COMRAM] int 
  6403 ;; Registers used:
  6404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6410 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;Total ram usage:        2 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    3
  6417 ;; This function calls:
  6418 ;;		_checkV
  6419 ;;		i2_printf
  6420 ;; This function is called by:
  6421 ;;		_simulate
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text34
  6426  00161C                     __ptext34:
  6427                           	opt stack 0
  6428  00161C                     _checkAA:
  6429                           	opt stack 21
  6430                           
  6431                           ;sensors.c: 41: printf("AA:");
  6432                           
  6433                           ;incstack = 0
  6434  00161C  0EEE               	movlw	low STR_4
  6435  00161E  6E0D               	movwf	i2printf@f,c
  6436  001620  0EFF               	movlw	high STR_4
  6437  001622  6E0E               	movwf	i2printf@f+1,c
  6438  001624  EC91  F003         	call	i2_printf	;wreg free
  6439                           
  6440                           ;sensors.c: 42: switch (checkV(0, 1.5)) {
  6441  001628  D030               	goto	i2l3758
  6442  00162A                     i2l3730:
  6443                           
  6444                           ;sensors.c: 45: printf(" 1 ");
  6445  00162A  0EE6               	movlw	low STR_39
  6446  00162C  6E0D               	movwf	i2printf@f,c
  6447  00162E  0EFF               	movlw	high STR_39
  6448  001630  6E0E               	movwf	i2printf@f+1,c
  6449  001632  EC91  F003         	call	i2_printf	;wreg free
  6450                           
  6451                           ;sensors.c: 46: sorted[0]++;
  6452  001636  C03B  FFD9         	movff	checkAA@sorted,fsr2l
  6453  00163A  C03C  FFDA         	movff	checkAA@sorted+1,fsr2h
  6454  00163E  2ADF               	incf	indf2,f,c
  6455                           
  6456                           ;sensors.c: 47: return 1;
  6457  001640  0E00               	movlw	0
  6458  001642  6E3C               	movwf	?_checkAA+1,c
  6459  001644  0E01               	movlw	1
  6460  001646  6E3B               	movwf	?_checkAA,c
  6461  001648  0012               	return	
  6462  00164A                     i2l3738:
  6463                           
  6464                           ;sensors.c: 50: printf(" 0 ");
  6465  00164A  0EE2               	movlw	low STR_40
  6466  00164C  6E0D               	movwf	i2printf@f,c
  6467  00164E  0EFF               	movlw	high STR_40
  6468  001650  6E0E               	movwf	i2printf@f+1,c
  6469  001652  EC91  F003         	call	i2_printf	;wreg free
  6470                           
  6471                           ;sensors.c: 51: sorted[3]++;
  6472  001656  EE20 F003          	lfsr	2,3
  6473  00165A  503B               	movf	checkAA@sorted,w,c
  6474  00165C  26D9               	addwf	fsr2l,f,c
  6475  00165E  503C               	movf	checkAA@sorted+1,w,c
  6476  001660  22DA               	addwfc	fsr2h,f,c
  6477  001662  2ADF               	incf	indf2,f,c
  6478                           
  6479                           ;sensors.c: 52: return 0;
  6480  001664  0E00               	movlw	0
  6481  001666  6E3C               	movwf	?_checkAA+1,c
  6482  001668  0E00               	movlw	0
  6483  00166A  6E3B               	movwf	?_checkAA,c
  6484  00166C  0012               	return	
  6485  00166E                     i2l3746:
  6486                           
  6487                           ;sensors.c: 55: printf("-1 ");
  6488  00166E  0EEA               	movlw	low STR_41
  6489  001670  6E0D               	movwf	i2printf@f,c
  6490  001672  0EFF               	movlw	high STR_41
  6491  001674  6E0E               	movwf	i2printf@f+1,c
  6492  001676  EC91  F003         	call	i2_printf	;wreg free
  6493                           
  6494                           ;sensors.c: 56: return -1;
  6495  00167A  683B               	setf	?_checkAA,c
  6496  00167C  683C               	setf	?_checkAA+1,c
  6497  00167E  0012               	return	
  6498  001680                     i2l3752:
  6499                           
  6500                           ;sensors.c: 58: return 0;
  6501  001680  0E00               	movlw	0
  6502  001682  6E3C               	movwf	?_checkAA+1,c
  6503  001684  0E00               	movlw	0
  6504  001686  6E3B               	movwf	?_checkAA,c
  6505                           
  6506                           ;sensors.c: 59: }
  6507  001688  0012               	return	
  6508  00168A                     i2l3758:
  6509  00168A  0E00               	movlw	0
  6510  00168C  6E31               	movwf	checkV@channel+1,c
  6511  00168E  0E00               	movlw	0
  6512  001690  6E30               	movwf	checkV@channel,c
  6513  001692  0E00               	movlw	0
  6514  001694  6E32               	movwf	checkV@max,c
  6515  001696  0EC0               	movlw	192
  6516  001698  6E33               	movwf	checkV@max+1,c
  6517  00169A  0E3F               	movlw	63
  6518  00169C  6E34               	movwf	checkV@max+2,c
  6519  00169E  ECD3  F006         	call	_checkV	;wreg free
  6520                           
  6521                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6522                           ; Switch size 1, requested type "space"
  6523                           ; Number of cases is 2, Range of values is 0 to 255
  6524                           ; switch strategies available:
  6525                           ; Name         Instructions Cycles
  6526                           ; simple_byte            7     4 (average)
  6527                           ;	Chosen strategy is simple_byte
  6528  0016A2  5031               	movf	?_checkV+1,w,c
  6529  0016A4  0A00               	xorlw	0	; case 0
  6530  0016A6  B4D8               	btfsc	status,2,c
  6531  0016A8  D004               	goto	i2l4462
  6532  0016AA  0AFF               	xorlw	255	; case 255
  6533  0016AC  B4D8               	btfsc	status,2,c
  6534  0016AE  D009               	goto	i2l4464
  6535  0016B0  D7E7               	goto	i2l3752
  6536  0016B2                     i2l4462:
  6537                           
  6538                           ; Switch size 1, requested type "space"
  6539                           ; Number of cases is 2, Range of values is 0 to 1
  6540                           ; switch strategies available:
  6541                           ; Name         Instructions Cycles
  6542                           ; simple_byte            7     4 (average)
  6543                           ;	Chosen strategy is simple_byte
  6544  0016B2  5030               	movf	?_checkV,w,c
  6545  0016B4  0A00               	xorlw	0	; case 0
  6546  0016B6  B4D8               	btfsc	status,2,c
  6547  0016B8  D7DA               	goto	i2l3746
  6548  0016BA  0A01               	xorlw	1	; case 1
  6549  0016BC  B4D8               	btfsc	status,2,c
  6550  0016BE  D7B5               	goto	i2l3730
  6551  0016C0  D7DF               	goto	i2l3752
  6552  0016C2                     i2l4464:
  6553                           
  6554                           ; Switch size 1, requested type "space"
  6555                           ; Number of cases is 1, Range of values is 255 to 255
  6556                           ; switch strategies available:
  6557                           ; Name         Instructions Cycles
  6558                           ; simple_byte            4     3 (average)
  6559                           ;	Chosen strategy is simple_byte
  6560  0016C2  5030               	movf	?_checkV,w,c
  6561  0016C4  0AFF               	xorlw	255	; case 255
  6562  0016C6  B4D8               	btfsc	status,2,c
  6563  0016C8  D7C0               	goto	i2l3738
  6564  0016CA  D7DA               	goto	i2l3752
  6565  0016CC                     __end_of_checkAA:
  6566                           	opt stack 0
  6567                           pclatu	equ	0xFFB
  6568                           pclath	equ	0xFFA
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           intcon2	equ	0xFF1
  6577                           intcon3	equ	0xFF0
  6578                           postinc0	equ	0xFEE
  6579                           fsr0h	equ	0xFEA
  6580                           fsr0l	equ	0xFE9
  6581                           wreg	equ	0xFE8
  6582                           plusw1	equ	0xFE3
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           plusw2	equ	0xFDB
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function _check9 *****************
  6594 ;; Defined at:
  6595 ;;		line 86 in file "sensors.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6598 ;;		 -> simulate@sorted(4), 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;		None
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  2   58[COMRAM] int 
  6603 ;; Registers used:
  6604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;Total ram usage:        2 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    3
  6617 ;; This function calls:
  6618 ;;		_checkV
  6619 ;;		i2_printf
  6620 ;; This function is called by:
  6621 ;;		_simulate
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text35
  6626  001568                     __ptext35:
  6627                           	opt stack 0
  6628  001568                     _check9:
  6629                           	opt stack 21
  6630                           
  6631                           ;sensors.c: 89: printf("9V:");
  6632                           
  6633                           ;incstack = 0
  6634  001568  0EDE               	movlw	low (STR_12+1)
  6635  00156A  6E0D               	movwf	i2printf@f,c
  6636  00156C  0EFF               	movlw	high (STR_12+1)
  6637  00156E  6E0E               	movwf	i2printf@f+1,c
  6638  001570  EC91  F003         	call	i2_printf	;wreg free
  6639                           
  6640                           ;sensors.c: 90: switch (checkV(2, 4)) {
  6641  001574  D032               	goto	i2l3838
  6642  001576                     i2l3810:
  6643                           
  6644                           ;sensors.c: 93: printf(" 1 ");
  6645  001576  0EE6               	movlw	low STR_39
  6646  001578  6E0D               	movwf	i2printf@f,c
  6647  00157A  0EFF               	movlw	high STR_39
  6648  00157C  6E0E               	movwf	i2printf@f+1,c
  6649  00157E  EC91  F003         	call	i2_printf	;wreg free
  6650                           
  6651                           ;sensors.c: 94: sorted[2]++;
  6652  001582  EE20 F002          	lfsr	2,2
  6653  001586  503B               	movf	check9@sorted,w,c
  6654  001588  26D9               	addwf	fsr2l,f,c
  6655  00158A  503C               	movf	check9@sorted+1,w,c
  6656  00158C  22DA               	addwfc	fsr2h,f,c
  6657  00158E  2ADF               	incf	indf2,f,c
  6658                           
  6659                           ;sensors.c: 95: return 1;
  6660  001590  0E00               	movlw	0
  6661  001592  6E3C               	movwf	?_check9+1,c
  6662  001594  0E01               	movlw	1
  6663  001596  6E3B               	movwf	?_check9,c
  6664  001598  0012               	return	
  6665  00159A                     i2l3818:
  6666                           
  6667                           ;sensors.c: 98: printf(" 0 ");
  6668  00159A  0EE2               	movlw	low STR_40
  6669  00159C  6E0D               	movwf	i2printf@f,c
  6670  00159E  0EFF               	movlw	high STR_40
  6671  0015A0  6E0E               	movwf	i2printf@f+1,c
  6672  0015A2  EC91  F003         	call	i2_printf	;wreg free
  6673                           
  6674                           ;sensors.c: 99: sorted[3]++;
  6675  0015A6  EE20 F003          	lfsr	2,3
  6676  0015AA  503B               	movf	check9@sorted,w,c
  6677  0015AC  26D9               	addwf	fsr2l,f,c
  6678  0015AE  503C               	movf	check9@sorted+1,w,c
  6679  0015B0  22DA               	addwfc	fsr2h,f,c
  6680  0015B2  2ADF               	incf	indf2,f,c
  6681                           
  6682                           ;sensors.c: 100: return 0;
  6683  0015B4  0E00               	movlw	0
  6684  0015B6  6E3C               	movwf	?_check9+1,c
  6685  0015B8  0E00               	movlw	0
  6686  0015BA  6E3B               	movwf	?_check9,c
  6687  0015BC  0012               	return	
  6688  0015BE                     i2l3826:
  6689                           
  6690                           ;sensors.c: 103: printf("-1 ");
  6691  0015BE  0EEA               	movlw	low STR_41
  6692  0015C0  6E0D               	movwf	i2printf@f,c
  6693  0015C2  0EFF               	movlw	high STR_41
  6694  0015C4  6E0E               	movwf	i2printf@f+1,c
  6695  0015C6  EC91  F003         	call	i2_printf	;wreg free
  6696                           
  6697                           ;sensors.c: 104: return -1;
  6698  0015CA  683B               	setf	?_check9,c
  6699  0015CC  683C               	setf	?_check9+1,c
  6700  0015CE  0012               	return	
  6701  0015D0                     i2l3832:
  6702                           
  6703                           ;sensors.c: 106: return 0;
  6704  0015D0  0E00               	movlw	0
  6705  0015D2  6E3C               	movwf	?_check9+1,c
  6706  0015D4  0E00               	movlw	0
  6707  0015D6  6E3B               	movwf	?_check9,c
  6708                           
  6709                           ;sensors.c: 107: }
  6710  0015D8  0012               	return	
  6711  0015DA                     i2l3838:
  6712  0015DA  0E00               	movlw	0
  6713  0015DC  6E31               	movwf	checkV@channel+1,c
  6714  0015DE  0E02               	movlw	2
  6715  0015E0  6E30               	movwf	checkV@channel,c
  6716  0015E2  0E00               	movlw	0
  6717  0015E4  6E32               	movwf	checkV@max,c
  6718  0015E6  0E80               	movlw	128
  6719  0015E8  6E33               	movwf	checkV@max+1,c
  6720  0015EA  0E40               	movlw	64
  6721  0015EC  6E34               	movwf	checkV@max+2,c
  6722  0015EE  ECD3  F006         	call	_checkV	;wreg free
  6723                           
  6724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6725                           ; Switch size 1, requested type "space"
  6726                           ; Number of cases is 2, Range of values is 0 to 255
  6727                           ; switch strategies available:
  6728                           ; Name         Instructions Cycles
  6729                           ; simple_byte            7     4 (average)
  6730                           ;	Chosen strategy is simple_byte
  6731  0015F2  5031               	movf	?_checkV+1,w,c
  6732  0015F4  0A00               	xorlw	0	; case 0
  6733  0015F6  B4D8               	btfsc	status,2,c
  6734  0015F8  D004               	goto	i2l4466
  6735  0015FA  0AFF               	xorlw	255	; case 255
  6736  0015FC  B4D8               	btfsc	status,2,c
  6737  0015FE  D009               	goto	i2l4468
  6738  001600  D7E7               	goto	i2l3832
  6739  001602                     i2l4466:
  6740                           
  6741                           ; Switch size 1, requested type "space"
  6742                           ; Number of cases is 2, Range of values is 0 to 1
  6743                           ; switch strategies available:
  6744                           ; Name         Instructions Cycles
  6745                           ; simple_byte            7     4 (average)
  6746                           ;	Chosen strategy is simple_byte
  6747  001602  5030               	movf	?_checkV,w,c
  6748  001604  0A00               	xorlw	0	; case 0
  6749  001606  B4D8               	btfsc	status,2,c
  6750  001608  D7DA               	goto	i2l3826
  6751  00160A  0A01               	xorlw	1	; case 1
  6752  00160C  B4D8               	btfsc	status,2,c
  6753  00160E  D7B3               	goto	i2l3810
  6754  001610  D7DF               	goto	i2l3832
  6755  001612                     i2l4468:
  6756                           
  6757                           ; Switch size 1, requested type "space"
  6758                           ; Number of cases is 1, Range of values is 255 to 255
  6759                           ; switch strategies available:
  6760                           ; Name         Instructions Cycles
  6761                           ; simple_byte            4     3 (average)
  6762                           ;	Chosen strategy is simple_byte
  6763  001612  5030               	movf	?_checkV,w,c
  6764  001614  0AFF               	xorlw	255	; case 255
  6765  001616  B4D8               	btfsc	status,2,c
  6766  001618  D7C0               	goto	i2l3818
  6767  00161A  D7DA               	goto	i2l3832
  6768  00161C                     __end_of_check9:
  6769                           	opt stack 0
  6770                           pclatu	equ	0xFFB
  6771                           pclath	equ	0xFFA
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           intcon2	equ	0xFF1
  6780                           intcon3	equ	0xFF0
  6781                           postinc0	equ	0xFEE
  6782                           fsr0h	equ	0xFEA
  6783                           fsr0l	equ	0xFE9
  6784                           wreg	equ	0xFE8
  6785                           plusw1	equ	0xFE3
  6786                           fsr1h	equ	0xFE2
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           plusw2	equ	0xFDB
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796 ;; *************** function _checkV *****************
  6797 ;; Defined at:
  6798 ;;		line 20 in file "sensors.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  channel         2   47[COMRAM] int 
  6801 ;;  max             3   49[COMRAM] float 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  voltage         2   56[COMRAM] int 
  6804 ;;  voltage3        2   54[COMRAM] int 
  6805 ;;  voltage2        2   52[COMRAM] int 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  2   47[COMRAM] int 
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6815 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;Total ram usage:       11 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    2
  6822 ;; This function calls:
  6823 ;;		_AD
  6824 ;;		___awtoft
  6825 ;;		___ftdiv
  6826 ;;		___ftge
  6827 ;;		___ftmul
  6828 ;;		_fluctuate
  6829 ;; This function is called by:
  6830 ;;		_checkAA
  6831 ;;		_checkC
  6832 ;;		_check9
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           	psect	text36
  6837  000DA6                     __ptext36:
  6838                           	opt stack 0
  6839  000DA6                     _checkV:
  6840                           	opt stack 21
  6841                           
  6842                           ;sensors.c: 24: int voltage = AD(channel);
  6843                           
  6844                           ;incstack = 0
  6845  000DA6  5030               	movf	checkV@channel,w,c
  6846  000DA8  ECE0  F00F         	call	_AD
  6847  000DAC  C001  F039         	movff	?_AD,checkV@voltage
  6848  000DB0  C002  F03A         	movff	?_AD+1,checkV@voltage+1
  6849                           
  6850                           ;sensors.c: 25: int voltage2 = AD(channel);
  6851  000DB4  5030               	movf	checkV@channel,w,c
  6852  000DB6  ECE0  F00F         	call	_AD
  6853  000DBA  C001  F035         	movff	?_AD,checkV@voltage2
  6854  000DBE  C002  F036         	movff	?_AD+1,checkV@voltage2+1
  6855                           
  6856                           ;sensors.c: 26: int voltage3 = AD(channel);
  6857  000DC2  5030               	movf	checkV@channel,w,c
  6858  000DC4  ECE0  F00F         	call	_AD
  6859  000DC8  C001  F037         	movff	?_AD,checkV@voltage3
  6860  000DCC  C002  F038         	movff	?_AD+1,checkV@voltage3+1
  6861                           
  6862                           ;sensors.c: 27: if (voltage > 800 || voltage2 > 800 || voltage3 > 800)return 0;
  6863  000DD0  BE3A               	btfsc	checkV@voltage+1,7,c
  6864  000DD2  D006               	goto	i2l3254
  6865  000DD4  0E21               	movlw	33
  6866  000DD6  5C39               	subwf	checkV@voltage,w,c
  6867  000DD8  0E03               	movlw	3
  6868  000DDA  583A               	subwfb	checkV@voltage+1,w,c
  6869  000DDC  B0D8               	btfsc	status,0,c
  6870  000DDE  D010               	goto	i2l3258
  6871  000DE0                     i2l3254:
  6872  000DE0  BE36               	btfsc	checkV@voltage2+1,7,c
  6873  000DE2  D006               	goto	i2l3256
  6874  000DE4  0E21               	movlw	33
  6875  000DE6  5C35               	subwf	checkV@voltage2,w,c
  6876  000DE8  0E03               	movlw	3
  6877  000DEA  5836               	subwfb	checkV@voltage2+1,w,c
  6878  000DEC  B0D8               	btfsc	status,0,c
  6879  000DEE  D008               	goto	i2l3258
  6880  000DF0                     i2l3256:
  6881  000DF0  BE38               	btfsc	checkV@voltage3+1,7,c
  6882  000DF2  D00B               	goto	i2l3262
  6883  000DF4  0E21               	movlw	33
  6884  000DF6  5C37               	subwf	checkV@voltage3,w,c
  6885  000DF8  0E03               	movlw	3
  6886  000DFA  5838               	subwfb	checkV@voltage3+1,w,c
  6887  000DFC  A0D8               	btfss	status,0,c
  6888  000DFE  D005               	goto	i2l3262
  6889  000E00                     i2l3258:
  6890  000E00  0E00               	movlw	0
  6891  000E02  6E31               	movwf	?_checkV+1,c
  6892  000E04  0E00               	movlw	0
  6893  000E06  6E30               	movwf	?_checkV,c
  6894  000E08  0012               	return	
  6895  000E0A                     i2l3262:
  6896                           
  6897                           ;sensors.c: 28: if (fluctuate(voltage, voltage2) || fluctuate(voltage2, voltage3) || flu
      +                          ctuate(voltage, voltage3))return 0;
  6898  000E0A  C039  F001         	movff	checkV@voltage,fluctuate@a
  6899  000E0E  C03A  F002         	movff	checkV@voltage+1,fluctuate@a+1
  6900  000E12  C035  F003         	movff	checkV@voltage2,fluctuate@b
  6901  000E16  C036  F004         	movff	checkV@voltage2+1,fluctuate@b+1
  6902  000E1A  ECAC  F00E         	call	_fluctuate	;wreg free
  6903  000E1E  0900               	iorlw	0
  6904  000E20  A4D8               	btfss	status,2,c
  6905  000E22  D01A               	goto	i2l3268
  6906  000E24  C035  F001         	movff	checkV@voltage2,fluctuate@a
  6907  000E28  C036  F002         	movff	checkV@voltage2+1,fluctuate@a+1
  6908  000E2C  C037  F003         	movff	checkV@voltage3,fluctuate@b
  6909  000E30  C038  F004         	movff	checkV@voltage3+1,fluctuate@b+1
  6910  000E34  ECAC  F00E         	call	_fluctuate	;wreg free
  6911  000E38  0900               	iorlw	0
  6912  000E3A  A4D8               	btfss	status,2,c
  6913  000E3C  D00D               	goto	i2l3268
  6914  000E3E  C039  F001         	movff	checkV@voltage,fluctuate@a
  6915  000E42  C03A  F002         	movff	checkV@voltage+1,fluctuate@a+1
  6916  000E46  C037  F003         	movff	checkV@voltage3,fluctuate@b
  6917  000E4A  C038  F004         	movff	checkV@voltage3+1,fluctuate@b+1
  6918  000E4E  ECAC  F00E         	call	_fluctuate	;wreg free
  6919  000E52  0900               	iorlw	0
  6920  000E54  B4D8               	btfsc	status,2,c
  6921  000E56  D005               	goto	i2l3272
  6922  000E58                     i2l3268:
  6923  000E58  0E00               	movlw	0
  6924  000E5A  6E31               	movwf	?_checkV+1,c
  6925  000E5C  0E00               	movlw	0
  6926  000E5E  6E30               	movwf	?_checkV,c
  6927  000E60  0012               	return	
  6928  000E62                     i2l3272:
  6929                           
  6930                           ;sensors.c: 29: if (voltage < 50) {
  6931  000E62  BE3A               	btfsc	checkV@voltage+1,7,c
  6932  000E64  D006               	goto	i2l3274
  6933  000E66  503A               	movf	checkV@voltage+1,w,c
  6934  000E68  E109               	bnz	i2l3280
  6935  000E6A  0E32               	movlw	50
  6936  000E6C  5C39               	subwf	checkV@voltage,w,c
  6937  000E6E  B0D8               	btfsc	status,0,c
  6938  000E70  D005               	goto	i2l3280
  6939  000E72                     i2l3274:
  6940                           
  6941                           ;sensors.c: 30: return 0;
  6942  000E72  0E00               	movlw	0
  6943  000E74  6E31               	movwf	?_checkV+1,c
  6944  000E76  0E00               	movlw	0
  6945  000E78  6E30               	movwf	?_checkV,c
  6946                           
  6947                           ;sensors.c: 31: } else if (voltage > 0.85 * 1023 * max / 4.1) {
  6948  000E7A  0012               	return	
  6949  000E7C                     i2l3280:
  6950  000E7C  0E33               	movlw	51
  6951  000E7E  6E1B               	movwf	___ftdiv@f2,c
  6952  000E80  0E83               	movlw	131
  6953  000E82  6E1C               	movwf	___ftdiv@f2+1,c
  6954  000E84  0E40               	movlw	64
  6955  000E86  6E1D               	movwf	___ftdiv@f2+2,c
  6956  000E88  0E63               	movlw	99
  6957  000E8A  6E0C               	movwf	___ftmul@f2,c
  6958  000E8C  0E59               	movlw	89
  6959  000E8E  6E0D               	movwf	___ftmul@f2+1,c
  6960  000E90  0E44               	movlw	68
  6961  000E92  6E0E               	movwf	___ftmul@f2+2,c
  6962  000E94  C032  F009         	movff	checkV@max,___ftmul@f1
  6963  000E98  C033  F00A         	movff	checkV@max+1,___ftmul@f1+1
  6964  000E9C  C034  F00B         	movff	checkV@max+2,___ftmul@f1+2
  6965  000EA0  EC96  F008         	call	___ftmul	;wreg free
  6966  000EA4  C009  F018         	movff	?___ftmul,___ftdiv@f1
  6967  000EA8  C00A  F019         	movff	?___ftmul+1,___ftdiv@f1+1
  6968  000EAC  C00B  F01A         	movff	?___ftmul+2,___ftdiv@f1+2
  6969  000EB0  EC89  F009         	call	___ftdiv	;wreg free
  6970  000EB4  C018  F027         	movff	?___ftdiv,___ftge@ff1
  6971  000EB8  C019  F028         	movff	?___ftdiv+1,___ftge@ff1+1
  6972  000EBC  C01A  F029         	movff	?___ftdiv+2,___ftge@ff1+2
  6973  000EC0  C039  F009         	movff	checkV@voltage,___awtoft@c
  6974  000EC4  C03A  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  6975  000EC8  EC62  F00F         	call	___awtoft	;wreg free
  6976  000ECC  C009  F02A         	movff	?___awtoft,___ftge@ff2
  6977  000ED0  C00A  F02B         	movff	?___awtoft+1,___ftge@ff2+1
  6978  000ED4  C00B  F02C         	movff	?___awtoft+2,___ftge@ff2+2
  6979  000ED8  ECBD  F00B         	call	___ftge	;wreg free
  6980  000EDC  B0D8               	btfsc	status,0,c
  6981  000EDE  D005               	goto	i2l317
  6982                           
  6983                           ;sensors.c: 32: return 1;
  6984  000EE0  0E00               	movlw	0
  6985  000EE2  6E31               	movwf	?_checkV+1,c
  6986  000EE4  0E01               	movlw	1
  6987  000EE6  6E30               	movwf	?_checkV,c
  6988                           
  6989                           ;sensors.c: 33: } else {
  6990  000EE8  0012               	return	
  6991  000EEA                     i2l317:
  6992                           
  6993                           ;sensors.c: 34: return -1;
  6994  000EEA  6830               	setf	?_checkV,c
  6995  000EEC  6831               	setf	?_checkV+1,c
  6996  000EEE  0012               	return	
  6997  000EF0                     __end_of_checkV:
  6998                           	opt stack 0
  6999                           pclatu	equ	0xFFB
  7000                           pclath	equ	0xFFA
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           intcon	equ	0xFF2
  7008                           intcon2	equ	0xFF1
  7009                           intcon3	equ	0xFF0
  7010                           postinc0	equ	0xFEE
  7011                           fsr0h	equ	0xFEA
  7012                           fsr0l	equ	0xFE9
  7013                           wreg	equ	0xFE8
  7014                           plusw1	equ	0xFE3
  7015                           fsr1h	equ	0xFE2
  7016                           fsr1l	equ	0xFE1
  7017                           indf2	equ	0xFDF
  7018                           postinc2	equ	0xFDE
  7019                           postdec2	equ	0xFDD
  7020                           plusw2	equ	0xFDB
  7021                           fsr2h	equ	0xFDA
  7022                           fsr2l	equ	0xFD9
  7023                           status	equ	0xFD8
  7024                           
  7025 ;; *************** function _fluctuate *****************
  7026 ;; Defined at:
  7027 ;;		line 13 in file "sensors.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;  a               2    0[COMRAM] int 
  7030 ;;  b               2    2[COMRAM] int 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  i               2    6[COMRAM] int 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      unsigned char 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7042 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7045 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7046 ;;Total ram usage:        8 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		_checkV
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text37
  7056  001D58                     __ptext37:
  7057                           	opt stack 0
  7058  001D58                     _fluctuate:
  7059                           	opt stack 22
  7060                           
  7061                           ;sensors.c: 15: int i = a - b;
  7062                           
  7063                           ;incstack = 0
  7064  001D58  C003  F005         	movff	fluctuate@b,??_fluctuate
  7065  001D5C  C004  F006         	movff	fluctuate@b+1,??_fluctuate+1
  7066  001D60  1E05               	comf	??_fluctuate,f,c
  7067  001D62  1E06               	comf	??_fluctuate+1,f,c
  7068  001D64  4A05               	infsnz	??_fluctuate,f,c
  7069  001D66  2A06               	incf	??_fluctuate+1,f,c
  7070  001D68  5001               	movf	fluctuate@a,w,c
  7071  001D6A  2405               	addwf	??_fluctuate,w,c
  7072  001D6C  6E07               	movwf	fluctuate@i,c
  7073  001D6E  5002               	movf	fluctuate@a+1,w,c
  7074  001D70  2006               	addwfc	??_fluctuate+1,w,c
  7075  001D72  6E08               	movwf	fluctuate@i+1,c
  7076                           
  7077                           ;sensors.c: 16: if (a < b)i = -i;
  7078  001D74  5003               	movf	fluctuate@b,w,c
  7079  001D76  5C01               	subwf	fluctuate@a,w,c
  7080  001D78  5002               	movf	fluctuate@a+1,w,c
  7081  001D7A  0A80               	xorlw	128
  7082  001D7C  6E05               	movwf	??_fluctuate& (0+255),c
  7083  001D7E  5004               	movf	fluctuate@b+1,w,c
  7084  001D80  0A80               	xorlw	128
  7085  001D82  5805               	subwfb	??_fluctuate& (0+255),w,c
  7086  001D84  B0D8               	btfsc	status,0,c
  7087  001D86  D004               	goto	i2l2920
  7088  001D88  6C07               	negf	fluctuate@i,c
  7089  001D8A  1E08               	comf	fluctuate@i+1,f,c
  7090  001D8C  B0D8               	btfsc	status,0,c
  7091  001D8E  2A08               	incf	fluctuate@i+1,f,c
  7092  001D90                     i2l2920:
  7093                           
  7094                           ;sensors.c: 17: return i > 200;
  7095  001D90  BE08               	btfsc	fluctuate@i+1,7,c
  7096  001D92  D008               	goto	i2u163_40
  7097  001D94  5008               	movf	fluctuate@i+1,w,c
  7098  001D96  E104               	bnz	i2u163_41
  7099  001D98  0EC9               	movlw	201
  7100  001D9A  5C07               	subwf	fluctuate@i,w,c
  7101  001D9C  A0D8               	btfss	status,0,c
  7102  001D9E  D002               	goto	i2u163_40
  7103  001DA0                     i2u163_41:
  7104  001DA0  0E01               	movlw	1
  7105  001DA2  0012               	return	
  7106  001DA4                     i2u163_40:
  7107  001DA4  0E00               	movlw	0
  7108  001DA6  0012               	return	
  7109  001DA8                     __end_of_fluctuate:
  7110                           	opt stack 0
  7111                           pclatu	equ	0xFFB
  7112                           pclath	equ	0xFFA
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           intcon2	equ	0xFF1
  7121                           intcon3	equ	0xFF0
  7122                           postinc0	equ	0xFEE
  7123                           fsr0h	equ	0xFEA
  7124                           fsr0l	equ	0xFE9
  7125                           wreg	equ	0xFE8
  7126                           plusw1	equ	0xFE3
  7127                           fsr1h	equ	0xFE2
  7128                           fsr1l	equ	0xFE1
  7129                           indf2	equ	0xFDF
  7130                           postinc2	equ	0xFDE
  7131                           postdec2	equ	0xFDD
  7132                           plusw2	equ	0xFDB
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function ___ftmul *****************
  7138 ;; Defined at:
  7139 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  f1              3    8[COMRAM] float 
  7142 ;;  f2              3   11[COMRAM] float 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  7145 ;;  sign            1   22[COMRAM] unsigned char 
  7146 ;;  cntr            1   21[COMRAM] unsigned char 
  7147 ;;  exp             1   17[COMRAM] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  3    8[COMRAM] float 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7157 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;Total ram usage:       15 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    1
  7164 ;; This function calls:
  7165 ;;		___ftpack
  7166 ;; This function is called by:
  7167 ;;		_checkV
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text38
  7172  00112C                     __ptext38:
  7173                           	opt stack 0
  7174  00112C                     ___ftmul:
  7175                           	opt stack 21
  7176                           
  7177                           ;incstack = 0
  7178  00112C  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  7179  001130  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7180  001132  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7181  001134  340A               	rlcf	___ftmul@f1+1,w,c
  7182  001136  360F               	rlcf	??___ftmul& (0+255),f,c
  7183  001138  E301               	bnc	u172_41
  7184  00113A  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7185  00113C                     u172_41:
  7186  00113C  500F               	movf	??___ftmul,w,c
  7187  00113E  6E12               	movwf	___ftmul@exp,c
  7188  001140  5012               	movf	___ftmul@exp,w,c
  7189  001142  A4D8               	btfss	status,2,c
  7190  001144  D007               	goto	i2l2980
  7191  001146  0E00               	movlw	0
  7192  001148  6E09               	movwf	?___ftmul,c
  7193  00114A  0E00               	movlw	0
  7194  00114C  6E0A               	movwf	?___ftmul+1,c
  7195  00114E  0E00               	movlw	0
  7196  001150  6E0B               	movwf	?___ftmul+2,c
  7197  001152  0012               	return	
  7198  001154                     i2l2980:
  7199  001154  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  7200  001158  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7201  00115A  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7202  00115C  340D               	rlcf	___ftmul@f2+1,w,c
  7203  00115E  360F               	rlcf	??___ftmul& (0+255),f,c
  7204  001160  E301               	bnc	u174_41
  7205  001162  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7206  001164                     u174_41:
  7207  001164  500F               	movf	??___ftmul,w,c
  7208  001166  6E17               	movwf	___ftmul@sign,c
  7209  001168  5017               	movf	___ftmul@sign,w,c
  7210  00116A  A4D8               	btfss	status,2,c
  7211  00116C  D007               	goto	i2l2986
  7212  00116E  0E00               	movlw	0
  7213  001170  6E09               	movwf	?___ftmul,c
  7214  001172  0E00               	movlw	0
  7215  001174  6E0A               	movwf	?___ftmul+1,c
  7216  001176  0E00               	movlw	0
  7217  001178  6E0B               	movwf	?___ftmul+2,c
  7218  00117A  0012               	return	
  7219  00117C                     i2l2986:
  7220  00117C  5017               	movf	___ftmul@sign,w,c
  7221  00117E  0F7B               	addlw	123
  7222  001180  2612               	addwf	___ftmul@exp,f,c
  7223  001182  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  7224  001186  500E               	movf	___ftmul@f2+2,w,c
  7225  001188  1A17               	xorwf	___ftmul@sign,f,c
  7226  00118A  0E80               	movlw	128
  7227  00118C  1617               	andwf	___ftmul@sign,f,c
  7228  00118E  8E0A               	bsf	___ftmul@f1+1,7,c
  7229  001190  8E0D               	bsf	___ftmul@f2+1,7,c
  7230  001192  0EFF               	movlw	255
  7231  001194  160C               	andwf	___ftmul@f2,f,c
  7232  001196  0EFF               	movlw	255
  7233  001198  160D               	andwf	___ftmul@f2+1,f,c
  7234  00119A  0E00               	movlw	0
  7235  00119C  160E               	andwf	___ftmul@f2+2,f,c
  7236  00119E  0E00               	movlw	0
  7237  0011A0  6E13               	movwf	___ftmul@f3_as_product,c
  7238  0011A2  0E00               	movlw	0
  7239  0011A4  6E14               	movwf	___ftmul@f3_as_product+1,c
  7240  0011A6  0E00               	movlw	0
  7241  0011A8  6E15               	movwf	___ftmul@f3_as_product+2,c
  7242  0011AA  0E07               	movlw	7
  7243  0011AC  6E16               	movwf	___ftmul@cntr,c
  7244  0011AE                     i2l3000:
  7245  0011AE  A009               	btfss	___ftmul@f1,0,c
  7246  0011B0  D006               	goto	i2l3004
  7247  0011B2  500C               	movf	___ftmul@f2,w,c
  7248  0011B4  2613               	addwf	___ftmul@f3_as_product,f,c
  7249  0011B6  500D               	movf	___ftmul@f2+1,w,c
  7250  0011B8  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7251  0011BA  500E               	movf	___ftmul@f2+2,w,c
  7252  0011BC  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7253  0011BE                     i2l3004:
  7254  0011BE  90D8               	bcf	status,0,c
  7255  0011C0  320B               	rrcf	___ftmul@f1+2,f,c
  7256  0011C2  320A               	rrcf	___ftmul@f1+1,f,c
  7257  0011C4  3209               	rrcf	___ftmul@f1,f,c
  7258  0011C6  90D8               	bcf	status,0,c
  7259  0011C8  360C               	rlcf	___ftmul@f2,f,c
  7260  0011CA  360D               	rlcf	___ftmul@f2+1,f,c
  7261  0011CC  360E               	rlcf	___ftmul@f2+2,f,c
  7262  0011CE  2E16               	decfsz	___ftmul@cntr,f,c
  7263  0011D0  D7EE               	goto	i2l3000
  7264  0011D2  0E09               	movlw	9
  7265  0011D4  6E16               	movwf	___ftmul@cntr,c
  7266  0011D6                     i2l3010:
  7267  0011D6  A009               	btfss	___ftmul@f1,0,c
  7268  0011D8  D006               	goto	i2l3014
  7269  0011DA  500C               	movf	___ftmul@f2,w,c
  7270  0011DC  2613               	addwf	___ftmul@f3_as_product,f,c
  7271  0011DE  500D               	movf	___ftmul@f2+1,w,c
  7272  0011E0  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7273  0011E2  500E               	movf	___ftmul@f2+2,w,c
  7274  0011E4  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7275  0011E6                     i2l3014:
  7276  0011E6  90D8               	bcf	status,0,c
  7277  0011E8  320B               	rrcf	___ftmul@f1+2,f,c
  7278  0011EA  320A               	rrcf	___ftmul@f1+1,f,c
  7279  0011EC  3209               	rrcf	___ftmul@f1,f,c
  7280  0011EE  90D8               	bcf	status,0,c
  7281  0011F0  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  7282  0011F2  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  7283  0011F4  3213               	rrcf	___ftmul@f3_as_product,f,c
  7284  0011F6  2E16               	decfsz	___ftmul@cntr,f,c
  7285  0011F8  D7EE               	goto	i2l3010
  7286  0011FA  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7287  0011FE  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7288  001202  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7289  001206  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  7290  00120A  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  7291  00120E  EC66  F00B         	call	___ftpack	;wreg free
  7292  001212  C001  F009         	movff	?___ftpack,?___ftmul
  7293  001216  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  7294  00121A  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  7295  00121E  0012               	return	
  7296  001220                     __end_of___ftmul:
  7297                           	opt stack 0
  7298                           pclatu	equ	0xFFB
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           intcon	equ	0xFF2
  7307                           intcon2	equ	0xFF1
  7308                           intcon3	equ	0xFF0
  7309                           postinc0	equ	0xFEE
  7310                           fsr0h	equ	0xFEA
  7311                           fsr0l	equ	0xFE9
  7312                           wreg	equ	0xFE8
  7313                           plusw1	equ	0xFE3
  7314                           fsr1h	equ	0xFE2
  7315                           fsr1l	equ	0xFE1
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           plusw2	equ	0xFDB
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8
  7323                           
  7324 ;; *************** function ___ftge *****************
  7325 ;; Defined at:
  7326 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  ff1             3   38[COMRAM] float 
  7329 ;;  ff2             3   41[COMRAM] float 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;		None               void
  7334 ;; Registers used:
  7335 ;;		wreg, status,2, status,0
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:        9 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; This function calls:
  7348 ;;		Nothing
  7349 ;; This function is called by:
  7350 ;;		_checkV
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text39
  7355  00177A                     __ptext39:
  7356                           	opt stack 0
  7357  00177A                     ___ftge:
  7358                           	opt stack 22
  7359                           
  7360                           ;incstack = 0
  7361  00177A  AE29               	btfss	___ftge@ff1+2,7,c
  7362  00177C  D016               	goto	i2l3082
  7363  00177E  C027  F02D         	movff	___ftge@ff1,??___ftge
  7364  001782  C028  F02E         	movff	___ftge@ff1+1,??___ftge+1
  7365  001786  C029  F02F         	movff	___ftge@ff1+2,??___ftge+2
  7366  00178A  1E2D               	comf	??___ftge,f,c
  7367  00178C  1E2E               	comf	??___ftge+1,f,c
  7368  00178E  1E2F               	comf	??___ftge+2,f,c
  7369  001790  2A2D               	incf	??___ftge,f,c
  7370  001792  0E00               	movlw	0
  7371  001794  222E               	addwfc	??___ftge+1,f,c
  7372  001796  222F               	addwfc	??___ftge+2,f,c
  7373  001798  0E00               	movlw	0
  7374  00179A  242D               	addwf	??___ftge,w,c
  7375  00179C  6E27               	movwf	___ftge@ff1,c
  7376  00179E  0E00               	movlw	0
  7377  0017A0  202E               	addwfc	??___ftge+1,w,c
  7378  0017A2  6E28               	movwf	___ftge@ff1+1,c
  7379  0017A4  0E80               	movlw	128
  7380  0017A6  202F               	addwfc	??___ftge+2,w,c
  7381  0017A8  6E29               	movwf	___ftge@ff1+2,c
  7382  0017AA                     i2l3082:
  7383  0017AA  AE2C               	btfss	___ftge@ff2+2,7,c
  7384  0017AC  D016               	goto	i2l3086
  7385  0017AE  C02A  F02D         	movff	___ftge@ff2,??___ftge
  7386  0017B2  C02B  F02E         	movff	___ftge@ff2+1,??___ftge+1
  7387  0017B6  C02C  F02F         	movff	___ftge@ff2+2,??___ftge+2
  7388  0017BA  1E2D               	comf	??___ftge,f,c
  7389  0017BC  1E2E               	comf	??___ftge+1,f,c
  7390  0017BE  1E2F               	comf	??___ftge+2,f,c
  7391  0017C0  2A2D               	incf	??___ftge,f,c
  7392  0017C2  0E00               	movlw	0
  7393  0017C4  222E               	addwfc	??___ftge+1,f,c
  7394  0017C6  222F               	addwfc	??___ftge+2,f,c
  7395  0017C8  0E00               	movlw	0
  7396  0017CA  242D               	addwf	??___ftge,w,c
  7397  0017CC  6E2A               	movwf	___ftge@ff2,c
  7398  0017CE  0E00               	movlw	0
  7399  0017D0  202E               	addwfc	??___ftge+1,w,c
  7400  0017D2  6E2B               	movwf	___ftge@ff2+1,c
  7401  0017D4  0E80               	movlw	128
  7402  0017D6  202F               	addwfc	??___ftge+2,w,c
  7403  0017D8  6E2C               	movwf	___ftge@ff2+2,c
  7404  0017DA                     i2l3086:
  7405  0017DA  0E00               	movlw	0
  7406  0017DC  1A27               	xorwf	___ftge@ff1,f,c
  7407  0017DE  0E00               	movlw	0
  7408  0017E0  1A28               	xorwf	___ftge@ff1+1,f,c
  7409  0017E2  0E80               	movlw	128
  7410  0017E4  1A29               	xorwf	___ftge@ff1+2,f,c
  7411  0017E6  0E00               	movlw	0
  7412  0017E8  1A2A               	xorwf	___ftge@ff2,f,c
  7413  0017EA  0E00               	movlw	0
  7414  0017EC  1A2B               	xorwf	___ftge@ff2+1,f,c
  7415  0017EE  0E80               	movlw	128
  7416  0017F0  1A2C               	xorwf	___ftge@ff2+2,f,c
  7417  0017F2  502A               	movf	___ftge@ff2,w,c
  7418  0017F4  5C27               	subwf	___ftge@ff1,w,c
  7419  0017F6  502B               	movf	___ftge@ff2+1,w,c
  7420  0017F8  5828               	subwfb	___ftge@ff1+1,w,c
  7421  0017FA  502C               	movf	___ftge@ff2+2,w,c
  7422  0017FC  5829               	subwfb	___ftge@ff1+2,w,c
  7423  0017FE  B0D8               	btfsc	status,0,c
  7424  001800  D002               	goto	i2l3092
  7425  001802  90D8               	bcf	status,0,c
  7426  001804  0012               	return	
  7427  001806                     i2l3092:
  7428  001806  80D8               	bsf	status,0,c
  7429  001808  0012               	return	
  7430  00180A                     __end_of___ftge:
  7431                           	opt stack 0
  7432                           pclatu	equ	0xFFB
  7433                           pclath	equ	0xFFA
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           intcon2	equ	0xFF1
  7442                           intcon3	equ	0xFF0
  7443                           postinc0	equ	0xFEE
  7444                           fsr0h	equ	0xFEA
  7445                           fsr0l	equ	0xFE9
  7446                           wreg	equ	0xFE8
  7447                           plusw1	equ	0xFE3
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           plusw2	equ	0xFDB
  7454                           fsr2h	equ	0xFDA
  7455                           fsr2l	equ	0xFD9
  7456                           status	equ	0xFD8
  7457                           
  7458 ;; *************** function ___ftdiv *****************
  7459 ;; Defined at:
  7460 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;  f1              3   23[COMRAM] float 
  7463 ;;  f2              3   26[COMRAM] float 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  f3              3   33[COMRAM] float 
  7466 ;;  sign            1   37[COMRAM] unsigned char 
  7467 ;;  exp             1   36[COMRAM] unsigned char 
  7468 ;;  cntr            1   32[COMRAM] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  3   23[COMRAM] float 
  7471 ;; Registers used:
  7472 ;;		wreg, status,2, status,0, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7478 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;Total ram usage:       15 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    1
  7485 ;; This function calls:
  7486 ;;		___ftpack
  7487 ;; This function is called by:
  7488 ;;		_checkV
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text40
  7493  001312                     __ptext40:
  7494                           	opt stack 0
  7495  001312                     ___ftdiv:
  7496                           	opt stack 21
  7497                           
  7498                           ;incstack = 0
  7499  001312  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  7500  001316  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7501  001318  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7502  00131A  3419               	rlcf	___ftdiv@f1+1,w,c
  7503  00131C  361E               	rlcf	??___ftdiv& (0+255),f,c
  7504  00131E  E301               	bnc	u167_41
  7505  001320  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7506  001322                     u167_41:
  7507  001322  501E               	movf	??___ftdiv,w,c
  7508  001324  6E25               	movwf	___ftdiv@exp,c
  7509  001326  5025               	movf	___ftdiv@exp,w,c
  7510  001328  A4D8               	btfss	status,2,c
  7511  00132A  D007               	goto	i2l2934
  7512  00132C  0E00               	movlw	0
  7513  00132E  6E18               	movwf	?___ftdiv,c
  7514  001330  0E00               	movlw	0
  7515  001332  6E19               	movwf	?___ftdiv+1,c
  7516  001334  0E00               	movlw	0
  7517  001336  6E1A               	movwf	?___ftdiv+2,c
  7518  001338  0012               	return	
  7519  00133A                     i2l2934:
  7520  00133A  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  7521  00133E  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7522  001340  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7523  001342  341C               	rlcf	___ftdiv@f2+1,w,c
  7524  001344  361E               	rlcf	??___ftdiv& (0+255),f,c
  7525  001346  E301               	bnc	u169_41
  7526  001348  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7527  00134A                     u169_41:
  7528  00134A  501E               	movf	??___ftdiv,w,c
  7529  00134C  6E26               	movwf	___ftdiv@sign,c
  7530  00134E  5026               	movf	___ftdiv@sign,w,c
  7531  001350  A4D8               	btfss	status,2,c
  7532  001352  D007               	goto	i2l2940
  7533  001354  0E00               	movlw	0
  7534  001356  6E18               	movwf	?___ftdiv,c
  7535  001358  0E00               	movlw	0
  7536  00135A  6E19               	movwf	?___ftdiv+1,c
  7537  00135C  0E00               	movlw	0
  7538  00135E  6E1A               	movwf	?___ftdiv+2,c
  7539  001360  0012               	return	
  7540  001362                     i2l2940:
  7541  001362  0E00               	movlw	0
  7542  001364  6E22               	movwf	___ftdiv@f3,c
  7543  001366  0E00               	movlw	0
  7544  001368  6E23               	movwf	___ftdiv@f3+1,c
  7545  00136A  0E00               	movlw	0
  7546  00136C  6E24               	movwf	___ftdiv@f3+2,c
  7547  00136E  5026               	movf	___ftdiv@sign,w,c
  7548  001370  0F89               	addlw	137
  7549  001372  5E25               	subwf	___ftdiv@exp,f,c
  7550  001374  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  7551  001378  501D               	movf	___ftdiv@f2+2,w,c
  7552  00137A  1A26               	xorwf	___ftdiv@sign,f,c
  7553  00137C  0E80               	movlw	128
  7554  00137E  1626               	andwf	___ftdiv@sign,f,c
  7555  001380  8E19               	bsf	___ftdiv@f1+1,7,c
  7556  001382  0EFF               	movlw	255
  7557  001384  1618               	andwf	___ftdiv@f1,f,c
  7558  001386  0EFF               	movlw	255
  7559  001388  1619               	andwf	___ftdiv@f1+1,f,c
  7560  00138A  0E00               	movlw	0
  7561  00138C  161A               	andwf	___ftdiv@f1+2,f,c
  7562  00138E  8E1C               	bsf	___ftdiv@f2+1,7,c
  7563  001390  0EFF               	movlw	255
  7564  001392  161B               	andwf	___ftdiv@f2,f,c
  7565  001394  0EFF               	movlw	255
  7566  001396  161C               	andwf	___ftdiv@f2+1,f,c
  7567  001398  0E00               	movlw	0
  7568  00139A  161D               	andwf	___ftdiv@f2+2,f,c
  7569  00139C  0E18               	movlw	24
  7570  00139E  6E21               	movwf	___ftdiv@cntr,c
  7571  0013A0                     i2l2960:
  7572  0013A0  90D8               	bcf	status,0,c
  7573  0013A2  3622               	rlcf	___ftdiv@f3,f,c
  7574  0013A4  3623               	rlcf	___ftdiv@f3+1,f,c
  7575  0013A6  3624               	rlcf	___ftdiv@f3+2,f,c
  7576  0013A8  501B               	movf	___ftdiv@f2,w,c
  7577  0013AA  5C18               	subwf	___ftdiv@f1,w,c
  7578  0013AC  501C               	movf	___ftdiv@f2+1,w,c
  7579  0013AE  5819               	subwfb	___ftdiv@f1+1,w,c
  7580  0013B0  501D               	movf	___ftdiv@f2+2,w,c
  7581  0013B2  581A               	subwfb	___ftdiv@f1+2,w,c
  7582  0013B4  A0D8               	btfss	status,0,c
  7583  0013B6  D007               	goto	i2l802
  7584  0013B8  501B               	movf	___ftdiv@f2,w,c
  7585  0013BA  5E18               	subwf	___ftdiv@f1,f,c
  7586  0013BC  501C               	movf	___ftdiv@f2+1,w,c
  7587  0013BE  5A19               	subwfb	___ftdiv@f1+1,f,c
  7588  0013C0  501D               	movf	___ftdiv@f2+2,w,c
  7589  0013C2  5A1A               	subwfb	___ftdiv@f1+2,f,c
  7590  0013C4  8022               	bsf	___ftdiv@f3,0,c
  7591  0013C6                     i2l802:
  7592  0013C6  90D8               	bcf	status,0,c
  7593  0013C8  3618               	rlcf	___ftdiv@f1,f,c
  7594  0013CA  3619               	rlcf	___ftdiv@f1+1,f,c
  7595  0013CC  361A               	rlcf	___ftdiv@f1+2,f,c
  7596  0013CE  2E21               	decfsz	___ftdiv@cntr,f,c
  7597  0013D0  D7E7               	goto	i2l2960
  7598  0013D2  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  7599  0013D6  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7600  0013DA  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7601  0013DE  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  7602  0013E2  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  7603  0013E6  EC66  F00B         	call	___ftpack	;wreg free
  7604  0013EA  C001  F018         	movff	?___ftpack,?___ftdiv
  7605  0013EE  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  7606  0013F2  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  7607  0013F6  0012               	return	
  7608  0013F8                     __end_of___ftdiv:
  7609                           	opt stack 0
  7610                           pclatu	equ	0xFFB
  7611                           pclath	equ	0xFFA
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           intcon2	equ	0xFF1
  7620                           intcon3	equ	0xFF0
  7621                           postinc0	equ	0xFEE
  7622                           fsr0h	equ	0xFEA
  7623                           fsr0l	equ	0xFE9
  7624                           wreg	equ	0xFE8
  7625                           plusw1	equ	0xFE3
  7626                           fsr1h	equ	0xFE2
  7627                           fsr1l	equ	0xFE1
  7628                           indf2	equ	0xFDF
  7629                           postinc2	equ	0xFDE
  7630                           postdec2	equ	0xFDD
  7631                           plusw2	equ	0xFDB
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function ___awtoft *****************
  7637 ;; Defined at:
  7638 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  c               2    8[COMRAM] int 
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;  sign            1   11[COMRAM] unsigned char 
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  3    8[COMRAM] float 
  7645 ;; Registers used:
  7646 ;;		wreg, status,2, status,0, cstack
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7652 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;Total ram usage:        4 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:    1
  7659 ;; This function calls:
  7660 ;;		___ftpack
  7661 ;; This function is called by:
  7662 ;;		_checkV
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text41
  7667  001EC4                     __ptext41:
  7668                           	opt stack 0
  7669  001EC4                     ___awtoft:
  7670                           	opt stack 21
  7671                           
  7672                           ;incstack = 0
  7673  001EC4  0E00               	movlw	0
  7674  001EC6  6E0C               	movwf	___awtoft@sign,c
  7675  001EC8  AE0A               	btfss	___awtoft@c+1,7,c
  7676  001ECA  D006               	goto	i2l3074
  7677  001ECC  6C09               	negf	___awtoft@c,c
  7678  001ECE  1E0A               	comf	___awtoft@c+1,f,c
  7679  001ED0  B0D8               	btfsc	status,0,c
  7680  001ED2  2A0A               	incf	___awtoft@c+1,f,c
  7681  001ED4  0E01               	movlw	1
  7682  001ED6  6E0C               	movwf	___awtoft@sign,c
  7683  001ED8                     i2l3074:
  7684  001ED8  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7685  001EDC  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7686  001EE0  6A03               	clrf	___ftpack@arg+2,c
  7687  001EE2  0E8E               	movlw	142
  7688  001EE4  6E04               	movwf	___ftpack@exp,c
  7689  001EE6  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7690  001EEA  EC66  F00B         	call	___ftpack	;wreg free
  7691  001EEE  C001  F009         	movff	?___ftpack,?___awtoft
  7692  001EF2  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7693  001EF6  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7694  001EFA  0012               	return	
  7695  001EFC                     __end_of___awtoft:
  7696                           	opt stack 0
  7697                           pclatu	equ	0xFFB
  7698                           pclath	equ	0xFFA
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           intcon	equ	0xFF2
  7706                           intcon2	equ	0xFF1
  7707                           intcon3	equ	0xFF0
  7708                           postinc0	equ	0xFEE
  7709                           fsr0h	equ	0xFEA
  7710                           fsr0l	equ	0xFE9
  7711                           wreg	equ	0xFE8
  7712                           plusw1	equ	0xFE3
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           plusw2	equ	0xFDB
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function ___ftpack *****************
  7724 ;; Defined at:
  7725 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  arg             3    0[COMRAM] unsigned um
  7728 ;;  exp             1    3[COMRAM] unsigned char 
  7729 ;;  sign            1    4[COMRAM] unsigned char 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  3    0[COMRAM] float 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7741 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;Total ram usage:        8 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; This function calls:
  7748 ;;		Nothing
  7749 ;; This function is called by:
  7750 ;;		___awtoft
  7751 ;;		___ftdiv
  7752 ;;		___ftmul
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text42
  7757  0016CC                     __ptext42:
  7758                           	opt stack 0
  7759  0016CC                     ___ftpack:
  7760                           	opt stack 21
  7761                           
  7762                           ;incstack = 0
  7763  0016CC  5004               	movf	___ftpack@exp,w,c
  7764  0016CE  B4D8               	btfsc	status,2,c
  7765  0016D0  D005               	goto	i2l2838
  7766  0016D2  5001               	movf	___ftpack@arg,w,c
  7767  0016D4  1002               	iorwf	___ftpack@arg+1,w,c
  7768  0016D6  1003               	iorwf	___ftpack@arg+2,w,c
  7769  0016D8  A4D8               	btfss	status,2,c
  7770  0016DA  D00C               	goto	i2l2844
  7771  0016DC                     i2l2838:
  7772  0016DC  0E00               	movlw	0
  7773  0016DE  6E01               	movwf	?___ftpack,c
  7774  0016E0  0E00               	movlw	0
  7775  0016E2  6E02               	movwf	?___ftpack+1,c
  7776  0016E4  0E00               	movlw	0
  7777  0016E6  6E03               	movwf	?___ftpack+2,c
  7778  0016E8  0012               	return	
  7779  0016EA                     i2l2842:
  7780  0016EA  2A04               	incf	___ftpack@exp,f,c
  7781  0016EC  90D8               	bcf	status,0,c
  7782  0016EE  3203               	rrcf	___ftpack@arg+2,f,c
  7783  0016F0  3202               	rrcf	___ftpack@arg+1,f,c
  7784  0016F2  3201               	rrcf	___ftpack@arg,f,c
  7785  0016F4                     i2l2844:
  7786  0016F4  0E00               	movlw	0
  7787  0016F6  1401               	andwf	___ftpack@arg,w,c
  7788  0016F8  6E06               	movwf	??___ftpack& (0+255),c
  7789  0016FA  0E00               	movlw	0
  7790  0016FC  1402               	andwf	___ftpack@arg+1,w,c
  7791  0016FE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7792  001700  0EFE               	movlw	254
  7793  001702  1403               	andwf	___ftpack@arg+2,w,c
  7794  001704  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7795  001706  5006               	movf	??___ftpack,w,c
  7796  001708  1007               	iorwf	??___ftpack+1,w,c
  7797  00170A  1008               	iorwf	??___ftpack+2,w,c
  7798  00170C  B4D8               	btfsc	status,2,c
  7799  00170E  D00C               	goto	i2l2850
  7800  001710  D7EC               	goto	i2l2842
  7801  001712                     i2l2846:
  7802  001712  2A04               	incf	___ftpack@exp,f,c
  7803  001714  0E01               	movlw	1
  7804  001716  2601               	addwf	___ftpack@arg,f,c
  7805  001718  0E00               	movlw	0
  7806  00171A  2202               	addwfc	___ftpack@arg+1,f,c
  7807  00171C  0E00               	movlw	0
  7808  00171E  2203               	addwfc	___ftpack@arg+2,f,c
  7809  001720  90D8               	bcf	status,0,c
  7810  001722  3203               	rrcf	___ftpack@arg+2,f,c
  7811  001724  3202               	rrcf	___ftpack@arg+1,f,c
  7812  001726  3201               	rrcf	___ftpack@arg,f,c
  7813  001728                     i2l2850:
  7814  001728  0E00               	movlw	0
  7815  00172A  1401               	andwf	___ftpack@arg,w,c
  7816  00172C  6E06               	movwf	??___ftpack& (0+255),c
  7817  00172E  0E00               	movlw	0
  7818  001730  1402               	andwf	___ftpack@arg+1,w,c
  7819  001732  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7820  001734  0EFF               	movlw	255
  7821  001736  1403               	andwf	___ftpack@arg+2,w,c
  7822  001738  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7823  00173A  5006               	movf	??___ftpack,w,c
  7824  00173C  1007               	iorwf	??___ftpack+1,w,c
  7825  00173E  1008               	iorwf	??___ftpack+2,w,c
  7826  001740  B4D8               	btfsc	status,2,c
  7827  001742  D006               	goto	i2l2854
  7828  001744  D7E6               	goto	i2l2846
  7829  001746                     i2l2852:
  7830  001746  0604               	decf	___ftpack@exp,f,c
  7831  001748  90D8               	bcf	status,0,c
  7832  00174A  3601               	rlcf	___ftpack@arg,f,c
  7833  00174C  3602               	rlcf	___ftpack@arg+1,f,c
  7834  00174E  3603               	rlcf	___ftpack@arg+2,f,c
  7835  001750                     i2l2854:
  7836  001750  BE02               	btfsc	___ftpack@arg+1,7,c
  7837  001752  D003               	goto	i2l744
  7838  001754  0E02               	movlw	2
  7839  001756  6004               	cpfslt	___ftpack@exp,c
  7840  001758  D7F6               	goto	i2l2852
  7841  00175A                     i2l744:
  7842  00175A  A004               	btfss	___ftpack@exp,0,c
  7843  00175C  9E02               	bcf	___ftpack@arg+1,7,c
  7844  00175E  90D8               	bcf	status,0,c
  7845  001760  3204               	rrcf	___ftpack@exp,f,c
  7846  001762  5004               	movf	___ftpack@exp,w,c
  7847  001764  1203               	iorwf	___ftpack@arg+2,f,c
  7848  001766  5005               	movf	___ftpack@sign,w,c
  7849  001768  A4D8               	btfss	status,2,c
  7850  00176A  8E03               	bsf	___ftpack@arg+2,7,c
  7851  00176C  C001  F001         	movff	___ftpack@arg,?___ftpack
  7852  001770  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7853  001774  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7854  001778  0012               	return	
  7855  00177A                     __end_of___ftpack:
  7856                           	opt stack 0
  7857                           pclatu	equ	0xFFB
  7858                           pclath	equ	0xFFA
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon2	equ	0xFF1
  7867                           intcon3	equ	0xFF0
  7868                           postinc0	equ	0xFEE
  7869                           fsr0h	equ	0xFEA
  7870                           fsr0l	equ	0xFE9
  7871                           wreg	equ	0xFE8
  7872                           plusw1	equ	0xFE3
  7873                           fsr1h	equ	0xFE2
  7874                           fsr1l	equ	0xFE1
  7875                           indf2	equ	0xFDF
  7876                           postinc2	equ	0xFDE
  7877                           postdec2	equ	0xFDD
  7878                           plusw2	equ	0xFDB
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _AD *****************
  7884 ;; Defined at:
  7885 ;;		line 4 in file "sensors.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  channel         1    wreg     unsigned char 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  channel         1    4[COMRAM] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  2    0[COMRAM] int 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;Total ram usage:        5 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_checkV
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text43
  7913  001FC0                     __ptext43:
  7914                           	opt stack 0
  7915  001FC0                     _AD:
  7916                           	opt stack 22
  7917                           
  7918                           ;incstack = 0
  7919                           ;AD@channel stored from wreg
  7920  001FC0  6E05               	movwf	AD@channel,c
  7921                           
  7922                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  7923  001FC2  4405               	rlncf	AD@channel,w,c
  7924  001FC4  46E8               	rlncf	wreg,f,c
  7925  001FC6  0BFC               	andlw	252
  7926  001FC8  6EC2               	movwf	4034,c	;volatile
  7927                           
  7928                           ;sensors.c: 7: ADON = 1;
  7929  001FCA  80C2               	bsf	4034,0,c	;volatile
  7930                           
  7931                           ;sensors.c: 8: ADCON0bits.GO = 1;
  7932  001FCC  82C2               	bsf	4034,1,c	;volatile
  7933  001FCE                     i2l298:
  7934  001FCE  B2C2               	btfsc	4034,1,c	;volatile
  7935  001FD0  D7FE               	goto	i2l298
  7936                           
  7937                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  7938  001FD2  50C3               	movf	4035,w,c	;volatile
  7939  001FD4  CFC4 F003          	movff	4036,??_AD	;volatile
  7940  001FD8  6A04               	clrf	(??_AD+1)& (0+255),c
  7941  001FDA  C003  F004         	movff	??_AD,??_AD+1
  7942  001FDE  6A03               	clrf	??_AD,c
  7943  001FE0  1003               	iorwf	??_AD,w,c
  7944  001FE2  6E01               	movwf	?_AD,c
  7945  001FE4  5004               	movf	??_AD+1,w,c
  7946  001FE6  6E02               	movwf	?_AD+1,c
  7947  001FE8  0012               	return	
  7948  001FEA                     __end_of_AD:
  7949                           	opt stack 0
  7950                           pclatu	equ	0xFFB
  7951                           pclath	equ	0xFFA
  7952                           tblptru	equ	0xFF8
  7953                           tblptrh	equ	0xFF7
  7954                           tblptrl	equ	0xFF6
  7955                           tablat	equ	0xFF5
  7956                           prodh	equ	0xFF4
  7957                           prodl	equ	0xFF3
  7958                           intcon	equ	0xFF2
  7959                           intcon2	equ	0xFF1
  7960                           intcon3	equ	0xFF0
  7961                           postinc0	equ	0xFEE
  7962                           fsr0h	equ	0xFEA
  7963                           fsr0l	equ	0xFE9
  7964                           wreg	equ	0xFE8
  7965                           plusw1	equ	0xFE3
  7966                           fsr1h	equ	0xFE2
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _WriteRun *****************
  7977 ;; Defined at:
  7978 ;;		line 75 in file "eeprom.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  7981 ;;		 -> simulate@sorted(4), 
  7982 ;;  time            2    8[COMRAM] unsigned int 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  add             2   12[COMRAM] unsigned int 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;Total ram usage:        8 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    1
  8001 ;; This function calls:
  8002 ;;		_WriteEE
  8003 ;;		i2___wmul
  8004 ;; This function is called by:
  8005 ;;		_simulate
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text44
  8010  000C44                     __ptext44:
  8011                           	opt stack 0
  8012  000C44                     _WriteRun:
  8013                           	opt stack 23
  8014                           
  8015                           ;eeprom.c: 76: unsigned int add = ++Latest;
  8016                           
  8017                           ;incstack = 0
  8018  000C44  0100               	movlb	0	; () banked
  8019  000C46  2BC6               	incf	_Latest& (0+255),f,b
  8020  000C48  C0C6  F00D         	movff	_Latest,WriteRun@add
  8021  000C4C  6A0E               	clrf	WriteRun@add+1,c
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;eeprom.c: 77: if (add > 3) {
  8025  000C4E  500E               	movf	WriteRun@add+1,w,c
  8026  000C50  E104               	bnz	i2u287_40
  8027  000C52  0E04               	movlw	4
  8028  000C54  5C0D               	subwf	WriteRun@add,w,c
  8029  000C56  A0D8               	btfss	status,0,c
  8030  000C58  D006               	goto	i2l3906
  8031  000C5A                     i2u287_40:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;eeprom.c: 78: add -= 4;
  8035  000C5A  0E04               	movlw	4
  8036  000C5C  5E0D               	subwf	WriteRun@add,f,c
  8037  000C5E  0E00               	movlw	0
  8038  000C60  5A0E               	subwfb	WriteRun@add+1,f,c
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;eeprom.c: 79: Latest = add;
  8042  000C62  C00D  F0C6         	movff	WriteRun@add,_Latest
  8043  000C66                     i2l3906:
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;eeprom.c: 80: }
  8047                           ;eeprom.c: 81: add *= 5;
  8048  000C66  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  8049  000C6A  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  8050  000C6E  0E00               	movlw	0
  8051  000C70  6E04               	movwf	i2___wmul@multiplicand+1,c
  8052  000C72  0E05               	movlw	5
  8053  000C74  6E03               	movwf	i2___wmul@multiplicand,c
  8054  000C76  EC2E  F010         	call	i2___wmul	;wreg free
  8055  000C7A  C001  F00D         	movff	?i2___wmul,WriteRun@add
  8056  000C7E  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  8057                           
  8058                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  8059  000C82  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8060  000C86  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8061  000C8A  90D8               	bcf	status,0,c
  8062  000C8C  360B               	rlcf	??_WriteRun,f,c
  8063  000C8E  360C               	rlcf	??_WriteRun+1,f,c
  8064  000C90  90D8               	bcf	status,0,c
  8065  000C92  360B               	rlcf	??_WriteRun,f,c
  8066  000C94  360C               	rlcf	??_WriteRun+1,f,c
  8067  000C96  90D8               	bcf	status,0,c
  8068  000C98  360B               	rlcf	??_WriteRun,f,c
  8069  000C9A  360C               	rlcf	??_WriteRun+1,f,c
  8070  000C9C  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8071  000CA0  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8072  000CA4  C009  F003         	movff	WriteRun@time,WriteEE@data
  8073  000CA8  EC1B  F010         	call	_WriteEE	;wreg free
  8074  000CAC  4A0D               	infsnz	WriteRun@add,f,c
  8075  000CAE  2A0E               	incf	WriteRun@add+1,f,c
  8076                           
  8077                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  8078  000CB0  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8079  000CB4  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8080  000CB8  90D8               	bcf	status,0,c
  8081  000CBA  360B               	rlcf	??_WriteRun,f,c
  8082  000CBC  360C               	rlcf	??_WriteRun+1,f,c
  8083  000CBE  90D8               	bcf	status,0,c
  8084  000CC0  360B               	rlcf	??_WriteRun,f,c
  8085  000CC2  360C               	rlcf	??_WriteRun+1,f,c
  8086  000CC4  90D8               	bcf	status,0,c
  8087  000CC6  360B               	rlcf	??_WriteRun,f,c
  8088  000CC8  360C               	rlcf	??_WriteRun+1,f,c
  8089  000CCA  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8090  000CCE  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8091  000CD2  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8092  000CD6  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8093  000CDA  50DF               	movf	indf2,w,c
  8094  000CDC  6E03               	movwf	WriteEE@data,c
  8095  000CDE  EC1B  F010         	call	_WriteEE	;wreg free
  8096  000CE2  4A0D               	infsnz	WriteRun@add,f,c
  8097  000CE4  2A0E               	incf	WriteRun@add+1,f,c
  8098                           
  8099                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  8100  000CE6  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8101  000CEA  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8102  000CEE  90D8               	bcf	status,0,c
  8103  000CF0  360B               	rlcf	??_WriteRun,f,c
  8104  000CF2  360C               	rlcf	??_WriteRun+1,f,c
  8105  000CF4  90D8               	bcf	status,0,c
  8106  000CF6  360B               	rlcf	??_WriteRun,f,c
  8107  000CF8  360C               	rlcf	??_WriteRun+1,f,c
  8108  000CFA  90D8               	bcf	status,0,c
  8109  000CFC  360B               	rlcf	??_WriteRun,f,c
  8110  000CFE  360C               	rlcf	??_WriteRun+1,f,c
  8111  000D00  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8112  000D04  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8113  000D08  EE20 F001          	lfsr	2,1
  8114  000D0C  5007               	movf	WriteRun@sorted,w,c
  8115  000D0E  26D9               	addwf	fsr2l,f,c
  8116  000D10  5008               	movf	WriteRun@sorted+1,w,c
  8117  000D12  22DA               	addwfc	fsr2h,f,c
  8118  000D14  50DF               	movf	indf2,w,c
  8119  000D16  6E03               	movwf	WriteEE@data,c
  8120  000D18  EC1B  F010         	call	_WriteEE	;wreg free
  8121  000D1C  4A0D               	infsnz	WriteRun@add,f,c
  8122  000D1E  2A0E               	incf	WriteRun@add+1,f,c
  8123                           
  8124                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  8125  000D20  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8126  000D24  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8127  000D28  90D8               	bcf	status,0,c
  8128  000D2A  360B               	rlcf	??_WriteRun,f,c
  8129  000D2C  360C               	rlcf	??_WriteRun+1,f,c
  8130  000D2E  90D8               	bcf	status,0,c
  8131  000D30  360B               	rlcf	??_WriteRun,f,c
  8132  000D32  360C               	rlcf	??_WriteRun+1,f,c
  8133  000D34  90D8               	bcf	status,0,c
  8134  000D36  360B               	rlcf	??_WriteRun,f,c
  8135  000D38  360C               	rlcf	??_WriteRun+1,f,c
  8136  000D3A  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8137  000D3E  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8138  000D42  EE20 F002          	lfsr	2,2
  8139  000D46  5007               	movf	WriteRun@sorted,w,c
  8140  000D48  26D9               	addwf	fsr2l,f,c
  8141  000D4A  5008               	movf	WriteRun@sorted+1,w,c
  8142  000D4C  22DA               	addwfc	fsr2h,f,c
  8143  000D4E  50DF               	movf	indf2,w,c
  8144  000D50  6E03               	movwf	WriteEE@data,c
  8145  000D52  EC1B  F010         	call	_WriteEE	;wreg free
  8146  000D56  4A0D               	infsnz	WriteRun@add,f,c
  8147  000D58  2A0E               	incf	WriteRun@add+1,f,c
  8148                           
  8149                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  8150  000D5A  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8151  000D5E  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8152  000D62  90D8               	bcf	status,0,c
  8153  000D64  360B               	rlcf	??_WriteRun,f,c
  8154  000D66  360C               	rlcf	??_WriteRun+1,f,c
  8155  000D68  90D8               	bcf	status,0,c
  8156  000D6A  360B               	rlcf	??_WriteRun,f,c
  8157  000D6C  360C               	rlcf	??_WriteRun+1,f,c
  8158  000D6E  90D8               	bcf	status,0,c
  8159  000D70  360B               	rlcf	??_WriteRun,f,c
  8160  000D72  360C               	rlcf	??_WriteRun+1,f,c
  8161  000D74  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8162  000D78  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8163  000D7C  EE20 F003          	lfsr	2,3
  8164  000D80  5007               	movf	WriteRun@sorted,w,c
  8165  000D82  26D9               	addwf	fsr2l,f,c
  8166  000D84  5008               	movf	WriteRun@sorted+1,w,c
  8167  000D86  22DA               	addwfc	fsr2h,f,c
  8168  000D88  50DF               	movf	indf2,w,c
  8169  000D8A  6E03               	movwf	WriteEE@data,c
  8170  000D8C  EC1B  F010         	call	_WriteEE	;wreg free
  8171  000D90  4A0D               	infsnz	WriteRun@add,f,c
  8172  000D92  2A0E               	incf	WriteRun@add+1,f,c
  8173                           
  8174                           ;eeprom.c: 87: WriteEE(160, Latest);
  8175  000D94  0E00               	movlw	0
  8176  000D96  6E02               	movwf	WriteEE@address+1,c
  8177  000D98  0EA0               	movlw	160
  8178  000D9A  6E01               	movwf	WriteEE@address,c
  8179  000D9C  C0C6  F003         	movff	_Latest,WriteEE@data
  8180  000DA0  EC1B  F010         	call	_WriteEE	;wreg free
  8181  000DA4  0012               	return		;funcret
  8182  000DA6                     __end_of_WriteRun:
  8183                           	opt stack 0
  8184                           pclatu	equ	0xFFB
  8185                           pclath	equ	0xFFA
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           prodh	equ	0xFF4
  8191                           prodl	equ	0xFF3
  8192                           intcon	equ	0xFF2
  8193                           intcon2	equ	0xFF1
  8194                           intcon3	equ	0xFF0
  8195                           postinc0	equ	0xFEE
  8196                           fsr0h	equ	0xFEA
  8197                           fsr0l	equ	0xFE9
  8198                           wreg	equ	0xFE8
  8199                           plusw1	equ	0xFE3
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           plusw2	equ	0xFDB
  8206                           fsr2h	equ	0xFDA
  8207                           fsr2l	equ	0xFD9
  8208                           status	equ	0xFD8
  8209                           
  8210 ;; *************** function _WriteEE *****************
  8211 ;; Defined at:
  8212 ;;		line 34 in file "eeprom.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  address         2    0[COMRAM] unsigned int 
  8215 ;;  data            1    2[COMRAM] unsigned char 
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;		None
  8218 ;; Return value:  Size  Location     Type
  8219 ;;                  1    wreg      void 
  8220 ;; Registers used:
  8221 ;;		wreg, status,2
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;Total ram usage:        3 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_WriteRun
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text45
  8241  002036                     __ptext45:
  8242                           	opt stack 0
  8243  002036                     _WriteEE:
  8244                           	opt stack 23
  8245                           
  8246                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  8247                           
  8248                           ;incstack = 0
  8249  002036  5002               	movf	WriteEE@address+1,w,c
  8250  002038  6EAA               	movwf	4010,c	;volatile
  8251                           
  8252                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  8253  00203A  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  8254                           
  8255                           ;eeprom.c: 39: EEDATA = data;
  8256  00203E  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  8257                           
  8258                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  8259  002042  9EA6               	bcf	4006,7,c	;volatile
  8260                           
  8261                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  8262  002044  9CA6               	bcf	4006,6,c	;volatile
  8263                           
  8264                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  8265  002046  84A6               	bsf	4006,2,c	;volatile
  8266                           
  8267                           ;eeprom.c: 46: EECON2 = 0x55;
  8268  002048  0E55               	movlw	85
  8269  00204A  6EA7               	movwf	4007,c	;volatile
  8270                           
  8271                           ;eeprom.c: 47: EECON2 = 0xAA;
  8272  00204C  0EAA               	movlw	170
  8273  00204E  6EA7               	movwf	4007,c	;volatile
  8274                           
  8275                           ;eeprom.c: 48: EECON1bits.WR = 1;
  8276  002050  82A6               	bsf	4006,1,c	;volatile
  8277  002052                     i2l429:
  8278  002052  A8A1               	btfss	4001,4,c	;volatile
  8279  002054  D7FE               	goto	i2l429
  8280                           
  8281                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  8282  002056  98A1               	bcf	4001,4,c	;volatile
  8283                           
  8284                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  8285  002058  94A6               	bcf	4006,2,c	;volatile
  8286  00205A  0012               	return		;funcret
  8287  00205C                     __end_of_WriteEE:
  8288                           	opt stack 0
  8289                           pclatu	equ	0xFFB
  8290                           pclath	equ	0xFFA
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           intcon2	equ	0xFF1
  8299                           intcon3	equ	0xFF0
  8300                           postinc0	equ	0xFEE
  8301                           fsr0h	equ	0xFEA
  8302                           fsr0l	equ	0xFE9
  8303                           wreg	equ	0xFE8
  8304                           plusw1	equ	0xFE3
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           plusw2	equ	0xFDB
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function _HexDecToDec2 *****************
  8316 ;; Defined at:
  8317 ;;		line 6 in file "modules.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  hex             2    6[COMRAM] unsigned int 
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;  digit           2   13[COMRAM] unsigned int 
  8322 ;;  tenth           2   11[COMRAM] unsigned int 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  2    6[COMRAM] unsigned int 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;Total ram usage:        9 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:    1
  8339 ;; This function calls:
  8340 ;;		i2___wmul
  8341 ;; This function is called by:
  8342 ;;		_simulate
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text46
  8347  001DF4                     __ptext46:
  8348                           	opt stack 0
  8349  001DF4                     _HexDecToDec2:
  8350                           	opt stack 23
  8351                           
  8352                           ;modules.c: 8: unsigned tenth = hex / 16;
  8353                           
  8354                           ;incstack = 0
  8355  001DF4  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  8356  001DF8  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  8357  001DFC  0E04               	movlw	4
  8358  001DFE  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  8359  001E00                     i2u284_45:
  8360  001E00  90D8               	bcf	status,0,c
  8361  001E02  320A               	rrcf	??_HexDecToDec2+1,f,c
  8362  001E04  3209               	rrcf	??_HexDecToDec2,f,c
  8363  001E06  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  8364  001E08  D7FB               	goto	i2u284_45
  8365  001E0A  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  8366  001E0E  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  8367                           
  8368                           ;modules.c: 9: unsigned digit = hex % 16;
  8369  001E12  0E0F               	movlw	15
  8370  001E14  1407               	andwf	HexDecToDec2@hex,w,c
  8371  001E16  6E0E               	movwf	HexDecToDec2@digit,c
  8372  001E18  6A0F               	clrf	HexDecToDec2@digit+1,c
  8373                           
  8374                           ;modules.c: 10: return tenth * 10 + digit;
  8375  001E1A  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  8376  001E1E  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  8377  001E22  0E00               	movlw	0
  8378  001E24  6E04               	movwf	i2___wmul@multiplicand+1,c
  8379  001E26  0E0A               	movlw	10
  8380  001E28  6E03               	movwf	i2___wmul@multiplicand,c
  8381  001E2A  EC2E  F010         	call	i2___wmul	;wreg free
  8382  001E2E  500E               	movf	HexDecToDec2@digit,w,c
  8383  001E30  2401               	addwf	?i2___wmul,w,c
  8384  001E32  6E07               	movwf	?_HexDecToDec2,c
  8385  001E34  500F               	movf	HexDecToDec2@digit+1,w,c
  8386  001E36  2002               	addwfc	?i2___wmul+1,w,c
  8387  001E38  6E08               	movwf	?_HexDecToDec2+1,c
  8388  001E3A  0012               	return	
  8389  001E3C                     __end_of_HexDecToDec2:
  8390                           	opt stack 0
  8391                           pclatu	equ	0xFFB
  8392                           pclath	equ	0xFFA
  8393                           tblptru	equ	0xFF8
  8394                           tblptrh	equ	0xFF7
  8395                           tblptrl	equ	0xFF6
  8396                           tablat	equ	0xFF5
  8397                           prodh	equ	0xFF4
  8398                           prodl	equ	0xFF3
  8399                           intcon	equ	0xFF2
  8400                           intcon2	equ	0xFF1
  8401                           intcon3	equ	0xFF0
  8402                           postinc0	equ	0xFEE
  8403                           fsr0h	equ	0xFEA
  8404                           fsr0l	equ	0xFE9
  8405                           wreg	equ	0xFE8
  8406                           plusw1	equ	0xFE3
  8407                           fsr1h	equ	0xFE2
  8408                           fsr1l	equ	0xFE1
  8409                           indf2	equ	0xFDF
  8410                           postinc2	equ	0xFDE
  8411                           postdec2	equ	0xFDD
  8412                           plusw2	equ	0xFDB
  8413                           fsr2h	equ	0xFDA
  8414                           fsr2l	equ	0xFD9
  8415                           status	equ	0xFD8
  8416                           
  8417 ;; *************** function _CW90 *****************
  8418 ;; Defined at:
  8419 ;;		line 19 in file "motors.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;  port            2   21[COMRAM] PTR int 
  8422 ;;		 -> simulate@portCW(6), 
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;		None
  8425 ;; Return value:  Size  Location     Type
  8426 ;;                  1    wreg      void 
  8427 ;; Registers used:
  8428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/0
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8434 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;Total ram usage:        2 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    2
  8441 ;; This function calls:
  8442 ;;		_PWMC
  8443 ;; This function is called by:
  8444 ;;		_simulate
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text47
  8449  0020A4                     __ptext47:
  8450                           	opt stack 0
  8451  0020A4                     _CW90:
  8452                           	opt stack 22
  8453                           
  8454                           ;motors.c: 21: PWMC(3000, 96, port);
  8455                           
  8456                           ;incstack = 0
  8457  0020A4  0E0B               	movlw	11
  8458  0020A6  6E0A               	movwf	PWMC@widthus+1,c
  8459  0020A8  0EB8               	movlw	184
  8460  0020AA  6E09               	movwf	PWMC@widthus,c
  8461  0020AC  0E00               	movlw	0
  8462  0020AE  6E0C               	movwf	PWMC@cycles+1,c
  8463  0020B0  0E60               	movlw	96
  8464  0020B2  6E0B               	movwf	PWMC@cycles,c
  8465  0020B4  C016  F00D         	movff	CW90@port,PWMC@port
  8466  0020B8  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  8467  0020BC  EC10  F009         	call	_PWMC	;wreg free
  8468  0020C0  0012               	return		;funcret
  8469  0020C2                     __end_of_CW90:
  8470                           	opt stack 0
  8471                           pclatu	equ	0xFFB
  8472                           pclath	equ	0xFFA
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodh	equ	0xFF4
  8478                           prodl	equ	0xFF3
  8479                           intcon	equ	0xFF2
  8480                           intcon2	equ	0xFF1
  8481                           intcon3	equ	0xFF0
  8482                           postinc0	equ	0xFEE
  8483                           fsr0h	equ	0xFEA
  8484                           fsr0l	equ	0xFE9
  8485                           wreg	equ	0xFE8
  8486                           plusw1	equ	0xFE3
  8487                           fsr1h	equ	0xFE2
  8488                           fsr1l	equ	0xFE1
  8489                           indf2	equ	0xFDF
  8490                           postinc2	equ	0xFDE
  8491                           postdec2	equ	0xFDD
  8492                           plusw2	equ	0xFDB
  8493                           fsr2h	equ	0xFDA
  8494                           fsr2l	equ	0xFD9
  8495                           status	equ	0xFD8
  8496                           
  8497 ;; *************** function _CCW90 *****************
  8498 ;; Defined at:
  8499 ;;		line 24 in file "motors.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  port            2   21[COMRAM] PTR int 
  8502 ;;		 -> simulate@portCCW(6), 
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;		None
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  1    wreg      void 
  8507 ;; Registers used:
  8508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;Total ram usage:        2 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    2
  8521 ;; This function calls:
  8522 ;;		_PWMC
  8523 ;; This function is called by:
  8524 ;;		_simulate
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text48
  8529  0020C2                     __ptext48:
  8530                           	opt stack 0
  8531  0020C2                     _CCW90:
  8532                           	opt stack 22
  8533                           
  8534                           ;motors.c: 26: PWMC(300, 1400, port);
  8535                           
  8536                           ;incstack = 0
  8537  0020C2  0E01               	movlw	1
  8538  0020C4  6E0A               	movwf	PWMC@widthus+1,c
  8539  0020C6  0E2C               	movlw	44
  8540  0020C8  6E09               	movwf	PWMC@widthus,c
  8541  0020CA  0E05               	movlw	5
  8542  0020CC  6E0C               	movwf	PWMC@cycles+1,c
  8543  0020CE  0E78               	movlw	120
  8544  0020D0  6E0B               	movwf	PWMC@cycles,c
  8545  0020D2  C016  F00D         	movff	CCW90@port,PWMC@port
  8546  0020D6  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  8547  0020DA  EC10  F009         	call	_PWMC	;wreg free
  8548  0020DE  0012               	return		;funcret
  8549  0020E0                     __end_of_CCW90:
  8550                           	opt stack 0
  8551                           pclatu	equ	0xFFB
  8552                           pclath	equ	0xFFA
  8553                           tblptru	equ	0xFF8
  8554                           tblptrh	equ	0xFF7
  8555                           tblptrl	equ	0xFF6
  8556                           tablat	equ	0xFF5
  8557                           prodh	equ	0xFF4
  8558                           prodl	equ	0xFF3
  8559                           intcon	equ	0xFF2
  8560                           intcon2	equ	0xFF1
  8561                           intcon3	equ	0xFF0
  8562                           postinc0	equ	0xFEE
  8563                           fsr0h	equ	0xFEA
  8564                           fsr0l	equ	0xFE9
  8565                           wreg	equ	0xFE8
  8566                           plusw1	equ	0xFE3
  8567                           fsr1h	equ	0xFE2
  8568                           fsr1l	equ	0xFE1
  8569                           indf2	equ	0xFDF
  8570                           postinc2	equ	0xFDE
  8571                           postdec2	equ	0xFDD
  8572                           plusw2	equ	0xFDB
  8573                           fsr2h	equ	0xFDA
  8574                           fsr2l	equ	0xFD9
  8575                           status	equ	0xFD8
  8576                           
  8577 ;; *************** function _PWMC *****************
  8578 ;; Defined at:
  8579 ;;		line 4 in file "motors.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  widthus         2    8[COMRAM] int 
  8582 ;;  cycles          2   10[COMRAM] int 
  8583 ;;  port            2   12[COMRAM] PTR int 
  8584 ;;		 -> simulate@portCCW(6), simulate@portCW(6), 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;  countdown       2   19[COMRAM] int 
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  1    wreg      void 
  8589 ;; Registers used:
  8590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 0/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8596 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;Total ram usage:       13 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; Hardware stack levels required when called:    1
  8603 ;; This function calls:
  8604 ;;		___awdiv
  8605 ;; This function is called by:
  8606 ;;		_CW90
  8607 ;;		_CCW90
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text49
  8612  001220                     __ptext49:
  8613                           	opt stack 0
  8614  001220                     _PWMC:
  8615                           	opt stack 22
  8616                           
  8617                           ;motors.c: 5: widthus /= 10;
  8618                           
  8619                           ;incstack = 0
  8620  001220  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  8621  001224  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  8622  001228  0E00               	movlw	0
  8623  00122A  6E04               	movwf	___awdiv@divisor+1,c
  8624  00122C  0E0A               	movlw	10
  8625  00122E  6E03               	movwf	___awdiv@divisor,c
  8626  001230  EC8D  F00C         	call	___awdiv	;wreg free
  8627  001234  C001  F009         	movff	?___awdiv,PWMC@widthus
  8628  001238  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  8629                           
  8630                           ;motors.c: 6: widthus -= 1;
  8631  00123C  0609               	decf	PWMC@widthus,f,c
  8632  00123E  A0D8               	btfss	status,0,c
  8633  001240  060A               	decf	PWMC@widthus+1,f,c
  8634                           
  8635                           ;motors.c: 7: int countdown = widthus;
  8636  001242  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8637  001246  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8638  00124A                     i2l3208:
  8639  00124A  BE0C               	btfsc	PWMC@cycles+1,7,c
  8640  00124C  0012               	return	
  8641  00124E  500C               	movf	PWMC@cycles+1,w,c
  8642  001250  E103               	bnz	i2l262
  8643  001252  040B               	decf	PWMC@cycles,w,c
  8644  001254  A0D8               	btfss	status,0,c
  8645  001256  0012               	return	
  8646  001258                     i2l262:
  8647                           
  8648                           ;motors.c: 9: countdown = widthus;
  8649  001258  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8650  00125C  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8651                           
  8652                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  8653  001260  0E00               	movlw	0
  8654  001262  6E11               	movwf	_PWMC$1399,c
  8655  001264  B08B               	btfsc	3979,0,c	;volatile
  8656  001266  D00D               	goto	i2l3220
  8657  001268  C00D  FFD9         	movff	PWMC@port,fsr2l
  8658  00126C  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  8659  001270  CFDE F00F          	movff	postinc2,??_PWMC
  8660  001274  CFDD F010          	movff	postdec2,??_PWMC+1
  8661  001278  300F               	rrcf	??_PWMC,w,c
  8662  00127A  A0D8               	btfss	status,0,c
  8663  00127C  D002               	goto	i2l3220
  8664  00127E  0E01               	movlw	1
  8665  001280  6E11               	movwf	_PWMC$1399,c
  8666  001282                     i2l3220:
  8667  001282  B011               	btfsc	_PWMC$1399,0,c
  8668  001284  D002               	bra	i2u205_45
  8669  001286  908B               	bcf	3979,0,c	;volatile
  8670  001288  D001               	bra	i2u205_46
  8671  00128A                     i2u205_45:
  8672  00128A  808B               	bsf	3979,0,c	;volatile
  8673  00128C                     i2u205_46:
  8674                           
  8675                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
  8676  00128C  0E00               	movlw	0
  8677  00128E  6E12               	movwf	_PWMC$1400,c
  8678  001290  B28B               	btfsc	3979,1,c	;volatile
  8679  001292  D00F               	goto	i2l3228
  8680  001294  EE20 F002          	lfsr	2,2
  8681  001298  500D               	movf	PWMC@port,w,c
  8682  00129A  26D9               	addwf	fsr2l,f,c
  8683  00129C  500E               	movf	PWMC@port+1,w,c
  8684  00129E  22DA               	addwfc	fsr2h,f,c
  8685  0012A0  CFDE F00F          	movff	postinc2,??_PWMC
  8686  0012A4  CFDD F010          	movff	postdec2,??_PWMC+1
  8687  0012A8  300F               	rrcf	??_PWMC,w,c
  8688  0012AA  A0D8               	btfss	status,0,c
  8689  0012AC  D002               	goto	i2l3228
  8690  0012AE  0E01               	movlw	1
  8691  0012B0  6E12               	movwf	_PWMC$1400,c
  8692  0012B2                     i2l3228:
  8693  0012B2  B012               	btfsc	_PWMC$1400,0,c
  8694  0012B4  D002               	bra	i2u208_45
  8695  0012B6  928B               	bcf	3979,1,c	;volatile
  8696  0012B8  D001               	bra	i2u208_46
  8697  0012BA                     i2u208_45:
  8698  0012BA  828B               	bsf	3979,1,c	;volatile
  8699  0012BC                     i2u208_46:
  8700                           
  8701                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
  8702  0012BC  0E00               	movlw	0
  8703  0012BE  6E13               	movwf	_PWMC$1401,c
  8704  0012C0  B48B               	btfsc	3979,2,c	;volatile
  8705  0012C2  D00F               	goto	i2l3236
  8706  0012C4  EE20 F004          	lfsr	2,4
  8707  0012C8  500D               	movf	PWMC@port,w,c
  8708  0012CA  26D9               	addwf	fsr2l,f,c
  8709  0012CC  500E               	movf	PWMC@port+1,w,c
  8710  0012CE  22DA               	addwfc	fsr2h,f,c
  8711  0012D0  CFDE F00F          	movff	postinc2,??_PWMC
  8712  0012D4  CFDD F010          	movff	postdec2,??_PWMC+1
  8713  0012D8  300F               	rrcf	??_PWMC,w,c
  8714  0012DA  A0D8               	btfss	status,0,c
  8715  0012DC  D002               	goto	i2l3236
  8716  0012DE  0E01               	movlw	1
  8717  0012E0  6E13               	movwf	_PWMC$1401,c
  8718  0012E2                     i2l3236:
  8719  0012E2  B013               	btfsc	_PWMC$1401,0,c
  8720  0012E4  D002               	bra	i2u211_45
  8721  0012E6  948B               	bcf	3979,2,c	;volatile
  8722  0012E8  D001               	bra	i2u211_46
  8723  0012EA                     i2u211_45:
  8724  0012EA  848B               	bsf	3979,2,c	;volatile
  8725  0012EC                     i2u211_46:
  8726  0012EC                     i2l3238:
  8727  0012EC  BE15               	btfsc	PWMC@countdown+1,7,c
  8728  0012EE  D00D               	goto	i2l3246
  8729  0012F0  5015               	movf	PWMC@countdown+1,w,c
  8730  0012F2  E103               	bnz	i2l3242
  8731  0012F4  0414               	decf	PWMC@countdown,w,c
  8732  0012F6  A0D8               	btfss	status,0,c
  8733  0012F8  D008               	goto	i2l3246
  8734  0012FA                     i2l3242:
  8735                           
  8736                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
  8737  0012FA  0E03               	movlw	3
  8738  0012FC                     i2u316_47:
  8739  0012FC  2EE8               	decfsz	wreg,f,c
  8740  0012FE  D7FE               	bra	i2u316_47
  8741  001300  F000               	nop	
  8742  001302  0614               	decf	PWMC@countdown,f,c
  8743  001304  A0D8               	btfss	status,0,c
  8744  001306  0615               	decf	PWMC@countdown+1,f,c
  8745  001308  D7F1               	goto	i2l3238
  8746  00130A                     i2l3246:
  8747  00130A  060B               	decf	PWMC@cycles,f,c
  8748  00130C  A0D8               	btfss	status,0,c
  8749  00130E  060C               	decf	PWMC@cycles+1,f,c
  8750  001310  D79C               	goto	i2l3208
  8751  001312                     __end_of_PWMC:
  8752                           	opt stack 0
  8753                           pclatu	equ	0xFFB
  8754                           pclath	equ	0xFFA
  8755                           tblptru	equ	0xFF8
  8756                           tblptrh	equ	0xFF7
  8757                           tblptrl	equ	0xFF6
  8758                           tablat	equ	0xFF5
  8759                           prodh	equ	0xFF4
  8760                           prodl	equ	0xFF3
  8761                           intcon	equ	0xFF2
  8762                           intcon2	equ	0xFF1
  8763                           intcon3	equ	0xFF0
  8764                           postinc0	equ	0xFEE
  8765                           fsr0h	equ	0xFEA
  8766                           fsr0l	equ	0xFE9
  8767                           wreg	equ	0xFE8
  8768                           plusw1	equ	0xFE3
  8769                           fsr1h	equ	0xFE2
  8770                           fsr1l	equ	0xFE1
  8771                           indf2	equ	0xFDF
  8772                           postinc2	equ	0xFDE
  8773                           postdec2	equ	0xFDD
  8774                           plusw2	equ	0xFDB
  8775                           fsr2h	equ	0xFDA
  8776                           fsr2l	equ	0xFD9
  8777                           status	equ	0xFD8
  8778                           
  8779 ;; *************** function ___awdiv *****************
  8780 ;; Defined at:
  8781 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;  dividend        2    0[COMRAM] int 
  8784 ;;  divisor         2    2[COMRAM] int 
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;  quotient        2    6[COMRAM] int 
  8787 ;;  sign            1    5[COMRAM] unsigned char 
  8788 ;;  counter         1    4[COMRAM] unsigned char 
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  2    0[COMRAM] int 
  8791 ;; Registers used:
  8792 ;;		wreg, status,2, status,0
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;Total ram usage:        8 bytes
  8803 ;; Hardware stack levels used:    1
  8804 ;; This function calls:
  8805 ;;		Nothing
  8806 ;; This function is called by:
  8807 ;;		_PWMC
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text50
  8812  00191A                     __ptext50:
  8813                           	opt stack 0
  8814  00191A                     ___awdiv:
  8815                           	opt stack 22
  8816                           
  8817                           ;incstack = 0
  8818  00191A  0E00               	movlw	0
  8819  00191C  6E06               	movwf	___awdiv@sign,c
  8820  00191E  AE04               	btfss	___awdiv@divisor+1,7,c
  8821  001920  D006               	goto	i2l3030
  8822  001922  6C03               	negf	___awdiv@divisor,c
  8823  001924  1E04               	comf	___awdiv@divisor+1,f,c
  8824  001926  B0D8               	btfsc	status,0,c
  8825  001928  2A04               	incf	___awdiv@divisor+1,f,c
  8826  00192A  0E01               	movlw	1
  8827  00192C  6E06               	movwf	___awdiv@sign,c
  8828  00192E                     i2l3030:
  8829  00192E  AE02               	btfss	___awdiv@dividend+1,7,c
  8830  001930  D006               	goto	i2l3036
  8831  001932  6C01               	negf	___awdiv@dividend,c
  8832  001934  1E02               	comf	___awdiv@dividend+1,f,c
  8833  001936  B0D8               	btfsc	status,0,c
  8834  001938  2A02               	incf	___awdiv@dividend+1,f,c
  8835  00193A  0E01               	movlw	1
  8836  00193C  1A06               	xorwf	___awdiv@sign,f,c
  8837  00193E                     i2l3036:
  8838  00193E  0E00               	movlw	0
  8839  001940  6E08               	movwf	___awdiv@quotient+1,c
  8840  001942  0E00               	movlw	0
  8841  001944  6E07               	movwf	___awdiv@quotient,c
  8842  001946  5003               	movf	___awdiv@divisor,w,c
  8843  001948  1004               	iorwf	___awdiv@divisor+1,w,c
  8844  00194A  B4D8               	btfsc	status,2,c
  8845  00194C  D01C               	goto	i2l3058
  8846  00194E  0E01               	movlw	1
  8847  001950  6E05               	movwf	___awdiv@counter,c
  8848  001952  D004               	goto	i2l3044
  8849  001954                     i2l3042:
  8850  001954  90D8               	bcf	status,0,c
  8851  001956  3603               	rlcf	___awdiv@divisor,f,c
  8852  001958  3604               	rlcf	___awdiv@divisor+1,f,c
  8853  00195A  2A05               	incf	___awdiv@counter,f,c
  8854  00195C                     i2l3044:
  8855  00195C  AE04               	btfss	___awdiv@divisor+1,7,c
  8856  00195E  D7FA               	goto	i2l3042
  8857  001960                     i2l3046:
  8858  001960  90D8               	bcf	status,0,c
  8859  001962  3607               	rlcf	___awdiv@quotient,f,c
  8860  001964  3608               	rlcf	___awdiv@quotient+1,f,c
  8861  001966  5003               	movf	___awdiv@divisor,w,c
  8862  001968  5C01               	subwf	___awdiv@dividend,w,c
  8863  00196A  5004               	movf	___awdiv@divisor+1,w,c
  8864  00196C  5802               	subwfb	___awdiv@dividend+1,w,c
  8865  00196E  A0D8               	btfss	status,0,c
  8866  001970  D005               	goto	i2l3054
  8867  001972  5003               	movf	___awdiv@divisor,w,c
  8868  001974  5E01               	subwf	___awdiv@dividend,f,c
  8869  001976  5004               	movf	___awdiv@divisor+1,w,c
  8870  001978  5A02               	subwfb	___awdiv@dividend+1,f,c
  8871  00197A  8007               	bsf	___awdiv@quotient,0,c
  8872  00197C                     i2l3054:
  8873  00197C  90D8               	bcf	status,0,c
  8874  00197E  3204               	rrcf	___awdiv@divisor+1,f,c
  8875  001980  3203               	rrcf	___awdiv@divisor,f,c
  8876  001982  2E05               	decfsz	___awdiv@counter,f,c
  8877  001984  D7ED               	goto	i2l3046
  8878  001986                     i2l3058:
  8879  001986  5006               	movf	___awdiv@sign,w,c
  8880  001988  B4D8               	btfsc	status,2,c
  8881  00198A  D004               	goto	i2l3062
  8882  00198C  6C07               	negf	___awdiv@quotient,c
  8883  00198E  1E08               	comf	___awdiv@quotient+1,f,c
  8884  001990  B0D8               	btfsc	status,0,c
  8885  001992  2A08               	incf	___awdiv@quotient+1,f,c
  8886  001994                     i2l3062:
  8887  001994  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8888  001998  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8889  00199C  0012               	return	
  8890  00199E                     __end_of___awdiv:
  8891                           	opt stack 0
  8892                           pclatu	equ	0xFFB
  8893                           pclath	equ	0xFFA
  8894                           tblptru	equ	0xFF8
  8895                           tblptrh	equ	0xFF7
  8896                           tblptrl	equ	0xFF6
  8897                           tablat	equ	0xFF5
  8898                           prodh	equ	0xFF4
  8899                           prodl	equ	0xFF3
  8900                           intcon	equ	0xFF2
  8901                           intcon2	equ	0xFF1
  8902                           intcon3	equ	0xFF0
  8903                           postinc0	equ	0xFEE
  8904                           fsr0h	equ	0xFEA
  8905                           fsr0l	equ	0xFE9
  8906                           wreg	equ	0xFE8
  8907                           plusw1	equ	0xFE3
  8908                           fsr1h	equ	0xFE2
  8909                           fsr1l	equ	0xFE1
  8910                           indf2	equ	0xFDF
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           plusw2	equ	0xFDB
  8914                           fsr2h	equ	0xFDA
  8915                           fsr2l	equ	0xFD9
  8916                           status	equ	0xFD8
  8917                           
  8918 ;; *************** function _PermLog *****************
  8919 ;; Defined at:
  8920 ;;		line 90 in file "eeprom.c"
  8921 ;; Parameters:    Size  Location     Type
  8922 ;;  backruns        1    wreg     unsigned char 
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  backruns        1   59[COMRAM] unsigned char 
  8925 ;;  sorted          4   55[COMRAM] unsigned char [4]
  8926 ;;  time            2   60[COMRAM] unsigned int 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:        9 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    4
  8943 ;; This function calls:
  8944 ;;		_ReadRun
  8945 ;;		_showInfo
  8946 ;;		i2_line0
  8947 ;;		i2_line1
  8948 ;;		i2_printf
  8949 ;; This function is called by:
  8950 ;;		_intrpt
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           	psect	text51
  8955  001A1C                     __ptext51:
  8956                           	opt stack 0
  8957  001A1C                     _PermLog:
  8958                           	opt stack 21
  8959                           
  8960                           ;incstack = 0
  8961                           ;PermLog@backruns stored from wreg
  8962  001A1C  6E3C               	movwf	PermLog@backruns,c
  8963                           
  8964                           ;eeprom.c: 91: unsigned int time;
  8965                           ;eeprom.c: 92: unsigned char sorted[] = {0, 0, 0, 0};
  8966  001A1E  C0B6  F038         	movff	PermLog@F3084,PermLog@sorted
  8967  001A22  C0B7  F039         	movff	PermLog@F3084+1,PermLog@sorted+1
  8968  001A26  C0B8  F03A         	movff	PermLog@F3084+2,PermLog@sorted+2
  8969  001A2A  C0B9  F03B         	movff	PermLog@F3084+3,PermLog@sorted+3
  8970                           
  8971                           ;eeprom.c: 93: ReadRun(backruns, sorted, &time);
  8972  001A2E  0E38               	movlw	low PermLog@sorted
  8973  001A30  6E03               	movwf	ReadRun@sorted,c
  8974  001A32  0E00               	movlw	high PermLog@sorted
  8975  001A34  6E04               	movwf	ReadRun@sorted+1,c
  8976  001A36  0E3D               	movlw	low PermLog@time
  8977  001A38  6E05               	movwf	ReadRun@time,c
  8978  001A3A  0E00               	movlw	high PermLog@time
  8979  001A3C  6E06               	movwf	ReadRun@time+1,c
  8980  001A3E  503C               	movf	PermLog@backruns,w,c
  8981  001A40  EC78  F007         	call	_ReadRun
  8982                           
  8983                           ;eeprom.c: 94: line0();
  8984  001A44  EC08  F011         	call	i2_line0	;wreg free
  8985                           
  8986                           ;eeprom.c: 95: printf("showing %u      ", backruns);
  8987  001A48  0EA2               	movlw	low STR_50
  8988  001A4A  6E0D               	movwf	i2printf@f,c
  8989  001A4C  0EFF               	movlw	high STR_50
  8990  001A4E  6E0E               	movwf	i2printf@f+1,c
  8991  001A50  C03C  F00F         	movff	PermLog@backruns,?i2_printf+2
  8992  001A54  6A10               	clrf	?i2_printf+3,c
  8993  001A56  EC91  F003         	call	i2_printf	;wreg free
  8994                           
  8995                           ;eeprom.c: 96: line1();
  8996  001A5A  EC04  F011         	call	i2_line1	;wreg free
  8997                           
  8998                           ;eeprom.c: 97: printf("runs before     ");
  8999  001A5E  0EB3               	movlw	low STR_51
  9000  001A60  6E0D               	movwf	i2printf@f,c
  9001  001A62  0EFF               	movlw	high STR_51
  9002  001A64  6E0E               	movwf	i2printf@f+1,c
  9003  001A66  EC91  F003         	call	i2_printf	;wreg free
  9004                           
  9005                           ;eeprom.c: 98: _delay((unsigned long)((700)*(8000000/4000.0)));
  9006  001A6A  0E08               	movlw	8
  9007  001A6C  6E37               	movwf	(??_PermLog+1)& (0+255),c
  9008  001A6E  0E1B               	movlw	27
  9009  001A70  6E36               	movwf	??_PermLog& (0+255),c
  9010  001A72  0E27               	movlw	39
  9011  001A74                     i2u317_47:
  9012  001A74  2EE8               	decfsz	wreg,f,c
  9013  001A76  D7FE               	bra	i2u317_47
  9014  001A78  2E36               	decfsz	??_PermLog& (0+255),f,c
  9015  001A7A  D7FC               	bra	i2u317_47
  9016  001A7C  2E37               	decfsz	(??_PermLog+1)& (0+255),f,c
  9017  001A7E  D7FA               	bra	i2u317_47
  9018  001A80  F000               	nop	
  9019                           
  9020                           ;eeprom.c: 99: showInfo(time, sorted);
  9021  001A82  C03D  F029         	movff	PermLog@time,showInfo@time
  9022  001A86  C03E  F02A         	movff	PermLog@time+1,showInfo@time+1
  9023  001A8A  0E38               	movlw	low PermLog@sorted
  9024  001A8C  6E2B               	movwf	showInfo@sorted,c
  9025  001A8E  0E00               	movlw	high PermLog@sorted
  9026  001A90  6E2C               	movwf	showInfo@sorted+1,c
  9027  001A92  EC18  F005         	call	_showInfo	;wreg free
  9028  001A96  0012               	return		;funcret
  9029  001A98                     __end_of_PermLog:
  9030                           	opt stack 0
  9031                           pclatu	equ	0xFFB
  9032                           pclath	equ	0xFFA
  9033                           tblptru	equ	0xFF8
  9034                           tblptrh	equ	0xFF7
  9035                           tblptrl	equ	0xFF6
  9036                           tablat	equ	0xFF5
  9037                           prodh	equ	0xFF4
  9038                           prodl	equ	0xFF3
  9039                           intcon	equ	0xFF2
  9040                           intcon2	equ	0xFF1
  9041                           intcon3	equ	0xFF0
  9042                           postinc0	equ	0xFEE
  9043                           fsr0h	equ	0xFEA
  9044                           fsr0l	equ	0xFE9
  9045                           wreg	equ	0xFE8
  9046                           plusw1	equ	0xFE3
  9047                           fsr1h	equ	0xFE2
  9048                           fsr1l	equ	0xFE1
  9049                           indf2	equ	0xFDF
  9050                           postinc2	equ	0xFDE
  9051                           postdec2	equ	0xFDD
  9052                           plusw2	equ	0xFDB
  9053                           fsr2h	equ	0xFDA
  9054                           fsr2l	equ	0xFD9
  9055                           status	equ	0xFD8
  9056                           
  9057 ;; *************** function _showInfo *****************
  9058 ;; Defined at:
  9059 ;;		line 23 in file "modules.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;  time            2   40[COMRAM] unsigned int 
  9062 ;;  sorted          2   42[COMRAM] PTR unsigned char 
  9063 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;  stop            2   51[COMRAM] int 
  9066 ;;  type            2   49[COMRAM] int 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  1    wreg      void 
  9069 ;; Registers used:
  9070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9076 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9080 ;;Total ram usage:       13 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    3
  9083 ;; This function calls:
  9084 ;;		_captureKeypad
  9085 ;;		i2_line0
  9086 ;;		i2_line1
  9087 ;;		i2_printf
  9088 ;; This function is called by:
  9089 ;;		_simulate
  9090 ;;		_PermLog
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text52
  9095  000A30                     __ptext52:
  9096                           	opt stack 0
  9097  000A30                     _showInfo:
  9098                           	opt stack 21
  9099                           
  9100                           ;modules.c: 24: line0();
  9101                           
  9102                           ;incstack = 0
  9103  000A30  EC08  F011         	call	i2_line0	;wreg free
  9104                           
  9105                           ;modules.c: 25: printf("Press a number          ");
  9106  000A34  0E02               	movlw	low STR_22
  9107  000A36  6E0D               	movwf	i2printf@f,c
  9108  000A38  0EFE               	movlw	high STR_22
  9109  000A3A  6E0E               	movwf	i2printf@f+1,c
  9110  000A3C  EC91  F003         	call	i2_printf	;wreg free
  9111                           
  9112                           ;modules.c: 26: line1();
  9113  000A40  EC04  F011         	call	i2_line1	;wreg free
  9114                           
  9115                           ;modules.c: 27: printf("For more info          ");
  9116  000A44  0E96               	movlw	low STR_23
  9117  000A46  6E0D               	movwf	i2printf@f,c
  9118  000A48  0EFE               	movlw	high STR_23
  9119  000A4A  6E0E               	movwf	i2printf@f+1,c
  9120  000A4C  EC91  F003         	call	i2_printf	;wreg free
  9121                           
  9122                           ;modules.c: 28: int type = 0;
  9123  000A50  0E00               	movlw	0
  9124  000A52  6E33               	movwf	showInfo@type+1,c
  9125  000A54  0E00               	movlw	0
  9126  000A56  6E32               	movwf	showInfo@type,c
  9127                           
  9128                           ;modules.c: 29: int stop = 0;
  9129  000A58  0E00               	movlw	0
  9130  000A5A  6E35               	movwf	showInfo@stop+1,c
  9131  000A5C  0E00               	movlw	0
  9132  000A5E  D0CC               	goto	L2
  9133  000A60                     i2l3940:
  9134                           
  9135                           ;modules.c: 31: type = captureKeypad();
  9136  000A60  EC7F  F010         	call	_captureKeypad	;wreg free
  9137  000A64  C001  F032         	movff	?_captureKeypad,showInfo@type
  9138  000A68  C002  F033         	movff	?_captureKeypad+1,showInfo@type+1
  9139                           
  9140                           ;modules.c: 32: switch (type) {
  9141  000A6C  D0C7               	goto	i2l3980
  9142  000A6E                     i2l3942:
  9143                           
  9144                           ;modules.c: 34: line0();
  9145  000A6E  EC08  F011         	call	i2_line0	;wreg free
  9146                           
  9147                           ;modules.c: 35: printf("Time Elapsed:          ");
  9148  000A72  0E66               	movlw	low STR_24
  9149  000A74  6E0D               	movwf	i2printf@f,c
  9150  000A76  0EFE               	movlw	high STR_24
  9151  000A78  6E0E               	movwf	i2printf@f+1,c
  9152  000A7A  EC91  F003         	call	i2_printf	;wreg free
  9153                           
  9154                           ;modules.c: 36: line1();
  9155  000A7E  EC04  F011         	call	i2_line1	;wreg free
  9156                           
  9157                           ;modules.c: 37: printf("%u seconds          ", time);
  9158  000A82  0E1C               	movlw	low STR_25
  9159  000A84  6E0D               	movwf	i2printf@f,c
  9160  000A86  0EFF               	movlw	high STR_25
  9161  000A88  6E0E               	movwf	i2printf@f+1,c
  9162  000A8A  C029  F00F         	movff	showInfo@time,?i2_printf+2
  9163  000A8E  C02A  F010         	movff	showInfo@time+1,?i2_printf+3
  9164  000A92  EC91  F003         	call	i2_printf	;wreg free
  9165                           
  9166                           ;modules.c: 38: break;
  9167  000A96  D0D1               	goto	i2l3982
  9168  000A98                     i2l3948:
  9169                           
  9170                           ;modules.c: 40: line0();
  9171  000A98  EC08  F011         	call	i2_line0	;wreg free
  9172                           
  9173                           ;modules.c: 41: printf("Total Sorted:          ");
  9174  000A9C  0E7E               	movlw	low STR_26
  9175  000A9E  6E0D               	movwf	i2printf@f,c
  9176  000AA0  0EFE               	movlw	high STR_26
  9177  000AA2  6E0E               	movwf	i2printf@f+1,c
  9178  000AA4  EC91  F003         	call	i2_printf	;wreg free
  9179                           
  9180                           ;modules.c: 42: line1();
  9181  000AA8  EC04  F011         	call	i2_line1	;wreg free
  9182                           
  9183                           ;modules.c: 43: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  9184  000AAC  0EC6               	movlw	low STR_27
  9185  000AAE  6E0D               	movwf	i2printf@f,c
  9186  000AB0  0EFE               	movlw	high STR_27
  9187  000AB2  6E0E               	movwf	i2printf@f+1,c
  9188  000AB4  EE20 F003          	lfsr	2,3
  9189  000AB8  502B               	movf	showInfo@sorted,w,c
  9190  000ABA  26D9               	addwf	fsr2l,f,c
  9191  000ABC  502C               	movf	showInfo@sorted+1,w,c
  9192  000ABE  22DA               	addwfc	fsr2h,f,c
  9193  000AC0  50DF               	movf	indf2,w,c
  9194  000AC2  6E2D               	movwf	??_showInfo& (0+255),c
  9195  000AC4  C02B  FFD9         	movff	showInfo@sorted,fsr2l
  9196  000AC8  C02C  FFDA         	movff	showInfo@sorted+1,fsr2h
  9197  000ACC  50DF               	movf	indf2,w,c
  9198  000ACE  6E2E               	movwf	(??_showInfo+1)& (0+255),c
  9199  000AD0  6A2F               	clrf	(??_showInfo+2)& (0+255),c
  9200  000AD2  EE20 F001          	lfsr	2,1
  9201  000AD6  502B               	movf	showInfo@sorted,w,c
  9202  000AD8  26D9               	addwf	fsr2l,f,c
  9203  000ADA  502C               	movf	showInfo@sorted+1,w,c
  9204  000ADC  22DA               	addwfc	fsr2h,f,c
  9205  000ADE  50DF               	movf	indf2,w,c
  9206  000AE0  6E30               	movwf	(??_showInfo+3)& (0+255),c
  9207  000AE2  5030               	movf	??_showInfo+3,w,c
  9208  000AE4  262E               	addwf	??_showInfo+1,f,c
  9209  000AE6  0E00               	movlw	0
  9210  000AE8  222F               	addwfc	??_showInfo+2,f,c
  9211  000AEA  EE20 F002          	lfsr	2,2
  9212  000AEE  502B               	movf	showInfo@sorted,w,c
  9213  000AF0  26D9               	addwf	fsr2l,f,c
  9214  000AF2  502C               	movf	showInfo@sorted+1,w,c
  9215  000AF4  22DA               	addwfc	fsr2h,f,c
  9216  000AF6  50DF               	movf	indf2,w,c
  9217  000AF8  6E31               	movwf	(??_showInfo+4)& (0+255),c
  9218  000AFA  5031               	movf	??_showInfo+4,w,c
  9219  000AFC  262E               	addwf	??_showInfo+1,f,c
  9220  000AFE  0E00               	movlw	0
  9221  000B00  222F               	addwfc	??_showInfo+2,f,c
  9222  000B02  502D               	movf	??_showInfo,w,c
  9223  000B04  242E               	addwf	??_showInfo+1,w,c
  9224  000B06  6E0F               	movwf	?i2_printf+2,c
  9225  000B08  0E00               	movlw	0
  9226  000B0A  202F               	addwfc	??_showInfo+2,w,c
  9227  000B0C  6E10               	movwf	?i2_printf+3,c
  9228  000B0E  EC91  F003         	call	i2_printf	;wreg free
  9229                           
  9230                           ;modules.c: 44: break;
  9231  000B12  D093               	goto	i2l3982
  9232  000B14                     i2l3954:
  9233                           
  9234                           ;modules.c: 46: line0();
  9235  000B14  EC08  F011         	call	i2_line0	;wreg free
  9236                           
  9237                           ;modules.c: 47: printf("AA Sorted:          ");
  9238  000B18  0EF2               	movlw	low STR_28
  9239  000B1A  6E0D               	movwf	i2printf@f,c
  9240  000B1C  0EFE               	movlw	high STR_28
  9241  000B1E  6E0E               	movwf	i2printf@f+1,c
  9242  000B20  EC91  F003         	call	i2_printf	;wreg free
  9243                           
  9244                           ;modules.c: 48: line1();
  9245  000B24  EC04  F011         	call	i2_line1	;wreg free
  9246                           
  9247                           ;modules.c: 49: printf("%u             ", sorted[0]);
  9248  000B28  0EC4               	movlw	low STR_29
  9249  000B2A  6E0D               	movwf	i2printf@f,c
  9250  000B2C  0EFF               	movlw	high STR_29
  9251  000B2E  6E0E               	movwf	i2printf@f+1,c
  9252  000B30  C02B  FFD9         	movff	showInfo@sorted,fsr2l
  9253  000B34  C02C  FFDA         	movff	showInfo@sorted+1,fsr2h
  9254  000B38  50DF               	movf	indf2,w,c
  9255  000B3A  6E2D               	movwf	??_showInfo& (0+255),c
  9256  000B3C  502D               	movf	??_showInfo,w,c
  9257  000B3E  6E0F               	movwf	?i2_printf+2,c
  9258  000B40  6A10               	clrf	?i2_printf+3,c
  9259  000B42  EC91  F003         	call	i2_printf	;wreg free
  9260                           
  9261                           ;modules.c: 50: break;
  9262  000B46  D079               	goto	i2l3982
  9263  000B48                     i2l3960:
  9264                           
  9265                           ;modules.c: 52: line0();
  9266  000B48  EC08  F011         	call	i2_line0	;wreg free
  9267                           
  9268                           ;modules.c: 53: printf("C Sorted:          ");
  9269  000B4C  0E45               	movlw	low STR_30
  9270  000B4E  6E0D               	movwf	i2printf@f,c
  9271  000B50  0EFF               	movlw	high STR_30
  9272  000B52  6E0E               	movwf	i2printf@f+1,c
  9273  000B54  EC91  F003         	call	i2_printf	;wreg free
  9274                           
  9275                           ;modules.c: 54: line1();
  9276  000B58  EC04  F011         	call	i2_line1	;wreg free
  9277                           
  9278                           ;modules.c: 55: printf("%u             ", sorted[1]);
  9279  000B5C  0EC4               	movlw	low STR_29
  9280  000B5E  6E0D               	movwf	i2printf@f,c
  9281  000B60  0EFF               	movlw	high STR_29
  9282  000B62  6E0E               	movwf	i2printf@f+1,c
  9283  000B64  EE20 F001          	lfsr	2,1
  9284  000B68  502B               	movf	showInfo@sorted,w,c
  9285  000B6A  26D9               	addwf	fsr2l,f,c
  9286  000B6C  502C               	movf	showInfo@sorted+1,w,c
  9287  000B6E  22DA               	addwfc	fsr2h,f,c
  9288  000B70  50DF               	movf	indf2,w,c
  9289  000B72  6E2D               	movwf	??_showInfo& (0+255),c
  9290  000B74  502D               	movf	??_showInfo,w,c
  9291  000B76  6E0F               	movwf	?i2_printf+2,c
  9292  000B78  6A10               	clrf	?i2_printf+3,c
  9293  000B7A  EC91  F003         	call	i2_printf	;wreg free
  9294                           
  9295                           ;modules.c: 56: break;
  9296  000B7E  D05D               	goto	i2l3982
  9297  000B80                     i2l3966:
  9298                           
  9299                           ;modules.c: 58: line0();
  9300  000B80  EC08  F011         	call	i2_line0	;wreg free
  9301                           
  9302                           ;modules.c: 59: printf("9V Sorted:          ");
  9303  000B84  0E07               	movlw	low STR_32
  9304  000B86  6E0D               	movwf	i2printf@f,c
  9305  000B88  0EFF               	movlw	high STR_32
  9306  000B8A  6E0E               	movwf	i2printf@f+1,c
  9307  000B8C  EC91  F003         	call	i2_printf	;wreg free
  9308                           
  9309                           ;modules.c: 60: line1();
  9310  000B90  EC04  F011         	call	i2_line1	;wreg free
  9311                           
  9312                           ;modules.c: 61: printf("%u             ", sorted[2]);
  9313  000B94  0EC4               	movlw	low STR_29
  9314  000B96  6E0D               	movwf	i2printf@f,c
  9315  000B98  0EFF               	movlw	high STR_29
  9316  000B9A  6E0E               	movwf	i2printf@f+1,c
  9317  000B9C  EE20 F002          	lfsr	2,2
  9318  000BA0  502B               	movf	showInfo@sorted,w,c
  9319  000BA2  26D9               	addwf	fsr2l,f,c
  9320  000BA4  502C               	movf	showInfo@sorted+1,w,c
  9321  000BA6  22DA               	addwfc	fsr2h,f,c
  9322  000BA8  50DF               	movf	indf2,w,c
  9323  000BAA  6E2D               	movwf	??_showInfo& (0+255),c
  9324  000BAC  502D               	movf	??_showInfo,w,c
  9325  000BAE  6E0F               	movwf	?i2_printf+2,c
  9326  000BB0  6A10               	clrf	?i2_printf+3,c
  9327  000BB2  EC91  F003         	call	i2_printf	;wreg free
  9328                           
  9329                           ;modules.c: 62: break;
  9330  000BB6  D041               	goto	i2l3982
  9331  000BB8                     i2l3972:
  9332                           
  9333                           ;modules.c: 64: line0();
  9334  000BB8  EC08  F011         	call	i2_line0	;wreg free
  9335                           
  9336                           ;modules.c: 65: printf("Uncharged:          ");
  9337  000BBC  0EDD               	movlw	low STR_34
  9338  000BBE  6E0D               	movwf	i2printf@f,c
  9339  000BC0  0EFE               	movlw	high STR_34
  9340  000BC2  6E0E               	movwf	i2printf@f+1,c
  9341  000BC4  EC91  F003         	call	i2_printf	;wreg free
  9342                           
  9343                           ;modules.c: 66: line1();
  9344  000BC8  EC04  F011         	call	i2_line1	;wreg free
  9345                           
  9346                           ;modules.c: 67: printf("%u             ", sorted[3]);
  9347  000BCC  0EC4               	movlw	low STR_29
  9348  000BCE  6E0D               	movwf	i2printf@f,c
  9349  000BD0  0EFF               	movlw	high STR_29
  9350  000BD2  6E0E               	movwf	i2printf@f+1,c
  9351  000BD4  EE20 F003          	lfsr	2,3
  9352  000BD8  502B               	movf	showInfo@sorted,w,c
  9353  000BDA  26D9               	addwf	fsr2l,f,c
  9354  000BDC  502C               	movf	showInfo@sorted+1,w,c
  9355  000BDE  22DA               	addwfc	fsr2h,f,c
  9356  000BE0  50DF               	movf	indf2,w,c
  9357  000BE2  6E2D               	movwf	??_showInfo& (0+255),c
  9358  000BE4  502D               	movf	??_showInfo,w,c
  9359  000BE6  6E0F               	movwf	?i2_printf+2,c
  9360  000BE8  6A10               	clrf	?i2_printf+3,c
  9361  000BEA  EC91  F003         	call	i2_printf	;wreg free
  9362                           
  9363                           ;modules.c: 68: break;
  9364  000BEE  D025               	goto	i2l3982
  9365  000BF0                     i2l235:
  9366  000BF0  00FF               	reset		;# 
  9367  000BF2                     i2l3978:
  9368                           
  9369                           ;modules.c: 72: stop = 1;
  9370  000BF2  0E00               	movlw	0
  9371  000BF4  6E35               	movwf	showInfo@stop+1,c
  9372  000BF6  0E01               	movlw	1
  9373  000BF8                     L2:
  9374  000BF8  6E34               	movwf	showInfo@stop,c
  9375                           
  9376                           ;modules.c: 73: }
  9377  000BFA  D01F               	goto	i2l3982
  9378  000BFC                     i2l3980:
  9379  000BFC  C032  F02D         	movff	showInfo@type,??_showInfo
  9380  000C00  C033  F02E         	movff	showInfo@type+1,??_showInfo+1
  9381                           
  9382                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9383                           ; Switch size 1, requested type "space"
  9384                           ; Number of cases is 1, Range of values is 0 to 0
  9385                           ; switch strategies available:
  9386                           ; Name         Instructions Cycles
  9387                           ; simple_byte            4     3 (average)
  9388                           ;	Chosen strategy is simple_byte
  9389  000C04  502E               	movf	??_showInfo+1,w,c
  9390  000C06  0A00               	xorlw	0	; case 0
  9391  000C08  A4D8               	btfss	status,2,c
  9392  000C0A  D7F3               	goto	i2l3978
  9393                           
  9394                           ; Switch size 1, requested type "space"
  9395                           ; Number of cases is 7, Range of values is 0 to 15
  9396                           ; switch strategies available:
  9397                           ; Name         Instructions Cycles
  9398                           ; simple_byte           22    12 (average)
  9399                           ;	Chosen strategy is simple_byte
  9400  000C0C  502D               	movf	??_showInfo,w,c
  9401  000C0E  0A00               	xorlw	0	; case 0
  9402  000C10  B4D8               	btfsc	status,2,c
  9403  000C12  D72D               	goto	i2l3942
  9404  000C14  0A01               	xorlw	1	; case 1
  9405  000C16  B4D8               	btfsc	status,2,c
  9406  000C18  D73F               	goto	i2l3948
  9407  000C1A  0A03               	xorlw	3	; case 2
  9408  000C1C  B4D8               	btfsc	status,2,c
  9409  000C1E  D77A               	goto	i2l3954
  9410  000C20  0A01               	xorlw	1	; case 3
  9411  000C22  B4D8               	btfsc	status,2,c
  9412  000C24  D791               	goto	i2l3960
  9413  000C26  0A07               	xorlw	7	; case 4
  9414  000C28  B4D8               	btfsc	status,2,c
  9415  000C2A  D7AA               	goto	i2l3966
  9416  000C2C  0A01               	xorlw	1	; case 5
  9417  000C2E  B4D8               	btfsc	status,2,c
  9418  000C30  D7C3               	goto	i2l3972
  9419  000C32  0A0A               	xorlw	10	; case 15
  9420  000C34  B4D8               	btfsc	status,2,c
  9421  000C36  D7DC               	goto	i2l235
  9422  000C38  D7DC               	goto	i2l3978
  9423  000C3A                     i2l3982:
  9424  000C3A  5034               	movf	showInfo@stop,w,c
  9425  000C3C  1035               	iorwf	showInfo@stop+1,w,c
  9426  000C3E  A4D8               	btfss	status,2,c
  9427  000C40  0012               	return	
  9428  000C42  D70E               	goto	i2l3940
  9429  000C44                     __end_of_showInfo:
  9430                           	opt stack 0
  9431                           pclatu	equ	0xFFB
  9432                           pclath	equ	0xFFA
  9433                           tblptru	equ	0xFF8
  9434                           tblptrh	equ	0xFF7
  9435                           tblptrl	equ	0xFF6
  9436                           tablat	equ	0xFF5
  9437                           prodh	equ	0xFF4
  9438                           prodl	equ	0xFF3
  9439                           intcon	equ	0xFF2
  9440                           intcon2	equ	0xFF1
  9441                           intcon3	equ	0xFF0
  9442                           postinc0	equ	0xFEE
  9443                           fsr0h	equ	0xFEA
  9444                           fsr0l	equ	0xFE9
  9445                           wreg	equ	0xFE8
  9446                           plusw1	equ	0xFE3
  9447                           fsr1h	equ	0xFE2
  9448                           fsr1l	equ	0xFE1
  9449                           indf2	equ	0xFDF
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           plusw2	equ	0xFDB
  9453                           fsr2h	equ	0xFDA
  9454                           fsr2l	equ	0xFD9
  9455                           status	equ	0xFD8
  9456                           
  9457 ;; *************** function i2_printf *****************
  9458 ;; Defined at:
  9459 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9462 ;;		 -> STR_51(17), STR_50(17), STR_49(4), STR_48(4), 
  9463 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9464 ;;		 -> STR_43(4), STR_42(3), STR_41(4), STR_40(4), 
  9465 ;;		 -> STR_39(4), STR_38(4), STR_37(18), STR_36(20), 
  9466 ;;		 -> STR_35(16), STR_34(21), STR_33(16), STR_32(21), 
  9467 ;;		 -> STR_31(16), STR_30(20), STR_29(16), STR_28(21), 
  9468 ;;		 -> STR_27(23), STR_26(24), STR_25(21), STR_24(24), 
  9469 ;;		 -> STR_23(24), STR_22(25), STR_21(19), STR_20(25), 
  9470 ;;		 -> STR_19(25), STR_18(27), STR_17(19), STR_16(25), 
  9471 ;;		 -> STR_15(3), STR_14(3), STR_13(3), STR_12(5), 
  9472 ;;		 -> STR_11(3), STR_10(3), STR_9(3), STR_8(4), 
  9473 ;;		 -> STR_7(3), STR_6(3), STR_5(3), STR_4(4), 
  9474 ;;		 -> STR_3(5), STR_2(24), STR_1(9), 
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;  printf          4    0        struct .
  9477 ;;  printf          2   37[COMRAM] int 
  9478 ;;  printf          2   34[COMRAM] unsigned int 
  9479 ;;  printf          2   31[COMRAM] unsigned int 
  9480 ;;  printf          2   28[COMRAM] PTR const unsigned char 
  9481 ;;		 -> printf@c(1), 
  9482 ;;  printf          2   26[COMRAM] PTR void [1]
  9483 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9484 ;;  printf          1   39[COMRAM] char 
  9485 ;;  printf          1   36[COMRAM] unsigned char 
  9486 ;;  printf          1   33[COMRAM] char 
  9487 ;;  printf          1   30[COMRAM] unsigned char 
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  2   12[COMRAM] int 
  9490 ;; Registers used:
  9491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9497 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9501 ;;Total ram usage:       28 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; Hardware stack levels required when called:    2
  9504 ;; This function calls:
  9505 ;;		i2___lwdiv
  9506 ;;		i2___lwmod
  9507 ;;		i2___wmul
  9508 ;;		i2_isdigit
  9509 ;;		i2_putch
  9510 ;; This function is called by:
  9511 ;;		_simulate
  9512 ;;		_showInfo
  9513 ;;		_stopMoving
  9514 ;;		_checkAA
  9515 ;;		_checkC
  9516 ;;		_check9
  9517 ;;		_PermLog
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           	psect	text53
  9522  000722                     __ptext53:
  9523                           	opt stack 0
  9524  000722                     i2_printf:
  9525                           	opt stack 22
  9526                           
  9527                           ;doprnt.c: 466: va_list ap;
  9528                           ;doprnt.c: 499: signed char c;
  9529                           ;doprnt.c: 501: int width;
  9530                           ;doprnt.c: 506: signed char prec;
  9531                           ;doprnt.c: 508: unsigned char flag;
  9532                           ;doprnt.c: 523: union {
  9533                           ;doprnt.c: 524: unsigned long vd;
  9534                           ;doprnt.c: 525: double integ;
  9535                           ;doprnt.c: 526: } tmpval;
  9536                           ;doprnt.c: 528: unsigned int val;
  9537                           ;doprnt.c: 529: unsigned len;
  9538                           ;doprnt.c: 530: const char * cp;
  9539                           ;doprnt.c: 533: *ap = __va_start();
  9540                           
  9541                           ;incstack = 0
  9542  000722  0E0F               	movlw	low (?i2_printf+2)
  9543  000724  6E1B               	movwf	i2printf@ap,c
  9544  000726  0E00               	movlw	high (?i2_printf+2)
  9545  000728  6E1C               	movwf	i2printf@ap+1,c
  9546                           
  9547                           ;doprnt.c: 536: while(c = *f++) {
  9548  00072A  D175               	goto	i2l3570
  9549  00072C                     i2l3448:
  9550                           
  9551                           ;doprnt.c: 538: if(c != '%')
  9552  00072C  0E25               	movlw	37
  9553  00072E  1828               	xorwf	i2printf@c,w,c
  9554  000730  B4D8               	btfsc	status,2,c
  9555  000732  D004               	goto	i2l3452
  9556                           
  9557                           ;doprnt.c: 540: {
  9558                           ;doprnt.c: 541: (putch(c) );
  9559  000734  5028               	movf	i2printf@c,w,c
  9560  000736  ECD6  F010         	call	i2_putch
  9561                           
  9562                           ;doprnt.c: 542: continue;
  9563  00073A  D16D               	goto	i2l3570
  9564  00073C                     i2l3452:
  9565                           
  9566                           ;doprnt.c: 543: }
  9567                           ;doprnt.c: 546: width = 0;
  9568  00073C  0E00               	movlw	0
  9569  00073E  6E27               	movwf	i2printf@width+1,c
  9570  000740  0E00               	movlw	0
  9571  000742  6E26               	movwf	i2printf@width,c
  9572                           
  9573                           ;doprnt.c: 548: flag = 0;
  9574  000744  0E00               	movlw	0
  9575  000746  6E25               	movwf	i2printf@flag,c
  9576                           
  9577                           ;doprnt.c: 551: switch(*f) {
  9578                           
  9579                           ;doprnt.c: 550: for(;;) {
  9580  000748  D003               	goto	i2l3458
  9581  00074A                     i2l3454:
  9582                           
  9583                           ;doprnt.c: 580: flag |= 0x04;
  9584  00074A  8425               	bsf	i2printf@flag,2,c
  9585                           
  9586                           ;doprnt.c: 581: f++;
  9587  00074C  4A0D               	infsnz	i2printf@f,f,c
  9588  00074E  2A0E               	incf	i2printf@f+1,f,c
  9589  000750                     i2l3458:
  9590  000750  C00D  FFF6         	movff	i2printf@f,tblptrl
  9591  000754  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9592  000758                     	if	0	;tblptru may be non-zero
  9593  000758                     	endif
  9594  000758                     	if	0	;tblptru may be non-zero
  9595  000758                     	endif
  9596  000758  0008               	tblrd		*
  9597  00075A  50F5               	movf	tablat,w,c
  9598                           
  9599                           ; Switch size 1, requested type "space"
  9600                           ; Number of cases is 1, Range of values is 48 to 48
  9601                           ; switch strategies available:
  9602                           ; Name         Instructions Cycles
  9603                           ; simple_byte            4     3 (average)
  9604                           ;	Chosen strategy is simple_byte
  9605  00075C  0A30               	xorlw	48	; case 48
  9606  00075E  B4D8               	btfsc	status,2,c
  9607  000760  D7F4               	goto	i2l3454
  9608                           
  9609                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9610                           
  9611                           ;doprnt.c: 586: }
  9612                           
  9613                           ;doprnt.c: 585: break;
  9614  000762  C00D  FFF6         	movff	i2printf@f,tblptrl
  9615  000766  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9616  00076A                     	if	0	;tblptru may be non-zero
  9617  00076A                     	endif
  9618  00076A                     	if	0	;tblptru may be non-zero
  9619  00076A                     	endif
  9620  00076A  0008               	tblrd		*
  9621  00076C  50F5               	movf	tablat,w,c
  9622  00076E  EC70  F010         	call	i2_isdigit
  9623  000772  A0D8               	btfss	status,0,c
  9624  000774  D06F               	goto	i2l3498
  9625                           
  9626                           ;doprnt.c: 598: width = 0;
  9627  000776  0E00               	movlw	0
  9628  000778  6E27               	movwf	i2printf@width+1,c
  9629  00077A  0E00               	movlw	0
  9630  00077C  6E26               	movwf	i2printf@width,c
  9631  00077E                     i2l3464:
  9632                           
  9633                           ;doprnt.c: 600: width *= 10;
  9634  00077E  C026  F001         	movff	i2printf@width,i2___wmul@multiplier
  9635  000782  C027  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9636  000786  0E00               	movlw	0
  9637  000788  6E04               	movwf	i2___wmul@multiplicand+1,c
  9638  00078A  0E0A               	movlw	10
  9639  00078C  6E03               	movwf	i2___wmul@multiplicand,c
  9640  00078E  EC2E  F010         	call	i2___wmul	;wreg free
  9641  000792  C001  F026         	movff	?i2___wmul,i2printf@width
  9642  000796  C002  F027         	movff	?i2___wmul+1,i2printf@width+1
  9643                           
  9644                           ;doprnt.c: 601: width += *f++ - '0';
  9645  00079A  0ED0               	movlw	208
  9646  00079C  6E17               	movwf	??i2_printf& (0+255),c
  9647  00079E  0EFF               	movlw	255
  9648  0007A0  6E18               	movwf	(??i2_printf+1)& (0+255),c
  9649  0007A2  C00D  FFF6         	movff	i2printf@f,tblptrl
  9650  0007A6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9651  0007AA                     	if	0	;tblptru may be non-zero
  9652  0007AA                     	endif
  9653  0007AA                     	if	0	;tblptru may be non-zero
  9654  0007AA                     	endif
  9655  0007AA  0008               	tblrd		*
  9656  0007AC  50F5               	movf	tablat,w,c
  9657  0007AE  6E19               	movwf	(??i2_printf+2)& (0+255),c
  9658  0007B0  6A1A               	clrf	(??i2_printf+3)& (0+255),c
  9659  0007B2  5017               	movf	??i2_printf,w,c
  9660  0007B4  2619               	addwf	??i2_printf+2,f,c
  9661  0007B6  5018               	movf	??i2_printf+1,w,c
  9662  0007B8  221A               	addwfc	??i2_printf+3,f,c
  9663  0007BA  5019               	movf	??i2_printf+2,w,c
  9664  0007BC  2626               	addwf	i2printf@width,f,c
  9665  0007BE  501A               	movf	??i2_printf+3,w,c
  9666  0007C0  2227               	addwfc	i2printf@width+1,f,c
  9667  0007C2  4A0D               	infsnz	i2printf@f,f,c
  9668  0007C4  2A0E               	incf	i2printf@f+1,f,c
  9669                           
  9670                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9671  0007C6  C00D  FFF6         	movff	i2printf@f,tblptrl
  9672  0007CA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9673  0007CE                     	if	0	;tblptru may be non-zero
  9674  0007CE                     	endif
  9675  0007CE                     	if	0	;tblptru may be non-zero
  9676  0007CE                     	endif
  9677  0007CE  0008               	tblrd		*
  9678  0007D0  50F5               	movf	tablat,w,c
  9679  0007D2  EC70  F010         	call	i2_isdigit
  9680  0007D6  A0D8               	btfss	status,0,c
  9681  0007D8  D03D               	goto	i2l3498
  9682  0007DA  D7D1               	goto	i2l3464
  9683  0007DC                     i2l3472:
  9684                           
  9685                           ;doprnt.c: 721: flag |= 0x80;
  9686  0007DC  8E25               	bsf	i2printf@flag,7,c
  9687                           
  9688                           ;doprnt.c: 723: break;
  9689  0007DE  D04E               	goto	i2l3500
  9690  0007E0                     i2l3474:
  9691                           
  9692                           ;doprnt.c: 757: if(width > len)
  9693  0007E0  5026               	movf	i2printf@width,w,c
  9694  0007E2  5C20               	subwf	i2printf@len,w,c
  9695  0007E4  5027               	movf	i2printf@width+1,w,c
  9696  0007E6  5821               	subwfb	i2printf@len+1,w,c
  9697  0007E8  B0D8               	btfsc	status,0,c
  9698  0007EA  D005               	goto	i2l3478
  9699                           
  9700                           ;doprnt.c: 758: width -= len;
  9701  0007EC  5020               	movf	i2printf@len,w,c
  9702  0007EE  5E26               	subwf	i2printf@width,f,c
  9703  0007F0  5021               	movf	i2printf@len+1,w,c
  9704  0007F2  5A27               	subwfb	i2printf@width+1,f,c
  9705  0007F4  D008               	goto	i2l3482
  9706  0007F6                     i2l3478:
  9707                           
  9708                           ;doprnt.c: 759: else
  9709                           ;doprnt.c: 760: width = 0;
  9710  0007F6  0E00               	movlw	0
  9711  0007F8  6E27               	movwf	i2printf@width+1,c
  9712  0007FA  0E00               	movlw	0
  9713  0007FC  6E26               	movwf	i2printf@width,c
  9714                           
  9715                           ;doprnt.c: 764: while(width--)
  9716  0007FE  D003               	goto	i2l3482
  9717  000800                     i2l3480:
  9718                           
  9719                           ;doprnt.c: 765: (putch(' ') );
  9720  000800  0E20               	movlw	32
  9721  000802  ECD6  F010         	call	i2_putch
  9722  000806                     i2l3482:
  9723  000806  0626               	decf	i2printf@width,f,c
  9724  000808  A0D8               	btfss	status,0,c
  9725  00080A  0627               	decf	i2printf@width+1,f,c
  9726  00080C  2826               	incf	i2printf@width,w,c
  9727  00080E  E1F8               	bnz	i2l3480
  9728  000810  2827               	incf	i2printf@width+1,w,c
  9729  000812  B4D8               	btfsc	status,2,c
  9730  000814  D00A               	goto	i2l3488
  9731  000816  D7F4               	goto	i2l3480
  9732  000818                     i2l3484:
  9733                           
  9734                           ;doprnt.c: 768: (putch(*cp++) );
  9735  000818  C01D  FFD9         	movff	i2printf@cp,fsr2l
  9736  00081C  C01E  FFDA         	movff	i2printf@cp+1,fsr2h
  9737  000820  50DF               	movf	indf2,w,c
  9738  000822  ECD6  F010         	call	i2_putch
  9739  000826  4A1D               	infsnz	i2printf@cp,f,c
  9740  000828  2A1E               	incf	i2printf@cp+1,f,c
  9741  00082A                     i2l3488:
  9742  00082A  0620               	decf	i2printf@len,f,c
  9743  00082C  A0D8               	btfss	status,0,c
  9744  00082E  0621               	decf	i2printf@len+1,f,c
  9745  000830  2820               	incf	i2printf@len,w,c
  9746  000832  E1F2               	bnz	i2l3484
  9747  000834  2821               	incf	i2printf@len+1,w,c
  9748  000836  B4D8               	btfsc	status,2,c
  9749  000838  D0EE               	goto	i2l3570
  9750  00083A  D7EE               	goto	i2l3484
  9751  00083C                     i2l3490:
  9752                           
  9753                           ;doprnt.c: 805: cp = (char *)&c;
  9754  00083C  0E28               	movlw	low i2printf@c
  9755  00083E  6E1D               	movwf	i2printf@cp,c
  9756  000840  0E00               	movlw	high i2printf@c
  9757  000842  6E1E               	movwf	i2printf@cp+1,c
  9758                           
  9759                           ;doprnt.c: 806: len = 1;
  9760  000844  0E00               	movlw	0
  9761  000846  6E21               	movwf	i2printf@len+1,c
  9762  000848  0E01               	movlw	1
  9763  00084A  6E20               	movwf	i2printf@len,c
  9764                           
  9765                           ;doprnt.c: 807: goto dostring;
  9766  00084C  D7C9               	goto	i2l3474
  9767  00084E                     i2l3494:
  9768                           
  9769                           ;doprnt.c: 818: flag |= 0xC0;
  9770  00084E  0EC0               	movlw	192
  9771  000850  1225               	iorwf	i2printf@flag,f,c
  9772                           
  9773                           ;doprnt.c: 822: }
  9774                           
  9775                           ;doprnt.c: 819: break;
  9776  000852  D014               	goto	i2l3500
  9777  000854                     i2l3498:
  9778  000854  C00D  FFF6         	movff	i2printf@f,tblptrl
  9779  000858  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9780  00085C  4A0D               	infsnz	i2printf@f,f,c
  9781  00085E  2A0E               	incf	i2printf@f+1,f,c
  9782  000860                     	if	0	;tblptru may be non-zero
  9783  000860                     	endif
  9784  000860                     	if	0	;tblptru may be non-zero
  9785  000860                     	endif
  9786  000860  0008               	tblrd		*
  9787  000862  CFF5 F028          	movff	tablat,i2printf@c
  9788  000866  5028               	movf	i2printf@c,w,c
  9789                           
  9790                           ; Switch size 1, requested type "space"
  9791                           ; Number of cases is 3, Range of values is 0 to 120
  9792                           ; switch strategies available:
  9793                           ; Name         Instructions Cycles
  9794                           ; simple_byte           10     6 (average)
  9795                           ;	Chosen strategy is simple_byte
  9796  000868  0A00               	xorlw	0	; case 0
  9797  00086A  B4D8               	btfsc	status,2,c
  9798  00086C  0012               	return	
  9799  00086E  0A75               	xorlw	117	; case 117
  9800  000870  B4D8               	btfsc	status,2,c
  9801  000872  D7ED               	goto	i2l3494
  9802  000874  0A0D               	xorlw	13	; case 120
  9803  000876  B4D8               	btfsc	status,2,c
  9804  000878  D7B1               	goto	i2l3472
  9805  00087A  D7E0               	goto	i2l3490
  9806  00087C                     i2l3500:
  9807                           
  9808                           ;doprnt.c: 1273: {
  9809                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9810  00087C  C01B  FFD9         	movff	i2printf@ap,fsr2l
  9811  000880  C01C  FFDA         	movff	i2printf@ap+1,fsr2h
  9812  000884  CFDE F023          	movff	postinc2,i2printf@val
  9813  000888  CFDD F024          	movff	postdec2,i2printf@val+1
  9814  00088C  0E02               	movlw	2
  9815  00088E  261B               	addwf	i2printf@ap,f,c
  9816  000890  0E00               	movlw	0
  9817  000892  221C               	addwfc	i2printf@ap+1,f,c
  9818                           
  9819                           ;doprnt.c: 1287: }
  9820                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9821  000894  D030               	goto	i2l3534
  9822  000896                     i2l3504:
  9823                           
  9824                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9825  000896  0E01               	movlw	1
  9826  000898  6E28               	movwf	i2printf@c,c
  9827  00089A                     i2l3506:
  9828  00089A  0E05               	movlw	5
  9829  00089C  1828               	xorwf	i2printf@c,w,c
  9830  00089E  B4D8               	btfsc	status,2,c
  9831  0008A0  D032               	goto	i2l3536
  9832                           
  9833                           ;doprnt.c: 1306: if(val < dpowers[c])
  9834  0008A2  5028               	movf	i2printf@c,w,c
  9835  0008A4  0D02               	mullw	2
  9836  0008A6  0ED5               	movlw	low _dpowers
  9837  0008A8  24F3               	addwf	prodl,w,c
  9838  0008AA  6EF6               	movwf	tblptrl,c
  9839  0008AC  0EFD               	movlw	high _dpowers
  9840  0008AE  20F4               	addwfc	prodh,w,c
  9841  0008B0  6EF7               	movwf	tblptrh,c
  9842  0008B2                     	if	0	;There are less than 3 active tblptr bytes
  9843  0008B2                     	endif
  9844  0008B2  0009               	tblrd		*+
  9845  0008B4  50F5               	movf	tablat,w,c
  9846  0008B6  5C23               	subwf	i2printf@val,w,c
  9847  0008B8  0009               	tblrd		*+
  9848  0008BA  50F5               	movf	tablat,w,c
  9849  0008BC  5824               	subwfb	i2printf@val+1,w,c
  9850  0008BE  A0D8               	btfss	status,0,c
  9851  0008C0  D022               	goto	i2l3536
  9852                           
  9853                           ;doprnt.c: 1307: break;
  9854  0008C2  2A28               	incf	i2printf@c,f,c
  9855  0008C4  D7EA               	goto	i2l3506
  9856  0008C6                     i2l3518:
  9857                           
  9858                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9859  0008C6  0E01               	movlw	1
  9860  0008C8  6E28               	movwf	i2printf@c,c
  9861  0008CA                     i2l3520:
  9862  0008CA  0E04               	movlw	4
  9863  0008CC  1828               	xorwf	i2printf@c,w,c
  9864  0008CE  B4D8               	btfsc	status,2,c
  9865  0008D0  D01A               	goto	i2l3536
  9866                           
  9867                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9868  0008D2  5028               	movf	i2printf@c,w,c
  9869  0008D4  0D02               	mullw	2
  9870  0008D6  0EDF               	movlw	low _hexpowers
  9871  0008D8  24F3               	addwf	prodl,w,c
  9872  0008DA  6EF6               	movwf	tblptrl,c
  9873  0008DC  0EFD               	movlw	high _hexpowers
  9874  0008DE  20F4               	addwfc	prodh,w,c
  9875  0008E0  6EF7               	movwf	tblptrh,c
  9876  0008E2                     	if	0	;There are less than 3 active tblptr bytes
  9877  0008E2                     	endif
  9878  0008E2  0009               	tblrd		*+
  9879  0008E4  50F5               	movf	tablat,w,c
  9880  0008E6  5C23               	subwf	i2printf@val,w,c
  9881  0008E8  0009               	tblrd		*+
  9882  0008EA  50F5               	movf	tablat,w,c
  9883  0008EC  5824               	subwfb	i2printf@val+1,w,c
  9884  0008EE  A0D8               	btfss	status,0,c
  9885  0008F0  D00A               	goto	i2l3536
  9886                           
  9887                           ;doprnt.c: 1318: break;
  9888  0008F2  2A28               	incf	i2printf@c,f,c
  9889  0008F4  D7EA               	goto	i2l3520
  9890  0008F6                     i2l3534:
  9891  0008F6  5025               	movf	i2printf@flag,w,c
  9892  0008F8  0BC0               	andlw	192
  9893                           
  9894                           ; Switch size 1, requested type "space"
  9895                           ; Number of cases is 2, Range of values is 128 to 192
  9896                           ; switch strategies available:
  9897                           ; Name         Instructions Cycles
  9898                           ; simple_byte            7     4 (average)
  9899                           ;	Chosen strategy is simple_byte
  9900  0008FA  0A80               	xorlw	128	; case 128
  9901  0008FC  B4D8               	btfsc	status,2,c
  9902  0008FE  D7E3               	goto	i2l3518
  9903  000900  0A40               	xorlw	64	; case 192
  9904  000902  B4D8               	btfsc	status,2,c
  9905  000904  D7C8               	goto	i2l3504
  9906  000906                     i2l3536:
  9907                           
  9908                           ;doprnt.c: 1381: if(width > c)
  9909  000906  0E80               	movlw	128
  9910  000908  BE28               	btfsc	i2printf@c,7,c
  9911  00090A  0E7F               	movlw	127
  9912  00090C  6E17               	movwf	??i2_printf& (0+255),c
  9913  00090E  5026               	movf	i2printf@width,w,c
  9914  000910  5C28               	subwf	i2printf@c,w,c
  9915  000912  5027               	movf	i2printf@width+1,w,c
  9916  000914  0A80               	xorlw	128
  9917  000916  5817               	subwfb	??i2_printf& (0+255),w,c
  9918  000918  B0D8               	btfsc	status,0,c
  9919  00091A  D007               	goto	i2l3540
  9920                           
  9921                           ;doprnt.c: 1382: width -= c;
  9922  00091C  5028               	movf	i2printf@c,w,c
  9923  00091E  5E26               	subwf	i2printf@width,f,c
  9924  000920  0E00               	movlw	0
  9925  000922  BE28               	btfsc	i2printf@c,7,c
  9926  000924  0EFF               	movlw	255
  9927  000926  5A27               	subwfb	i2printf@width+1,f,c
  9928  000928  D004               	goto	i2l3542
  9929  00092A                     i2l3540:
  9930                           
  9931                           ;doprnt.c: 1383: else
  9932                           ;doprnt.c: 1384: width = 0;
  9933  00092A  0E00               	movlw	0
  9934  00092C  6E27               	movwf	i2printf@width+1,c
  9935  00092E  0E00               	movlw	0
  9936  000930  6E26               	movwf	i2printf@width,c
  9937  000932                     i2l3542:
  9938                           
  9939                           ;doprnt.c: 1387: if(flag & 0x04) {
  9940  000932  A425               	btfss	i2printf@flag,2,c
  9941  000934  D00B               	goto	i2l3550
  9942  000936                     
  9943                           ;doprnt.c: 1415: if(width)
  9944  000936  5026               	movf	i2printf@width,w,c
  9945  000938  1027               	iorwf	i2printf@width+1,w,c
  9946  00093A  B4D8               	btfsc	status,2,c
  9947  00093C  D015               	goto	i2l507
  9948                           
  9949                           ;doprnt.c: 1417: (putch('0') );
  9950                           
  9951                           ;doprnt.c: 1416: do
  9952  00093E  0E30               	movlw	48
  9953  000940  ECD6  F010         	call	i2_putch
  9954                           
  9955                           ;doprnt.c: 1418: while(--width);
  9956  000944  0626               	decf	i2printf@width,f,c
  9957  000946  A0D8               	btfss	status,0,c
  9958  000948  0627               	decf	i2printf@width+1,f,c
  9959  00094A  D7F5               	goto	L4
  9960  00094C                     i2l3550:
  9961                           
  9962                           ;doprnt.c: 1422: {
  9963                           ;doprnt.c: 1424: if(width
  9964                           ;doprnt.c: 1428: )
  9965  00094C  5026               	movf	i2printf@width,w,c
  9966  00094E  1027               	iorwf	i2printf@width+1,w,c
  9967  000950  B4D8               	btfsc	status,2,c
  9968  000952  D00A               	goto	i2l507
  9969  000954                     i2l3552:
  9970                           
  9971                           ;doprnt.c: 1430: (putch(' ') );
  9972  000954  0E20               	movlw	32
  9973  000956  ECD6  F010         	call	i2_putch
  9974                           
  9975                           ;doprnt.c: 1431: while(--width);
  9976  00095A  0626               	decf	i2printf@width,f,c
  9977  00095C  A0D8               	btfss	status,0,c
  9978  00095E  0627               	decf	i2printf@width+1,f,c
  9979  000960  5026               	movf	i2printf@width,w,c
  9980  000962  1027               	iorwf	i2printf@width+1,w,c
  9981  000964  A4D8               	btfss	status,2,c
  9982  000966  D7F6               	goto	i2l3552
  9983  000968                     i2l507:
  9984                           
  9985                           ;doprnt.c: 1469: }
  9986                           ;doprnt.c: 1472: prec = c;
  9987  000968  C028  F022         	movff	i2printf@c,i2printf@prec
  9988                           
  9989                           ;doprnt.c: 1474: while(prec--) {
  9990  00096C  D050               	goto	i2l3568
  9991  00096E                     i2l3556:
  9992                           
  9993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9994  00096E  5022               	movf	i2printf@prec,w,c
  9995  000970  0D02               	mullw	2
  9996  000972  0ED5               	movlw	low _dpowers
  9997  000974  24F3               	addwf	prodl,w,c
  9998  000976  6EF6               	movwf	tblptrl,c
  9999  000978  0EFD               	movlw	high _dpowers
 10000  00097A  20F4               	addwfc	prodh,w,c
 10001  00097C  6EF7               	movwf	tblptrh,c
 10002  00097E                     	if	0	;There are less than 3 active tblptr bytes
 10003  00097E                     	endif
 10004  00097E  0009               	tblrd		*+
 10005  000980  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10006  000984  000A               	tblrd		*-
 10007  000986  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10008  00098A  C023  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10009  00098E  C024  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10010  000992  EC83  F00E         	call	i2___lwdiv	;wreg free
 10011  000996  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10012  00099A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10013  00099E  0E00               	movlw	0
 10014  0009A0  6E0B               	movwf	i2___lwmod@divisor+1,c
 10015  0009A2  0E0A               	movlw	10
 10016  0009A4  6E0A               	movwf	i2___lwmod@divisor,c
 10017  0009A6  EC41  F00F         	call	i2___lwmod	;wreg free
 10018  0009AA  5008               	movf	?i2___lwmod,w,c
 10019  0009AC  0F30               	addlw	48
 10020  0009AE  6E28               	movwf	i2printf@c,c
 10021                           
 10022                           ;doprnt.c: 1491: break;
 10023  0009B0  D02B               	goto	i2l3566
 10024  0009B2                     i2l3558:
 10025                           
 10026                           ;doprnt.c: 1499: {
 10027                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10028  0009B2  C023  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10029  0009B6  C024  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10030  0009BA  5022               	movf	i2printf@prec,w,c
 10031  0009BC  0D02               	mullw	2
 10032  0009BE  0EDF               	movlw	low _hexpowers
 10033  0009C0  24F3               	addwf	prodl,w,c
 10034  0009C2  6EF6               	movwf	tblptrl,c
 10035  0009C4  0EFD               	movlw	high _hexpowers
 10036  0009C6  20F4               	addwfc	prodh,w,c
 10037  0009C8  6EF7               	movwf	tblptrh,c
 10038  0009CA                     	if	0	;There are less than 3 active tblptr bytes
 10039  0009CA                     	endif
 10040  0009CA  0009               	tblrd		*+
 10041  0009CC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10042  0009D0  000A               	tblrd		*-
 10043  0009D2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10044  0009D6  EC83  F00E         	call	i2___lwdiv	;wreg free
 10045  0009DA  5001               	movf	?i2___lwdiv,w,c
 10046  0009DC  0B0F               	andlw	15
 10047  0009DE  6E1F               	movwf	i2printf@idx,c
 10048                           
 10049                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10050  0009E0  501F               	movf	i2printf@idx,w,c
 10051  0009E2  0D01               	mullw	1
 10052  0009E4  0E91               	movlw	low STR_52
 10053  0009E6  24F3               	addwf	prodl,w,c
 10054  0009E8  6EF6               	movwf	tblptrl,c
 10055  0009EA  0EFF               	movlw	high STR_52
 10056  0009EC  20F4               	addwfc	prodh,w,c
 10057  0009EE  6EF7               	movwf	tblptrh,c
 10058  0009F0                     	if	0	;There are less than 3 active tblptr bytes
 10059  0009F0                     	endif
 10060  0009F0  0008               	tblrd		*
 10061  0009F2  CFF5 F028          	movff	tablat,i2printf@c
 10062                           
 10063                           ;doprnt.c: 1523: }
 10064                           
 10065                           ;doprnt.c: 1508: }
 10066                           ;doprnt.c: 1510: break;
 10067  0009F6  D008               	goto	i2l3566
 10068  0009F8                     i2l3564:
 10069  0009F8  5025               	movf	i2printf@flag,w,c
 10070  0009FA  0BC0               	andlw	192
 10071                           
 10072                           ; Switch size 1, requested type "space"
 10073                           ; Number of cases is 2, Range of values is 128 to 192
 10074                           ; switch strategies available:
 10075                           ; Name         Instructions Cycles
 10076                           ; simple_byte            7     4 (average)
 10077                           ;	Chosen strategy is simple_byte
 10078  0009FC  0A80               	xorlw	128	; case 128
 10079  0009FE  B4D8               	btfsc	status,2,c
 10080  000A00  D7D8               	goto	i2l3558
 10081  000A02  0A40               	xorlw	64	; case 192
 10082  000A04  B4D8               	btfsc	status,2,c
 10083  000A06  D7B3               	goto	i2l3556
 10084  000A08                     i2l3566:
 10085                           
 10086                           ;doprnt.c: 1524: (putch(c) );
 10087  000A08  5028               	movf	i2printf@c,w,c
 10088  000A0A  ECD6  F010         	call	i2_putch
 10089  000A0E                     i2l3568:
 10090  000A0E  0622               	decf	i2printf@prec,f,c
 10091  000A10  2822               	incf	i2printf@prec,w,c
 10092  000A12  A4D8               	btfss	status,2,c
 10093  000A14  D7F1               	goto	i2l3564
 10094  000A16                     i2l3570:
 10095  000A16  C00D  FFF6         	movff	i2printf@f,tblptrl
 10096  000A1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10097  000A1E  4A0D               	infsnz	i2printf@f,f,c
 10098  000A20  2A0E               	incf	i2printf@f+1,f,c
 10099  000A22                     	if	0	;tblptru may be non-zero
 10100  000A22                     	endif
 10101  000A22                     	if	0	;tblptru may be non-zero
 10102  000A22                     	endif
 10103  000A22  0008               	tblrd		*
 10104  000A24  CFF5 F028          	movff	tablat,i2printf@c
 10105  000A28  5028               	movf	i2printf@c,w,c
 10106  000A2A  B4D8               	btfsc	status,2,c
 10107  000A2C  0012               	return	
 10108  000A2E  D67E               	goto	i2l3448
 10109  000A30                     __end_ofi2_printf:
 10110                           	opt stack 0
 10111                           pclatu	equ	0xFFB
 10112                           pclath	equ	0xFFA
 10113                           tblptru	equ	0xFF8
 10114                           tblptrh	equ	0xFF7
 10115                           tblptrl	equ	0xFF6
 10116                           tablat	equ	0xFF5
 10117                           prodh	equ	0xFF4
 10118                           prodl	equ	0xFF3
 10119                           intcon	equ	0xFF2
 10120                           intcon2	equ	0xFF1
 10121                           intcon3	equ	0xFF0
 10122                           postinc0	equ	0xFEE
 10123                           fsr0h	equ	0xFEA
 10124                           fsr0l	equ	0xFE9
 10125                           wreg	equ	0xFE8
 10126                           plusw1	equ	0xFE3
 10127                           fsr1h	equ	0xFE2
 10128                           fsr1l	equ	0xFE1
 10129                           indf2	equ	0xFDF
 10130                           postinc2	equ	0xFDE
 10131                           postdec2	equ	0xFDD
 10132                           plusw2	equ	0xFDB
 10133                           fsr2h	equ	0xFDA
 10134                           fsr2l	equ	0xFD9
 10135                           status	equ	0xFD8
 10136                           
 10137 ;; *************** function i2_putch *****************
 10138 ;; Defined at:
 10139 ;;		line 25 in file "lcd.c"
 10140 ;; Parameters:    Size  Location     Type
 10141 ;;  data            1    wreg     unsigned char 
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  data            1    2[COMRAM] unsigned char 
 10144 ;; Return value:  Size  Location     Type
 10145 ;;                  1    wreg      void 
 10146 ;; Registers used:
 10147 ;;		wreg, status,2, status,0, cstack
 10148 ;; Tracked objects:
 10149 ;;		On entry : 0/0
 10150 ;;		On exit  : 0/0
 10151 ;;		Unchanged: 0/0
 10152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;Total ram usage:        1 bytes
 10158 ;; Hardware stack levels used:    1
 10159 ;; Hardware stack levels required when called:    1
 10160 ;; This function calls:
 10161 ;;		i2_lcdNibble
 10162 ;; This function is called by:
 10163 ;;		i2_printf
 10164 ;; This function uses a non-reentrant model
 10165 ;;
 10166                           
 10167                           	psect	text54
 10168  0021AC                     __ptext54:
 10169                           	opt stack 0
 10170  0021AC                     i2_putch:
 10171                           	opt stack 22
 10172                           
 10173                           ;incstack = 0
 10174                           ;i2putch@data stored from wreg
 10175  0021AC  6E03               	movwf	i2putch@data,c
 10176                           
 10177                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 10178  0021AE  848C               	bsf	3980,2,c	;volatile
 10179                           
 10180                           ;lcd.c: 27: lcdNibble(data);
 10181  0021B0  5003               	movf	i2putch@data,w,c
 10182  0021B2  EC58  F00E         	call	i2_lcdNibble
 10183  0021B6  0012               	return		;funcret
 10184  0021B8                     __end_ofi2_putch:
 10185                           	opt stack 0
 10186                           pclatu	equ	0xFFB
 10187                           pclath	equ	0xFFA
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           intcon3	equ	0xFF0
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           plusw1	equ	0xFE3
 10202                           fsr1h	equ	0xFE2
 10203                           fsr1l	equ	0xFE1
 10204                           indf2	equ	0xFDF
 10205                           postinc2	equ	0xFDE
 10206                           postdec2	equ	0xFDD
 10207                           plusw2	equ	0xFDB
 10208                           fsr2h	equ	0xFDA
 10209                           fsr2l	equ	0xFD9
 10210                           status	equ	0xFD8
 10211                           
 10212 ;; *************** function i2_isdigit *****************
 10213 ;; Defined at:
 10214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;  c               1    wreg     unsigned char 
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;  c               1    2[COMRAM] unsigned char 
 10219 ;; Return value:  Size  Location     Type
 10220 ;;		None               void
 10221 ;; Registers used:
 10222 ;;		wreg, status,2, status,0
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;Total ram usage:        3 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		i2_printf
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text55
 10242  0020E0                     __ptext55:
 10243                           	opt stack 0
 10244  0020E0                     i2_isdigit:
 10245                           	opt stack 23
 10246                           
 10247                           ;incstack = 0
 10248                           ;i2isdigit@c stored from wreg
 10249  0020E0  6E03               	movwf	i2isdigit@c,c
 10250  0020E2  0E00               	movlw	0
 10251  0020E4  6E02               	movwf	i2_isdigit$1056,c
 10252  0020E6  0E3A               	movlw	58
 10253  0020E8  6003               	cpfslt	i2isdigit@c,c
 10254  0020EA  D005               	goto	i2l3122
 10255  0020EC  0E2F               	movlw	47
 10256  0020EE  6403               	cpfsgt	i2isdigit@c,c
 10257  0020F0  D002               	goto	i2l3122
 10258  0020F2  0E01               	movlw	1
 10259  0020F4  6E02               	movwf	i2_isdigit$1056,c
 10260  0020F6                     i2l3122:
 10261  0020F6  C002  F001         	movff	i2_isdigit$1056,??i2_isdigit
 10262  0020FA  3001               	rrcf	??i2_isdigit,w,c
 10263  0020FC  0012               	return	
 10264  0020FE                     __end_ofi2_isdigit:
 10265                           	opt stack 0
 10266                           pclatu	equ	0xFFB
 10267                           pclath	equ	0xFFA
 10268                           tblptru	equ	0xFF8
 10269                           tblptrh	equ	0xFF7
 10270                           tblptrl	equ	0xFF6
 10271                           tablat	equ	0xFF5
 10272                           prodh	equ	0xFF4
 10273                           prodl	equ	0xFF3
 10274                           intcon	equ	0xFF2
 10275                           intcon2	equ	0xFF1
 10276                           intcon3	equ	0xFF0
 10277                           postinc0	equ	0xFEE
 10278                           fsr0h	equ	0xFEA
 10279                           fsr0l	equ	0xFE9
 10280                           wreg	equ	0xFE8
 10281                           plusw1	equ	0xFE3
 10282                           fsr1h	equ	0xFE2
 10283                           fsr1l	equ	0xFE1
 10284                           indf2	equ	0xFDF
 10285                           postinc2	equ	0xFDE
 10286                           postdec2	equ	0xFDD
 10287                           plusw2	equ	0xFDB
 10288                           fsr2h	equ	0xFDA
 10289                           fsr2l	equ	0xFD9
 10290                           status	equ	0xFD8
 10291                           
 10292 ;; *************** function i2___wmul *****************
 10293 ;; Defined at:
 10294 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10295 ;; Parameters:    Size  Location     Type
 10296 ;;  multiplier      2    0[COMRAM] unsigned int 
 10297 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;  __wmul          2    4[COMRAM] unsigned int 
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  2    0[COMRAM] unsigned int 
 10302 ;; Registers used:
 10303 ;;		wreg, status,2, status,0, prodl, prodh
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;Total ram usage:        6 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; This function calls:
 10316 ;;		Nothing
 10317 ;; This function is called by:
 10318 ;;		_simulate
 10319 ;;		_HexDecToDec2
 10320 ;;		_WriteRun
 10321 ;;		i2_printf
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text56
 10326  00205C                     __ptext56:
 10327                           	opt stack 0
 10328  00205C                     i2___wmul:
 10329                           	opt stack 23
 10330                           
 10331                           ;incstack = 0
 10332  00205C  5001               	movf	i2___wmul@multiplier,w,c
 10333  00205E  0203               	mulwf	i2___wmul@multiplicand,c
 10334  002060  CFF3 F005          	movff	prodl,i2___wmul@product
 10335  002064  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10336  002068  5001               	movf	i2___wmul@multiplier,w,c
 10337  00206A  0204               	mulwf	i2___wmul@multiplicand+1,c
 10338  00206C  50F3               	movf	prodl,w,c
 10339  00206E  2606               	addwf	i2___wmul@product+1,f,c
 10340  002070  5002               	movf	i2___wmul@multiplier+1,w,c
 10341  002072  0203               	mulwf	i2___wmul@multiplicand,c
 10342  002074  50F3               	movf	prodl,w,c
 10343  002076  2606               	addwf	i2___wmul@product+1,f,c
 10344  002078  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10345  00207C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10346  002080  0012               	return	
 10347  002082                     __end_ofi2___wmul:
 10348                           	opt stack 0
 10349                           pclatu	equ	0xFFB
 10350                           pclath	equ	0xFFA
 10351                           tblptru	equ	0xFF8
 10352                           tblptrh	equ	0xFF7
 10353                           tblptrl	equ	0xFF6
 10354                           tablat	equ	0xFF5
 10355                           prodh	equ	0xFF4
 10356                           prodl	equ	0xFF3
 10357                           intcon	equ	0xFF2
 10358                           intcon2	equ	0xFF1
 10359                           intcon3	equ	0xFF0
 10360                           postinc0	equ	0xFEE
 10361                           fsr0h	equ	0xFEA
 10362                           fsr0l	equ	0xFE9
 10363                           wreg	equ	0xFE8
 10364                           plusw1	equ	0xFE3
 10365                           fsr1h	equ	0xFE2
 10366                           fsr1l	equ	0xFE1
 10367                           indf2	equ	0xFDF
 10368                           postinc2	equ	0xFDE
 10369                           postdec2	equ	0xFDD
 10370                           plusw2	equ	0xFDB
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           
 10375 ;; *************** function i2___lwmod *****************
 10376 ;; Defined at:
 10377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;  dividend        2    7[COMRAM] unsigned int 
 10380 ;;  divisor         2    9[COMRAM] unsigned int 
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  2    7[COMRAM] unsigned int 
 10385 ;; Registers used:
 10386 ;;		wreg, status,2, status,0
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;Total ram usage:        5 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		i2_printf
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text57
 10406  001E82                     __ptext57:
 10407                           	opt stack 0
 10408  001E82                     i2___lwmod:
 10409                           	opt stack 23
 10410                           
 10411                           ;incstack = 0
 10412  001E82  500A               	movf	i2___lwmod@divisor,w,c
 10413  001E84  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10414  001E86  B4D8               	btfsc	status,2,c
 10415  001E88  D018               	goto	i2l937
 10416  001E8A  0E01               	movlw	1
 10417  001E8C  6E0C               	movwf	i2___lwmod@counter,c
 10418  001E8E  D004               	goto	i2l3154
 10419  001E90                     i2l3152:
 10420  001E90  90D8               	bcf	status,0,c
 10421  001E92  360A               	rlcf	i2___lwmod@divisor,f,c
 10422  001E94  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10423  001E96  2A0C               	incf	i2___lwmod@counter,f,c
 10424  001E98                     i2l3154:
 10425  001E98  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10426  001E9A  D7FA               	goto	i2l3152
 10427  001E9C                     i2l3156:
 10428  001E9C  500A               	movf	i2___lwmod@divisor,w,c
 10429  001E9E  5C08               	subwf	i2___lwmod@dividend,w,c
 10430  001EA0  500B               	movf	i2___lwmod@divisor+1,w,c
 10431  001EA2  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10432  001EA4  A0D8               	btfss	status,0,c
 10433  001EA6  D004               	goto	i2l3160
 10434  001EA8  500A               	movf	i2___lwmod@divisor,w,c
 10435  001EAA  5E08               	subwf	i2___lwmod@dividend,f,c
 10436  001EAC  500B               	movf	i2___lwmod@divisor+1,w,c
 10437  001EAE  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10438  001EB0                     i2l3160:
 10439  001EB0  90D8               	bcf	status,0,c
 10440  001EB2  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10441  001EB4  320A               	rrcf	i2___lwmod@divisor,f,c
 10442  001EB6  2E0C               	decfsz	i2___lwmod@counter,f,c
 10443  001EB8  D7F1               	goto	i2l3156
 10444  001EBA                     i2l937:
 10445  001EBA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10446  001EBE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10447  001EC2  0012               	return		;funcret
 10448  001EC4                     __end_ofi2___lwmod:
 10449                           	opt stack 0
 10450                           pclatu	equ	0xFFB
 10451                           pclath	equ	0xFFA
 10452                           tblptru	equ	0xFF8
 10453                           tblptrh	equ	0xFF7
 10454                           tblptrl	equ	0xFF6
 10455                           tablat	equ	0xFF5
 10456                           prodh	equ	0xFF4
 10457                           prodl	equ	0xFF3
 10458                           intcon	equ	0xFF2
 10459                           intcon2	equ	0xFF1
 10460                           intcon3	equ	0xFF0
 10461                           postinc0	equ	0xFEE
 10462                           fsr0h	equ	0xFEA
 10463                           fsr0l	equ	0xFE9
 10464                           wreg	equ	0xFE8
 10465                           plusw1	equ	0xFE3
 10466                           fsr1h	equ	0xFE2
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           plusw2	equ	0xFDB
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function i2___lwdiv *****************
 10477 ;; Defined at:
 10478 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  dividend        2    0[COMRAM] unsigned int 
 10481 ;;  divisor         2    2[COMRAM] unsigned int 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10484 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  2    0[COMRAM] unsigned int 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;Total ram usage:        7 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; This function calls:
 10501 ;;		Nothing
 10502 ;; This function is called by:
 10503 ;;		i2_printf
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text58
 10508  001D06                     __ptext58:
 10509                           	opt stack 0
 10510  001D06                     i2___lwdiv:
 10511                           	opt stack 23
 10512                           
 10513                           ;incstack = 0
 10514  001D06  0E00               	movlw	0
 10515  001D08  6E06               	movwf	i2___lwdiv@quotient+1,c
 10516  001D0A  0E00               	movlw	0
 10517  001D0C  6E05               	movwf	i2___lwdiv@quotient,c
 10518  001D0E  5003               	movf	i2___lwdiv@divisor,w,c
 10519  001D10  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10520  001D12  B4D8               	btfsc	status,2,c
 10521  001D14  D01C               	goto	i2l927
 10522  001D16  0E01               	movlw	1
 10523  001D18  6E07               	movwf	i2___lwdiv@counter,c
 10524  001D1A  D004               	goto	i2l3134
 10525  001D1C                     i2l3132:
 10526  001D1C  90D8               	bcf	status,0,c
 10527  001D1E  3603               	rlcf	i2___lwdiv@divisor,f,c
 10528  001D20  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10529  001D22  2A07               	incf	i2___lwdiv@counter,f,c
 10530  001D24                     i2l3134:
 10531  001D24  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10532  001D26  D7FA               	goto	i2l3132
 10533  001D28                     i2l3136:
 10534  001D28  90D8               	bcf	status,0,c
 10535  001D2A  3605               	rlcf	i2___lwdiv@quotient,f,c
 10536  001D2C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10537  001D2E  5003               	movf	i2___lwdiv@divisor,w,c
 10538  001D30  5C01               	subwf	i2___lwdiv@dividend,w,c
 10539  001D32  5004               	movf	i2___lwdiv@divisor+1,w,c
 10540  001D34  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10541  001D36  A0D8               	btfss	status,0,c
 10542  001D38  D005               	goto	i2l3144
 10543  001D3A  5003               	movf	i2___lwdiv@divisor,w,c
 10544  001D3C  5E01               	subwf	i2___lwdiv@dividend,f,c
 10545  001D3E  5004               	movf	i2___lwdiv@divisor+1,w,c
 10546  001D40  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10547  001D42  8005               	bsf	i2___lwdiv@quotient,0,c
 10548  001D44                     i2l3144:
 10549  001D44  90D8               	bcf	status,0,c
 10550  001D46  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10551  001D48  3203               	rrcf	i2___lwdiv@divisor,f,c
 10552  001D4A  2E07               	decfsz	i2___lwdiv@counter,f,c
 10553  001D4C  D7ED               	goto	i2l3136
 10554  001D4E                     i2l927:
 10555  001D4E  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10556  001D52  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10557  001D56  0012               	return		;funcret
 10558  001D58                     __end_ofi2___lwdiv:
 10559                           	opt stack 0
 10560                           pclatu	equ	0xFFB
 10561                           pclath	equ	0xFFA
 10562                           tblptru	equ	0xFF8
 10563                           tblptrh	equ	0xFF7
 10564                           tblptrl	equ	0xFF6
 10565                           tablat	equ	0xFF5
 10566                           prodh	equ	0xFF4
 10567                           prodl	equ	0xFF3
 10568                           intcon	equ	0xFF2
 10569                           intcon2	equ	0xFF1
 10570                           intcon3	equ	0xFF0
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           plusw1	equ	0xFE3
 10576                           fsr1h	equ	0xFE2
 10577                           fsr1l	equ	0xFE1
 10578                           indf2	equ	0xFDF
 10579                           postinc2	equ	0xFDE
 10580                           postdec2	equ	0xFDD
 10581                           plusw2	equ	0xFDB
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8
 10585                           
 10586 ;; *************** function i2_line1 *****************
 10587 ;; Defined at:
 10588 ;;		line 58 in file "lcd.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;		None
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;		None
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  1    wreg      void 
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, status,0, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;Total ram usage:        0 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    2
 10609 ;; This function calls:
 10610 ;;		i2_lcdInst
 10611 ;; This function is called by:
 10612 ;;		_simulate
 10613 ;;		_showInfo
 10614 ;;		_PermLog
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text59
 10619  002208                     __ptext59:
 10620                           	opt stack 0
 10621  002208                     i2_line1:
 10622                           	opt stack 22
 10623                           
 10624                           ;lcd.c: 59: lcdInst(0b11000000);
 10625                           
 10626                           ;incstack = 0
 10627  002208  0EC0               	movlw	192
 10628  00220A  ECDC  F010         	call	i2_lcdInst
 10629  00220E  0012               	return		;funcret
 10630  002210                     __end_ofi2_line1:
 10631                           	opt stack 0
 10632                           pclatu	equ	0xFFB
 10633                           pclath	equ	0xFFA
 10634                           tblptru	equ	0xFF8
 10635                           tblptrh	equ	0xFF7
 10636                           tblptrl	equ	0xFF6
 10637                           tablat	equ	0xFF5
 10638                           prodh	equ	0xFF4
 10639                           prodl	equ	0xFF3
 10640                           intcon	equ	0xFF2
 10641                           intcon2	equ	0xFF1
 10642                           intcon3	equ	0xFF0
 10643                           postinc0	equ	0xFEE
 10644                           fsr0h	equ	0xFEA
 10645                           fsr0l	equ	0xFE9
 10646                           wreg	equ	0xFE8
 10647                           plusw1	equ	0xFE3
 10648                           fsr1h	equ	0xFE2
 10649                           fsr1l	equ	0xFE1
 10650                           indf2	equ	0xFDF
 10651                           postinc2	equ	0xFDE
 10652                           postdec2	equ	0xFDD
 10653                           plusw2	equ	0xFDB
 10654                           fsr2h	equ	0xFDA
 10655                           fsr2l	equ	0xFD9
 10656                           status	equ	0xFD8
 10657                           
 10658 ;; *************** function i2_line0 *****************
 10659 ;; Defined at:
 10660 ;;		line 54 in file "lcd.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;		None
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, status,2, status,0, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;Total ram usage:        0 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    2
 10681 ;; This function calls:
 10682 ;;		i2_lcdInst
 10683 ;; This function is called by:
 10684 ;;		_simulate
 10685 ;;		_showInfo
 10686 ;;		_stopMoving
 10687 ;;		_PermLog
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text60
 10692  002210                     __ptext60:
 10693                           	opt stack 0
 10694  002210                     i2_line0:
 10695                           	opt stack 22
 10696                           
 10697                           ;lcd.c: 55: lcdInst(0b10000000);
 10698                           
 10699                           ;incstack = 0
 10700  002210  0E80               	movlw	128
 10701  002212  ECDC  F010         	call	i2_lcdInst
 10702  002216  0012               	return		;funcret
 10703  002218                     __end_ofi2_line0:
 10704                           	opt stack 0
 10705                           pclatu	equ	0xFFB
 10706                           pclath	equ	0xFFA
 10707                           tblptru	equ	0xFF8
 10708                           tblptrh	equ	0xFF7
 10709                           tblptrl	equ	0xFF6
 10710                           tablat	equ	0xFF5
 10711                           prodh	equ	0xFF4
 10712                           prodl	equ	0xFF3
 10713                           intcon	equ	0xFF2
 10714                           intcon2	equ	0xFF1
 10715                           intcon3	equ	0xFF0
 10716                           postinc0	equ	0xFEE
 10717                           fsr0h	equ	0xFEA
 10718                           fsr0l	equ	0xFE9
 10719                           wreg	equ	0xFE8
 10720                           plusw1	equ	0xFE3
 10721                           fsr1h	equ	0xFE2
 10722                           fsr1l	equ	0xFE1
 10723                           indf2	equ	0xFDF
 10724                           postinc2	equ	0xFDE
 10725                           postdec2	equ	0xFDD
 10726                           plusw2	equ	0xFDB
 10727                           fsr2h	equ	0xFDA
 10728                           fsr2l	equ	0xFD9
 10729                           status	equ	0xFD8
 10730                           
 10731 ;; *************** function i2_lcdInst *****************
 10732 ;; Defined at:
 10733 ;;		line 20 in file "lcd.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  data            1    wreg     unsigned char 
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;  data            1    2[COMRAM] unsigned char 
 10738 ;; Return value:  Size  Location     Type
 10739 ;;                  1    wreg      void 
 10740 ;; Registers used:
 10741 ;;		wreg, status,2, status,0, cstack
 10742 ;; Tracked objects:
 10743 ;;		On entry : 0/0
 10744 ;;		On exit  : 0/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10751 ;;Total ram usage:        1 bytes
 10752 ;; Hardware stack levels used:    1
 10753 ;; Hardware stack levels required when called:    1
 10754 ;; This function calls:
 10755 ;;		i2_lcdNibble
 10756 ;; This function is called by:
 10757 ;;		i2_line0
 10758 ;;		i2_line1
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           	psect	text61
 10763  0021B8                     __ptext61:
 10764                           	opt stack 0
 10765  0021B8                     i2_lcdInst:
 10766                           	opt stack 22
 10767                           
 10768                           ;incstack = 0
 10769                           ;i2lcdInst@data stored from wreg
 10770  0021B8  6E03               	movwf	i2lcdInst@data,c
 10771                           
 10772                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 10773  0021BA  948C               	bcf	3980,2,c	;volatile
 10774                           
 10775                           ;lcd.c: 22: lcdNibble(data);
 10776  0021BC  5003               	movf	i2lcdInst@data,w,c
 10777  0021BE  EC58  F00E         	call	i2_lcdNibble
 10778  0021C2  0012               	return		;funcret
 10779  0021C4                     __end_ofi2_lcdInst:
 10780                           	opt stack 0
 10781                           pclatu	equ	0xFFB
 10782                           pclath	equ	0xFFA
 10783                           tblptru	equ	0xFF8
 10784                           tblptrh	equ	0xFF7
 10785                           tblptrl	equ	0xFF6
 10786                           tablat	equ	0xFF5
 10787                           prodh	equ	0xFF4
 10788                           prodl	equ	0xFF3
 10789                           intcon	equ	0xFF2
 10790                           intcon2	equ	0xFF1
 10791                           intcon3	equ	0xFF0
 10792                           postinc0	equ	0xFEE
 10793                           fsr0h	equ	0xFEA
 10794                           fsr0l	equ	0xFE9
 10795                           wreg	equ	0xFE8
 10796                           plusw1	equ	0xFE3
 10797                           fsr1h	equ	0xFE2
 10798                           fsr1l	equ	0xFE1
 10799                           indf2	equ	0xFDF
 10800                           postinc2	equ	0xFDE
 10801                           postdec2	equ	0xFDD
 10802                           plusw2	equ	0xFDB
 10803                           fsr2h	equ	0xFDA
 10804                           fsr2l	equ	0xFD9
 10805                           status	equ	0xFD8
 10806                           
 10807 ;; *************** function i2_lcdNibble *****************
 10808 ;; Defined at:
 10809 ;;		line 30 in file "lcd.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;  data            1    wreg     unsigned char 
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;  data            1    1[COMRAM] unsigned char 
 10814 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  1    wreg      void 
 10817 ;; Registers used:
 10818 ;;		wreg, status,2, status,0
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10825 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;Total ram usage:        2 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; This function calls:
 10831 ;;		Nothing
 10832 ;; This function is called by:
 10833 ;;		i2_lcdInst
 10834 ;;		i2_putch
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           	psect	text62
 10839  001CB0                     __ptext62:
 10840                           	opt stack 0
 10841  001CB0                     i2_lcdNibble:
 10842                           	opt stack 22
 10843                           
 10844                           ;incstack = 0
 10845                           ;i2lcdNibble@data stored from wreg
 10846  001CB0  6E02               	movwf	i2lcdNibble@data,c
 10847                           
 10848                           ;lcd.c: 32: char temp = data & 0xF0;
 10849  001CB2  5002               	movf	i2lcdNibble@data,w,c
 10850  001CB4  0BF0               	andlw	240
 10851  001CB6  6E01               	movwf	i2lcdNibble@temp,c
 10852                           
 10853                           ;lcd.c: 33: LATD = LATD & 0x0F;
 10854  001CB8  508C               	movf	3980,w,c	;volatile
 10855  001CBA  0B0F               	andlw	15
 10856  001CBC  6E8C               	movwf	3980,c	;volatile
 10857                           
 10858                           ;lcd.c: 34: LATD = temp | LATD;
 10859  001CBE  5001               	movf	i2lcdNibble@temp,w,c
 10860  001CC0  108C               	iorwf	3980,w,c	;volatile
 10861  001CC2  6E8C               	movwf	3980,c	;volatile
 10862                           
 10863                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 10864  001CC4  968C               	bcf	3980,3,c	;volatile
 10865                           
 10866                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10867  001CC6  0E10               	movlw	16
 10868  001CC8                     i2u318_47:
 10869  001CC8  2EE8               	decfsz	wreg,f,c
 10870  001CCA  D7FE               	bra	i2u318_47
 10871  001CCC  D000               	nop2	
 10872                           
 10873                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 10874  001CCE  868C               	bsf	3980,3,c	;volatile
 10875                           
 10876                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10877  001CD0  0E10               	movlw	16
 10878  001CD2                     i2u319_47:
 10879  001CD2  2EE8               	decfsz	wreg,f,c
 10880  001CD4  D7FE               	bra	i2u319_47
 10881  001CD6  D000               	nop2	
 10882                           
 10883                           ;lcd.c: 41: data = data << 4;
 10884  001CD8  3802               	swapf	i2lcdNibble@data,w,c
 10885  001CDA  0BF0               	andlw	240
 10886  001CDC  6E02               	movwf	i2lcdNibble@data,c
 10887                           
 10888                           ;lcd.c: 43: temp = data & 0xF0;
 10889  001CDE  5002               	movf	i2lcdNibble@data,w,c
 10890  001CE0  0BF0               	andlw	240
 10891  001CE2  6E01               	movwf	i2lcdNibble@temp,c
 10892                           
 10893                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10894  001CE4  508C               	movf	3980,w,c	;volatile
 10895  001CE6  0B0F               	andlw	15
 10896  001CE8  6E8C               	movwf	3980,c	;volatile
 10897                           
 10898                           ;lcd.c: 45: LATD = temp | LATD;
 10899  001CEA  5001               	movf	i2lcdNibble@temp,w,c
 10900  001CEC  108C               	iorwf	3980,w,c	;volatile
 10901  001CEE  6E8C               	movwf	3980,c	;volatile
 10902                           
 10903                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10904  001CF0  968C               	bcf	3980,3,c	;volatile
 10905                           
 10906                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10907  001CF2  0E10               	movlw	16
 10908  001CF4                     i2u320_47:
 10909  001CF4  2EE8               	decfsz	wreg,f,c
 10910  001CF6  D7FE               	bra	i2u320_47
 10911  001CF8  D000               	nop2	
 10912                           
 10913                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10914  001CFA  868C               	bsf	3980,3,c	;volatile
 10915                           
 10916                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10917  001CFC  0E10               	movlw	16
 10918  001CFE                     i2u321_47:
 10919  001CFE  2EE8               	decfsz	wreg,f,c
 10920  001D00  D7FE               	bra	i2u321_47
 10921  001D02  D000               	nop2	
 10922  001D04  0012               	return		;funcret
 10923  001D06                     __end_ofi2_lcdNibble:
 10924                           	opt stack 0
 10925                           pclatu	equ	0xFFB
 10926                           pclath	equ	0xFFA
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           intcon	equ	0xFF2
 10934                           intcon2	equ	0xFF1
 10935                           intcon3	equ	0xFF0
 10936                           postinc0	equ	0xFEE
 10937                           fsr0h	equ	0xFEA
 10938                           fsr0l	equ	0xFE9
 10939                           wreg	equ	0xFE8
 10940                           plusw1	equ	0xFE3
 10941                           fsr1h	equ	0xFE2
 10942                           fsr1l	equ	0xFE1
 10943                           indf2	equ	0xFDF
 10944                           postinc2	equ	0xFDE
 10945                           postdec2	equ	0xFDD
 10946                           plusw2	equ	0xFDB
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _captureKeypad *****************
 10952 ;; Defined at:
 10953 ;;		line 13 in file "modules.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  keypress        1    2[COMRAM] unsigned char 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  2    0[COMRAM] unsigned int 
 10960 ;; Registers used:
 10961 ;;		wreg, status,2, status,0
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;Total ram usage:        3 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; This function calls:
 10974 ;;		Nothing
 10975 ;; This function is called by:
 10976 ;;		_showInfo
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text63
 10981  0020FE                     __ptext63:
 10982                           	opt stack 0
 10983  0020FE                     _captureKeypad:
 10984                           	opt stack 23
 10985                           
 10986                           ;modules.c: 14: (INTCONbits.GIE = 0);
 10987                           
 10988                           ;incstack = 0
 10989  0020FE  9EF2               	bcf	intcon,7,c	;volatile
 10990  002100                     i2l216:
 10991  002100  A281               	btfss	3969,1,c	;volatile
 10992  002102  D7FE               	goto	i2l216
 10993                           
 10994                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10995  002104  3881               	swapf	3969,w,c	;volatile
 10996  002106  0B0F               	andlw	15
 10997  002108  0B0F               	andlw	15
 10998  00210A  6E03               	movwf	captureKeypad@keypress,c
 10999  00210C                     i2l219:
 11000  00210C  B281               	btfsc	3969,1,c	;volatile
 11001  00210E  D7FE               	goto	i2l219
 11002                           
 11003                           ;modules.c: 18: INT1IF = 0;
 11004  002110  90F0               	bcf	intcon3,0,c	;volatile
 11005                           
 11006                           ;modules.c: 19: (INTCONbits.GIE = 1);
 11007  002112  8EF2               	bsf	intcon,7,c	;volatile
 11008                           
 11009                           ;modules.c: 20: return keypress;
 11010  002114  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 11011  002118  6A02               	clrf	?_captureKeypad+1,c
 11012  00211A  0012               	return		;funcret
 11013  00211C                     __end_of_captureKeypad:
 11014                           	opt stack 0
 11015                           pclatu	equ	0xFFB
 11016                           pclath	equ	0xFFA
 11017                           tblptru	equ	0xFF8
 11018                           tblptrh	equ	0xFF7
 11019                           tblptrl	equ	0xFF6
 11020                           tablat	equ	0xFF5
 11021                           prodh	equ	0xFF4
 11022                           prodl	equ	0xFF3
 11023                           intcon	equ	0xFF2
 11024                           intcon2	equ	0xFF1
 11025                           intcon3	equ	0xFF0
 11026                           postinc0	equ	0xFEE
 11027                           fsr0h	equ	0xFEA
 11028                           fsr0l	equ	0xFE9
 11029                           wreg	equ	0xFE8
 11030                           plusw1	equ	0xFE3
 11031                           fsr1h	equ	0xFE2
 11032                           fsr1l	equ	0xFE1
 11033                           indf2	equ	0xFDF
 11034                           postinc2	equ	0xFDE
 11035                           postdec2	equ	0xFDD
 11036                           plusw2	equ	0xFDB
 11037                           fsr2h	equ	0xFDA
 11038                           fsr2l	equ	0xFD9
 11039                           status	equ	0xFD8
 11040                           
 11041 ;; *************** function _ReadRun *****************
 11042 ;; Defined at:
 11043 ;;		line 66 in file "eeprom.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;  backruns        1    wreg     unsigned char 
 11046 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 11047 ;;		 -> PermLog@sorted(4), 
 11048 ;;  time            2    4[COMRAM] PTR unsigned int 
 11049 ;;		 -> PermLog@time(2), 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  backruns        1   10[COMRAM] unsigned char 
 11052 ;;  add             2   11[COMRAM] unsigned int 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      void 
 11055 ;; Registers used:
 11056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;Total ram usage:       11 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    1
 11069 ;; This function calls:
 11070 ;;		_back
 11071 ;;		i2_ReadEE
 11072 ;; This function is called by:
 11073 ;;		_PermLog
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text64
 11078  000EF0                     __ptext64:
 11079                           	opt stack 0
 11080  000EF0                     _ReadRun:
 11081                           	opt stack 23
 11082                           
 11083                           ;incstack = 0
 11084                           ;ReadRun@backruns stored from wreg
 11085  000EF0  6E0B               	movwf	ReadRun@backruns,c
 11086                           
 11087                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 11088  000EF2  500B               	movf	ReadRun@backruns,w,c
 11089  000EF4  EC8E  F010         	call	_back
 11090  000EF8  6E07               	movwf	??_ReadRun& (0+255),c
 11091  000EFA  5007               	movf	??_ReadRun,w,c
 11092  000EFC  0D05               	mullw	5
 11093  000EFE  CFF3 F00C          	movff	prodl,ReadRun@add
 11094  000F02  CFF4 F00D          	movff	prodh,ReadRun@add+1
 11095                           
 11096                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 11097  000F06  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11098  000F0A  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11099  000F0E  90D8               	bcf	status,0,c
 11100  000F10  3607               	rlcf	??_ReadRun,f,c
 11101  000F12  3608               	rlcf	??_ReadRun+1,f,c
 11102  000F14  90D8               	bcf	status,0,c
 11103  000F16  3607               	rlcf	??_ReadRun,f,c
 11104  000F18  3608               	rlcf	??_ReadRun+1,f,c
 11105  000F1A  90D8               	bcf	status,0,c
 11106  000F1C  3607               	rlcf	??_ReadRun,f,c
 11107  000F1E  3608               	rlcf	??_ReadRun+1,f,c
 11108  000F20  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11109  000F24  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11110  000F28  ECA8  F010         	call	i2_ReadEE	;wreg free
 11111  000F2C  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 11112  000F2E  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 11113  000F30  C005  FFD9         	movff	ReadRun@time,fsr2l
 11114  000F34  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 11115  000F38  C009  FFDE         	movff	??_ReadRun+2,postinc2
 11116  000F3C  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 11117  000F40  4A0C               	infsnz	ReadRun@add,f,c
 11118  000F42  2A0D               	incf	ReadRun@add+1,f,c
 11119                           
 11120                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 11121  000F44  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11122  000F48  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11123  000F4C  90D8               	bcf	status,0,c
 11124  000F4E  3607               	rlcf	??_ReadRun,f,c
 11125  000F50  3608               	rlcf	??_ReadRun+1,f,c
 11126  000F52  90D8               	bcf	status,0,c
 11127  000F54  3607               	rlcf	??_ReadRun,f,c
 11128  000F56  3608               	rlcf	??_ReadRun+1,f,c
 11129  000F58  90D8               	bcf	status,0,c
 11130  000F5A  3607               	rlcf	??_ReadRun,f,c
 11131  000F5C  3608               	rlcf	??_ReadRun+1,f,c
 11132  000F5E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11133  000F62  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11134  000F66  ECA8  F010         	call	i2_ReadEE	;wreg free
 11135  000F6A  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 11136  000F6E  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 11137  000F72  6EDF               	movwf	indf2,c
 11138  000F74  4A0C               	infsnz	ReadRun@add,f,c
 11139  000F76  2A0D               	incf	ReadRun@add+1,f,c
 11140                           
 11141                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 11142  000F78  EE20 F001          	lfsr	2,1
 11143  000F7C  5003               	movf	ReadRun@sorted,w,c
 11144  000F7E  26D9               	addwf	fsr2l,f,c
 11145  000F80  5004               	movf	ReadRun@sorted+1,w,c
 11146  000F82  22DA               	addwfc	fsr2h,f,c
 11147  000F84  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11148  000F88  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11149  000F8C  90D8               	bcf	status,0,c
 11150  000F8E  3607               	rlcf	??_ReadRun,f,c
 11151  000F90  3608               	rlcf	??_ReadRun+1,f,c
 11152  000F92  90D8               	bcf	status,0,c
 11153  000F94  3607               	rlcf	??_ReadRun,f,c
 11154  000F96  3608               	rlcf	??_ReadRun+1,f,c
 11155  000F98  90D8               	bcf	status,0,c
 11156  000F9A  3607               	rlcf	??_ReadRun,f,c
 11157  000F9C  3608               	rlcf	??_ReadRun+1,f,c
 11158  000F9E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11159  000FA2  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11160  000FA6  ECA8  F010         	call	i2_ReadEE	;wreg free
 11161  000FAA  6EDF               	movwf	indf2,c
 11162  000FAC  4A0C               	infsnz	ReadRun@add,f,c
 11163  000FAE  2A0D               	incf	ReadRun@add+1,f,c
 11164                           
 11165                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 11166  000FB0  EE20 F002          	lfsr	2,2
 11167  000FB4  5003               	movf	ReadRun@sorted,w,c
 11168  000FB6  26D9               	addwf	fsr2l,f,c
 11169  000FB8  5004               	movf	ReadRun@sorted+1,w,c
 11170  000FBA  22DA               	addwfc	fsr2h,f,c
 11171  000FBC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11172  000FC0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11173  000FC4  90D8               	bcf	status,0,c
 11174  000FC6  3607               	rlcf	??_ReadRun,f,c
 11175  000FC8  3608               	rlcf	??_ReadRun+1,f,c
 11176  000FCA  90D8               	bcf	status,0,c
 11177  000FCC  3607               	rlcf	??_ReadRun,f,c
 11178  000FCE  3608               	rlcf	??_ReadRun+1,f,c
 11179  000FD0  90D8               	bcf	status,0,c
 11180  000FD2  3607               	rlcf	??_ReadRun,f,c
 11181  000FD4  3608               	rlcf	??_ReadRun+1,f,c
 11182  000FD6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11183  000FDA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11184  000FDE  ECA8  F010         	call	i2_ReadEE	;wreg free
 11185  000FE2  6EDF               	movwf	indf2,c
 11186  000FE4  4A0C               	infsnz	ReadRun@add,f,c
 11187  000FE6  2A0D               	incf	ReadRun@add+1,f,c
 11188                           
 11189                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 11190  000FE8  EE20 F003          	lfsr	2,3
 11191  000FEC  5003               	movf	ReadRun@sorted,w,c
 11192  000FEE  26D9               	addwf	fsr2l,f,c
 11193  000FF0  5004               	movf	ReadRun@sorted+1,w,c
 11194  000FF2  22DA               	addwfc	fsr2h,f,c
 11195  000FF4  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11196  000FF8  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11197  000FFC  90D8               	bcf	status,0,c
 11198  000FFE  3607               	rlcf	??_ReadRun,f,c
 11199  001000  3608               	rlcf	??_ReadRun+1,f,c
 11200  001002  90D8               	bcf	status,0,c
 11201  001004  3607               	rlcf	??_ReadRun,f,c
 11202  001006  3608               	rlcf	??_ReadRun+1,f,c
 11203  001008  90D8               	bcf	status,0,c
 11204  00100A  3607               	rlcf	??_ReadRun,f,c
 11205  00100C  3608               	rlcf	??_ReadRun+1,f,c
 11206  00100E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11207  001012  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11208  001016  ECA8  F010         	call	i2_ReadEE	;wreg free
 11209  00101A  6EDF               	movwf	indf2,c
 11210  00101C  4A0C               	infsnz	ReadRun@add,f,c
 11211  00101E  2A0D               	incf	ReadRun@add+1,f,c
 11212  001020  0012               	return		;funcret
 11213  001022                     __end_of_ReadRun:
 11214                           	opt stack 0
 11215                           pclatu	equ	0xFFB
 11216                           pclath	equ	0xFFA
 11217                           tblptru	equ	0xFF8
 11218                           tblptrh	equ	0xFF7
 11219                           tblptrl	equ	0xFF6
 11220                           tablat	equ	0xFF5
 11221                           prodh	equ	0xFF4
 11222                           prodl	equ	0xFF3
 11223                           intcon	equ	0xFF2
 11224                           intcon2	equ	0xFF1
 11225                           intcon3	equ	0xFF0
 11226                           postinc0	equ	0xFEE
 11227                           fsr0h	equ	0xFEA
 11228                           fsr0l	equ	0xFE9
 11229                           wreg	equ	0xFE8
 11230                           plusw1	equ	0xFE3
 11231                           fsr1h	equ	0xFE2
 11232                           fsr1l	equ	0xFE1
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           plusw2	equ	0xFDB
 11237                           fsr2h	equ	0xFDA
 11238                           fsr2l	equ	0xFD9
 11239                           status	equ	0xFD8
 11240                           
 11241 ;; *************** function i2_ReadEE *****************
 11242 ;; Defined at:
 11243 ;;		line 16 in file "eeprom.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;  address         2    0[COMRAM] unsigned int 
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;		None
 11248 ;; Return value:  Size  Location     Type
 11249 ;;                  1    wreg      unsigned char 
 11250 ;; Registers used:
 11251 ;;		wreg, status,2
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;Total ram usage:        2 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; This function calls:
 11264 ;;		Nothing
 11265 ;; This function is called by:
 11266 ;;		_ReadRun
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           	psect	text65
 11271  002150                     __ptext65:
 11272                           	opt stack 0
 11273  002150                     i2_ReadEE:
 11274                           	opt stack 23
 11275                           
 11276                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 11277                           
 11278                           ;incstack = 0
 11279  002150  5002               	movf	i2ReadEE@address+1,w,c
 11280  002152  6EAA               	movwf	4010,c	;volatile
 11281                           
 11282                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 11283  002154  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 11284                           
 11285                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 11286  002158  9EA6               	bcf	4006,7,c	;volatile
 11287                           
 11288                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 11289  00215A  9CA6               	bcf	4006,6,c	;volatile
 11290                           
 11291                           ;eeprom.c: 24: EECON1bits.RD = 1;
 11292  00215C  80A6               	bsf	4006,0,c	;volatile
 11293  00215E                     i2l423:
 11294  00215E  B0A6               	btfsc	4006,0,c	;volatile
 11295  002160  D7FE               	goto	i2l423
 11296                           
 11297                           ;eeprom.c: 30: return EEDATA;
 11298  002162  50A8               	movf	4008,w,c	;volatile
 11299  002164  0012               	return	
 11300  002166                     __end_ofi2_ReadEE:
 11301                           	opt stack 0
 11302                           pclatu	equ	0xFFB
 11303                           pclath	equ	0xFFA
 11304                           tblptru	equ	0xFF8
 11305                           tblptrh	equ	0xFF7
 11306                           tblptrl	equ	0xFF6
 11307                           tablat	equ	0xFF5
 11308                           prodh	equ	0xFF4
 11309                           prodl	equ	0xFF3
 11310                           intcon	equ	0xFF2
 11311                           intcon2	equ	0xFF1
 11312                           intcon3	equ	0xFF0
 11313                           postinc0	equ	0xFEE
 11314                           fsr0h	equ	0xFEA
 11315                           fsr0l	equ	0xFE9
 11316                           wreg	equ	0xFE8
 11317                           plusw1	equ	0xFE3
 11318                           fsr1h	equ	0xFE2
 11319                           fsr1l	equ	0xFE1
 11320                           indf2	equ	0xFDF
 11321                           postinc2	equ	0xFDE
 11322                           postdec2	equ	0xFDD
 11323                           plusw2	equ	0xFDB
 11324                           fsr2h	equ	0xFDA
 11325                           fsr2l	equ	0xFD9
 11326                           status	equ	0xFD8
 11327                           
 11328 ;; *************** function _back *****************
 11329 ;; Defined at:
 11330 ;;		line 57 in file "eeprom.c"
 11331 ;; Parameters:    Size  Location     Type
 11332 ;;  runs            1    wreg     unsigned char 
 11333 ;; Auto vars:     Size  Location     Type
 11334 ;;  runs            1    0[COMRAM] unsigned char 
 11335 ;;  result          1    1[COMRAM] unsigned char 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      unsigned char 
 11338 ;; Registers used:
 11339 ;;		wreg, status,2, status,0
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;Total ram usage:        2 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; This function calls:
 11352 ;;		Nothing
 11353 ;; This function is called by:
 11354 ;;		_ReadRun
 11355 ;; This function uses a non-reentrant model
 11356 ;;
 11357                           
 11358                           	psect	text66
 11359  00211C                     __ptext66:
 11360                           	opt stack 0
 11361  00211C                     _back:
 11362                           	opt stack 23
 11363                           
 11364                           ;incstack = 0
 11365                           ;back@runs stored from wreg
 11366  00211C  6E01               	movwf	back@runs,c
 11367                           
 11368                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 11369  00211E  5001               	movf	back@runs,w,c
 11370  002120  0800               	sublw	0
 11371  002122  0100               	movlb	0	; () banked
 11372  002124  25C6               	addwf	_Latest& (0+255),w,b
 11373  002126  0F04               	addlw	4
 11374  002128  6E02               	movwf	back@result,c
 11375                           
 11376                           ;eeprom.c: 60: if (result > 4) {
 11377  00212A  0E04               	movlw	4
 11378  00212C  6402               	cpfsgt	back@result,c
 11379  00212E  D002               	goto	i2l3320
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;eeprom.c: 61: result -= 4;
 11383  002130  0E04               	movlw	4
 11384  002132  5E02               	subwf	back@result,f,c
 11385  002134                     i2l3320:
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;eeprom.c: 62: }
 11389                           ;eeprom.c: 63: return result;
 11390  002134  5002               	movf	back@result,w,c
 11391  002136  0012               	return	
 11392  002138                     __end_of_back:
 11393                           	opt stack 0
 11394                           pclatu	equ	0xFFB
 11395                           pclath	equ	0xFFA
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           intcon2	equ	0xFF1
 11404                           intcon3	equ	0xFF0
 11405                           postinc0	equ	0xFEE
 11406                           fsr0h	equ	0xFEA
 11407                           fsr0l	equ	0xFE9
 11408                           wreg	equ	0xFE8
 11409                           plusw1	equ	0xFE3
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           plusw2	equ	0xFDB
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           pclatu	equ	0xFFB
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon2	equ	0xFF1
 11429                           intcon3	equ	0xFF0
 11430                           postinc0	equ	0xFEE
 11431                           fsr0h	equ	0xFEA
 11432                           fsr0l	equ	0xFE9
 11433                           wreg	equ	0xFE8
 11434                           plusw1	equ	0xFE3
 11435                           fsr1h	equ	0xFE2
 11436                           fsr1l	equ	0xFE1
 11437                           indf2	equ	0xFDF
 11438                           postinc2	equ	0xFDE
 11439                           postdec2	equ	0xFDD
 11440                           plusw2	equ	0xFDB
 11441                           fsr2h	equ	0xFDA
 11442                           fsr2l	equ	0xFD9
 11443                           status	equ	0xFD8
 11444                           
 11445                           	psect	rparam
 11446  0000                     pclatu	equ	0xFFB
 11447                           pclath	equ	0xFFA
 11448                           tblptru	equ	0xFF8
 11449                           tblptrh	equ	0xFF7
 11450                           tblptrl	equ	0xFF6
 11451                           tablat	equ	0xFF5
 11452                           prodh	equ	0xFF4
 11453                           prodl	equ	0xFF3
 11454                           intcon	equ	0xFF2
 11455                           intcon2	equ	0xFF1
 11456                           intcon3	equ	0xFF0
 11457                           postinc0	equ	0xFEE
 11458                           fsr0h	equ	0xFEA
 11459                           fsr0l	equ	0xFE9
 11460                           wreg	equ	0xFE8
 11461                           plusw1	equ	0xFE3
 11462                           fsr1h	equ	0xFE2
 11463                           fsr1l	equ	0xFE1
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           plusw2	equ	0xFDB
 11468                           fsr2h	equ	0xFDA
 11469                           fsr2l	equ	0xFD9
 11470                           status	equ	0xFD8
 11471                           
 11472                           	psect	temp
 11473  00007D                     btemp:
 11474                           	opt stack 0
 11475  00007D                     	ds	1
 11476  0000                     int$flags	set	btemp
 11477                           pclatu	equ	0xFFB
 11478                           pclath	equ	0xFFA
 11479                           tblptru	equ	0xFF8
 11480                           tblptrh	equ	0xFF7
 11481                           tblptrl	equ	0xFF6
 11482                           tablat	equ	0xFF5
 11483                           prodh	equ	0xFF4
 11484                           prodl	equ	0xFF3
 11485                           intcon	equ	0xFF2
 11486                           intcon2	equ	0xFF1
 11487                           intcon3	equ	0xFF0
 11488                           postinc0	equ	0xFEE
 11489                           fsr0h	equ	0xFEA
 11490                           fsr0l	equ	0xFE9
 11491                           wreg	equ	0xFE8
 11492                           plusw1	equ	0xFE3
 11493                           fsr1h	equ	0xFE2
 11494                           fsr1l	equ	0xFE1
 11495                           indf2	equ	0xFDF
 11496                           postinc2	equ	0xFDE
 11497                           postdec2	equ	0xFDD
 11498                           plusw2	equ	0xFDB
 11499                           fsr2h	equ	0xFDA
 11500                           fsr2l	equ	0xFD9
 11501                           status	equ	0xFD8


Data Sizes:
    Strings     536
    Constant    18
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    115     124
    BANK0           128     42      71
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_51(CODE[17]), STR_50(CODE[17]), STR_49(CODE[4]), STR_48(CODE[4]), 
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[3]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[18]), STR_36(CODE[20]), 
		 -> STR_35(CODE[16]), STR_34(CODE[21]), STR_33(CODE[16]), STR_32(CODE[21]), 
		 -> STR_31(CODE[16]), STR_30(CODE[20]), STR_29(CODE[16]), STR_28(CODE[21]), 
		 -> STR_27(CODE[23]), STR_26(CODE[24]), STR_25(CODE[21]), STR_24(CODE[24]), 
		 -> STR_23(CODE[24]), STR_22(CODE[25]), STR_21(CODE[19]), STR_20(CODE[25]), 
		 -> STR_19(CODE[25]), STR_18(CODE[27]), STR_17(CODE[19]), STR_16(CODE[25]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[5]), 
		 -> STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[4]), 
		 -> STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[4]), 
		 -> STR_3(CODE[5]), STR_2(CODE[24]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    stopMoving$553	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_37(CODE[18]), STR_36(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->___ftge
    ___ftmul->___ftpack
    ___ftge->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_line1->i2_lcdInst
    i2_line0->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _line1->_lcdInst
    _line0->_lcdInst
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10636
                                             40 BANK0      2     2      0
                         _initialize
                              _line0
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5150
                                             38 BANK0      2     2      0
                            _getTime
                              _line0
                              _line1
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4407
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _line1                                                0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _line0                                                0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           1     1      0     944
                                             21 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              17    17      0   66505
                                             98 COMRAM    17    17      0
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (6) _simulate                                            38    38      0   54772
                                             60 COMRAM    38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3420
                                             40 COMRAM     3     3      0
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkC                                               2     0      2   12160
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              2     0      2   12160
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               2     0      2   12160
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                              11     6      5    8835
                                             47 COMRAM    11     6      5
                                 _AD
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                          _fluctuate
 ---------------------------------------------------------------------------------
 (9) _fluctuate                                            8     4      4     518
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2587
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             38 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2541
                                             23 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2186
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1621
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 2     0      2    1757
                                             21 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                2     0      2    1757
                                             21 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    1671
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                              9     9      0    8268
                                             53 COMRAM     9     9      0
                            _ReadRun
                           _showInfo
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    4012
                                             40 COMRAM    13     9      4
                      _captureKeypad
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            32    22     10    3217
                                             12 COMRAM    28    18     10
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_line1                                              0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_line0                                              0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _line0
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _line0
       _lcdInst
         _lcdNibble
     _line1
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _showInfo
       _captureKeypad
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_line1
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _showInfo
       _captureKeypad
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_line1
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      47       5       55.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     73      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      34        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 13 15:16:29 2017

         i2_I2C_Master_Start 2200           i2_I2C_Master_Write 21CE                           _AD 1FC0  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l423 2148                          l507 02F6  
                        l375 2166                          l927 1B06                          l937 1C46  
                        l874 14A2                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          wreg 000FE8                         ??_AD 0003  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
               __CFG_WDT$OFF 000000                         l3332 1FB6                         l3350 1436  
                       l3360 1490                         l3352 143C                         l3370 1AB6  
                       l3610 0046                         l3348 1426                         l3196 1F8E  
                       l3372 1AC2                         l3620 0080                         l3604 0020  
                       l3382 1AF8                         l3374 1AC8                         l3390 1C02  
                       l3630 00FE                         l3614 0050                         l3392 1C0E  
                       l3712 02FC                         l3720 0396                         l3640 014E  
                       l3608 0034                         l4272 1DEC                         l3394 1C14  
                       l3714 0348                         l3722 03A8                         l3706 02D0  
                       l3650 0192                         l3634 0124                         l3724 03B0  
                       l3708 02DC                         l3660 01E2                         l3644 0162  
                       l3636 0130                         l3628 00F8                         l3398 1C38  
                       l3662 01E8                         l3646 017A                         l3638 0136  
                       l3654 019A                         l3726 03BC                         l3656 01C6  
                       l3674 021E                         l3690 025A                         l3860 1848  
                       l3676 0224                         l3692 026C                         l3870 1876  
                       l3864 1852                         l3696 02A4                         l3698 02AE  
                       _ADFM 007E07                         _ADON 007E10                         _CW90 20A4  
                       STR_1 FFD4                         STR_2 FEAE                         STR_3 FFCF  
                       STR_4 FFEE                         STR_5 FFF9                         STR_6 FFF6  
                       STR_7 FFFC                         STR_8 FFF2                         STR_9 FFF9  
                       u2000 1F8C                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u3107 1E78                         u3117 1BA6                         u3127 1BB0  
                       u3137 1BDC                         u3057 1DCE                         u3147 1BE6  
                       u3067 190A                         u2605 1C80                         u3077 19E4  
                       u3087 1A0C                         u3097 1E44                         _RCEN 007E2B  
                       _RBPU 007F8F                         _PWMC 1220                checkAA@sorted 003B  
                       _back 211C                         _main 1DA8                 ___ftpack@arg 0001  
                       _mode 0074                 ___ftpack@exp 0004                         _time 0076  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007D  
       ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004                         prodh 000FF4  
                       prodl 000FF3              ReadRun@backruns 000B                         start 000E  
            __end_ofi2_line0 2218              __end_ofi2_line1 2210                __CFG_IESO$OFF 000000  
       __end_of_HexDecToDec2 1E3C                 simulate@stop 003F                   ReadRun@add 000C  
            __end_ofi2_putch 21B8                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0016  
               ___param_bank 000000                 ___ftmul@sign 0017                   i2getTime@i 0006  
                i2_lcdNibble 1CB0              __end_of_ReadRun 1022              __end_of_PermLog 1A98  
                      ?_CW90 0016             ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001  
                      ?_PWMC 0009             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_back 0001                        ?_main 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D                        _CCW90 20C2              __end_of___awdiv 199E  
                      _EEADR 000FA9                        STR_10 FFF6                        STR_11 FFFC  
                      STR_12 FFDD                        STR_20 FE34                        STR_13 FFF9  
                      STR_21 FF59                        STR_14 FFF6                        STR_30 FF45  
                      STR_22 FE02                        STR_31 FFC4                        STR_15 FFFC  
                      STR_23 FE96                        STR_40 FFE2                        STR_32 FF07  
                      STR_24 FE66                        STR_16 FE4D                        STR_33 FFC4  
                      STR_41 FFEA                        STR_17 FF6C                        STR_25 FF1C  
                      STR_42 FFF3                        STR_50 FFA2                        STR_34 FEDD  
                      STR_26 FE7E                        STR_18 FDE7                        STR_35 FFC4  
                      STR_43 FFE6                        STR_51 FFB3                        STR_27 FEC6  
                      STR_19 FE1B                        STR_44 FFE2                        STR_52 FF91  
                      STR_36 FF31                        STR_28 FEF2                        STR_45 FFEA  
                      STR_29 FFC4                        STR_37 FF7F                        STR_38 FFEE  
                      STR_46 FFDE                        STR_47 FFE6                        STR_39 FFE6  
                      STR_48 FFE2                        STR_49 FFEA              __end_of___ftdiv 13F8  
            __end_of_WriteEE 205C              __end_of___lldiv 14B4              __end_of___ftmul 1220  
            ___awdiv@divisor 0003                        _LATC0 007C58                        _LATC1 007C59  
                      _LATC2 007C5A                        _LATC5 007C5D              __end_of___lwdiv 1B10  
                      i2l120 055A              __end_of___lwmod 1C50                        i2l116 0506  
                      i2l151 10EA                        i2l143 10B6                        i2l216 2100  
                      i2l136 10BA                        i2l146 10EE                        i2l219 210C  
                      i2l235 0BF0                        i2l317 0EEA                        i2l262 1258  
                      i2l423 215E                        i2l280 1F66                        i2l507 0968  
                      i2l429 2052                        i2l375 217A                        i2l298 1FCE  
                      i2l802 13C6                        i2l744 175A                        i2l927 1D4E  
                      i2l937 1EBA              ___awdiv@counter 0005              __end_of_checkAA 16CC  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              simulate@F3110 00BA                simulate@F3106 00C2                simulate@F3108 00BE  
              simulate@F3117 00B0                simulate@F3119 00AA                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 21AC               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000              __end_of_getTime 1894               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 1E82  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FDDF             __end_ofi2_ReadEE 2166                        _line0 21E0  
                      _line1 21D8              __end_of_isdigit 1FC0                ___ftpack@sign 0005  
                      _putch 218C                        pclath 000FFA              __end_of_showRTC 191A  
                      tablat 000FF5             __end_ofi2___wmul 2082                        plusw1 000FE3  
                      plusw2 000FDB                        status 000FD8                simulate@start 0059  
             __CFG_PBADEN$ON 000000                i2printf@width 0026             __end_ofi2_printf 0A30  
         __size_ofi2___lwdiv 0052                 __end_of_CW90 20C2           __size_ofi2___lwmod 0042  
                ReadRun@time 0005                 __end_of_PWMC 1312              __initialization 1FEA  
               __end_of_back 2138           __size_ofi2_lcdInst 000C                 __end_of_main 1DF4  
         __size_ofi2_getTime 0076                   i2printf@ap 001B                   i2printf@cp 001D  
              ReadEE@address 0080                       ??_CW90 0018           __size_ofi2_isdigit 001E  
                     ??_PWMC 000F                       ??_back 0001                       ??_main 00A8  
                     ?_CCW90 0016                __activetblptr 000002                checkV@channel 0030  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0081                    CCW90@port 0016  
         ??_I2C_Master_Start 0081                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0083                       ?_line0 0001                       ?_line1 0001  
                     _ADRESH 000FC4                       _EEADRH 000FAA                       _ADRESL 000FC3  
                     _EEDATA 000FA8                       _EECON2 000FA7             ___awdiv@dividend 0001  
            i2lcdNibble@data 0002             __end_of___awtoft 1EFC                       ?_putch 0001  
           __end_of___ftpack 177A              i2lcdNibble@temp 0001                       _INT1IE 007F83  
                     _INT1IF 007F80             __end_of_WriteRun 0DA6                       _INT2IE 007F84  
                     _INT2IF 007F81                       _CVRCON 000FB5                       i2l3000 11AE  
                     i2l3010 11D6                       i2l3004 11BE                       i2l3030 192E  
                     i2l3014 11E6                       i2l3122 20F6                       i2l3042 1954  
                     i2l3132 1D1C                       i2l3044 195C                       i2l3036 193E  
                     i2l3220 1282                       i2l4020 1B4E                       i2l3134 1D24  
                     i2l3062 1994                       i2l3054 197C                       i2l3046 1960  
                     i2l3320 2134                       i2l3144 1D44                       i2l3136 1D28  
                     i2l3160 1EB0                       i2l3152 1E90                       i2l3208 124A  
                     i2l4016 1B46                       i2l4120 0584                       i2l4112 054E  
                     i2l3154 1E98                       i2l3058 1986                       i2l3242 12FA  
                     i2l3074 1ED8                       i2l3082 17AA                       i2l4026 1B6A  
                     i2l4106 0530                       i2l3156 1E9C                       i2l3500 087C  
                     i2l3236 12E2                       i2l3228 12B2                       i2l3092 1806  
                     i2l3246 130A                       i2l3238 12EC                       i2l3086 17DA  
                     i2l3262 0E0A                       i2l3254 0DE0                       i2l4126 05A2  
                     i2l4070 043E                       i2l3520 08CA                       i2l3504 0896  
                     i2l3280 0E7C                       i2l3272 0E62                       i2l3256 0DF0  
                     i2l4128 05AE                       i2l4160 06B0                       i2l4240 10C2  
                     i2l3506 089A                       i2l3274 0E72                       i2l3258 0E00  
                     i2l3426 2030                       i2l4226 108C                       i2l4218 106E  
                     i2l3540 092A                       i2l3452 073C                       i2l3268 0E58  
                     i2l4092 04DC                       i2l4236 109E                       i2l3550 094C  
                     i2l3542 0932                       i2l3518 08C6                       i2l3534 08F6  
                     i2l3454 074A                       i2l4246 10D2                       i2l3552 0954  
                     i2l3536 0906                       i2l3480 0800                       i2l3472 07DC  
                     i2l3464 077E                       i2l3448 072C                       i2l2920 1D90  
                     i2l3490 083C                       i2l3482 0806                       i2l3474 07E0  
                     i2l3458 0750                       i2l3570 0A16                       i2l2850 1728  
                     i2l2842 16EA                       i2l3810 1576                       i2l3730 162A  
                     i2l4098 04FA                       i2l3556 096E                       i2l3564 09F8  
                     i2l3484 0818                       i2l2852 1746                       i2l2844 16F4  
                     i2l2940 1362                       i2l4460 155E                    ??i2_line0 0004  
                     i2l3558 09B2                       i2l3566 0A08                       i2l3494 084E  
                     i2l3478 07F6                       i2l2854 1750                       i2l2846 1712  
                     i2l2838 16DC                       i2l2934 133A                       i2l4462 16B2  
                  ??i2_line1 0004                       i2l3568 0A0E                       i2l3488 082A  
                     i2l2960 13A0                       i2l3832 15D0                       i2l4464 16C2  
                     i2l3752 1680                       i2l3498 0854                       i2l3906 0C66  
                     i2l4466 1602                       i2l3826 15BE                       i2l3818 159A  
                     i2l3746 166E                       i2l3738 164A                       i2l4458 154E  
                     i2l3770 14C2                       i2l3940 0A60                       i2l2980 1154  
                     i2l4468 1612                       i2l3942 0A6E                       i2l3838 15DA  
                     i2l3758 168A                       i2l3960 0B48                       i2l3792 151C  
                     i2l3954 0B14                       i2l2986 117C                       i2l3786 150A  
                     i2l3778 14E6                       i2l3972 0BB8                       i2l3948 0A98  
                     i2l3980 0BFC                       i2l3892 1F4C                       i2l3966 0B80  
                     i2l3982 0C3A                       i2l3798 1526                       i2l3978 0BF2  
                     u172_41 113C                       u174_41 1164                       u167_41 1322  
                     u169_41 134A                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
                  AD@channel 0005                checkV@voltage 0039                    ??_ReadRun 0007  
                     _ReadEE 2138                    ??_PermLog 0036                       _Latest 00C6  
             __CFG_XINST$OFF 000000        __end_of_captureKeypad 211C                       ___ftge 177A  
                     ___wmul 1EFC                       _check9 1568                       _checkC 14B4  
                  ??___awdiv 0005                       _checkV 0DA6               __CFG_STVREN$ON 000000  
                  ??___ftdiv 001E                    ??_WriteEE 0004                    ??___lldiv 0088  
                  ??___ftmul 000F                    ??___lwdiv 0084                    ??___lwmod 008B  
                  ??_checkAA 003D                       clear_0 1FF0                       clear_1 1FFC  
           ___awdiv@quotient 0007                       _intrpt 0008                    ??_lcdInst 0082  
                     _printf 0012                    ??_getTime 0085        ___ftmul@f3_as_product 0013  
                PermLog@time 003D                    ??_initLCD 0083                    ??_isdigit 0080  
           __end_of_showInfo 0C44            __end_ofi2___lwdiv 1D58                 __mediumconst FDD4  
          __end_ofi2___lwmod 1EC4                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8             __end_of_simulate 0722                    ??_showRTC 00A6  
          __end_ofi2_lcdInst 21C4            __end_ofi2_getTime 1B86               simulate@period 0061  
             simulate@portCW 0043        __size_of_HexDecToDec2 0048            __end_ofi2_isdigit 20FE  
             simulate@sorted 005D                   __accesstop 0080      __end_of__initialization 2002  
                 ___ftge@ff1 0027                   ___ftge@ff2 002A                __end_of_CCW90 20E0  
              ___rparam_used 000001                   ___ftdiv@f1 0018                   ___ftdiv@f2 001B  
                 ___ftdiv@f3 0022                   ___awtoft@c 0009                   ___ftmul@f1 0009  
                 ___ftmul@f2 000C           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
              __end_of_line0 21E8                __end_of_line1 21E0                    ?i2_ReadEE 0001  
              __end_of_putch 219C                  i2printf@idx 001F                  i2printf@len 0020  
                i2printf@val 0023                   __end_of_AD 1FEA                      ??_CCW90 0018  
                  ?i2___wmul 0001           __size_of_lcdNibble 0068                  i2putch@data 0003  
               _HexDecToDec2 1DF4            HexDecToDec2@digit 000E                    ?i2_printf 000D  
          HexDecToDec2@tenth 000C                      ??_line0 0083                      ??_line1 0083  
                    ??_putch 0082                   back@result 0002                   __pbssBANK0 00AA  
         __size_of_fluctuate 0050                      ?_ReadEE 0080                 stopMoving@em 002B  
                    ?___ftge 0027                 WriteRun@time 0009                 ?i2_lcdNibble 0001  
                    ?___wmul 0080                      ?_check9 003B                      ?_checkC 003B  
                    ?_checkV 0030                   ??i2_ReadEE 0003                      ?_intrpt 0001  
                  ?___awtoft 0009                    ?___ftpack 0001                      ?_printf 008C  
                  ?_WriteRun 0007                   ??i2___wmul 0005               WriteRun@sorted 0007  
                 ??i2_printf 0017                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7               checkV@voltage2 0035               checkV@voltage3 0037  
                    i2_line0 2210                      i2_line1 2208                      i2_putch 21AC  
             _stopMoving$553 0029  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1BEE  
                    _ReadRun 0EF0  __size_ofi2_I2C_Master_Write 000A                      _PermLog 1A1C  
                    __Hparam 0000              __size_of_ReadEE 0018                      __Lparam 0000  
                 _initLatest 2082                    ?_showInfo 0029              __size_of___ftge 0090  
                  ?_simulate 0001                      ___awdiv 191A                      ___ftdiv 1312  
                    _WriteEE 2036                      ___lldiv 13F8              __size_of___wmul 0036  
                    ___ftmul 112C              __size_of_check9 00B4              __size_of_checkC 00B4  
            __size_of_checkV 014A                      ___lwdiv 1A98                      ___lwmod 1BEE  
                    _checkAA 161C                      __pcinit 1FEA                   ??___awtoft 000C  
                 ??___ftpack 0006                      __ramtop 1000                   _initialize 199E  
            __size_of_intrpt 1124                      _lcdInst 219C                   ??_WriteRun 000B  
                    __ptext0 1DA8                      __ptext1 1894                      __ptext2 0012  
                    __ptext3 218C                      _getTime 180A                      __ptext4 1F96  
                    __ptext5 1EFC                      __ptext6 1BEE                      __ptext7 1A98  
                    __ptext8 21D8                      __ptext9 21E0              __size_of_printf 03C8  
               PermLog@F3084 00B6            __end_of_fluctuate 1DA8                      _initLCD 1E3C  
          __end_of_hexpowers FDE7                      _dpowers FDD5                      _isdigit 1F96  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E                      _showRTC 1894  
   __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008               __pintcode_body 1022  
       end_of_initialization 2002                __Lmediumconst FDD4                      int_func 1022  
        i2___wmul@multiplier 0001    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0084              ___lldiv@counter 008C                    _PWMC$1400 0012  
                  _PWMC$1401 0013                    _PWMC$1399 0011                   ??_showInfo 002D  
                    printf@c 00A5                      printf@f 008C             I2C_Master_Init@c 008D  
           I2C_Master_Read@a 0081                      postdec2 000FDD                   ??_simulate 003D  
                    postinc0 000FEE                      postinc2 000FDE                    _PORTBbits 000F81  
                PWMC@widthus 0009              simulate@portCCW 0049            i2_I2C_Master_Read 2010  
          i2_I2C_Master_Wait 217A            i2_I2C_Master_Stop 21F8            i2___lwdiv@divisor 0003  
                  i2___lwdiv 1D06                    i2___lwmod 1E82            i2___lwdiv@counter 0007  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
                  i2_lcdInst 21B8                    i2_getTime 1B10                  ___ftdiv@exp 0025  
                printf@width 00A3              PermLog@backruns 003C                   _stopMoving 1F32  
        ??i2_I2C_Master_Read 0002                    i2_isdigit 20E0          ??i2_I2C_Master_Wait 0001  
        ??i2_I2C_Master_Stop 0002                ReadRun@sorted 0003                  simulate@now 0055  
               check9@sorted 003B                  ___ftmul@exp 0012               __end_of_ReadEE 2150  
                ?_initLatest 0001               __end_of___ftge 180A               __end_of___wmul 1F32  
             __end_of_check9 161C               __end_of_checkC 1568               __end_of_checkV 0EF0  
       __size_ofi2_lcdNibble 0056                  ?_initialize 0001                i2lcdInst@data 0003  
               checkC@sorted 003B            __size_ofi2_ReadEE 0016               __end_of_intrpt 112C  
           i2___wmul@product 0005               __end_of_printf 03DA                 i2printf@flag 0025  
            i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 2036    __end_ofi2_I2C_Master_Wait 218C  
               i2printf@prec 0022          start_initialization 1FEA    __end_ofi2_I2C_Master_Stop 2200  
          __size_ofi2___wmul 0026                    i2printf@c 0028                    i2printf@f 000D  
     __size_of_captureKeypad 001E        i2I2C_Master_Read@temp 0003                i2getTime@time 0004  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 030E  
                 fluctuate@a 0001                   fluctuate@b 0003                   fluctuate@i 0007  
          ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081            ??_I2C_Master_Wait 0080  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081                   ?i2_getTime 0004  
                 ?i2_isdigit 0001                     ??_ReadEE 0082                     CW90@port 0016  
                   ??___ftge 002D                     ??___wmul 0084                     ??_check9 003D  
                   ??_checkC 003D                     ??_checkV 0035             __CFG_LPT1OSC$OFF 000000  
                   ??_intrpt 0063                     ??_printf 0094                  WriteEE@data 0003  
          __size_of___awtoft 0038            __size_of___ftpack 00AE            __size_of_WriteRun 0162  
                __pbssCOMRAM 0074                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                 _isdigit$1056 0081          __size_of_initLatest 0022  
                   ?i2_line0 0001                     ?i2_line1 0001                     ?i2_putch 0001  
             intrpt@keypress 0073          __size_of_initialize 007E                  ?_stopMoving 0001  
           _I2C_Master_Start 21F0                     ?_ReadRun 0003          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 21C4                     ?_PermLog 0001             ___lwdiv@dividend 0080  
          __CFG_CCP2MX$PORTC 000000                  WriteRun@add 000D                _captureKeypad 20FE  
                  __pintcode 0008                __pmediumconst FDD4                    _lcdNibble 1B86  
                   ?___awdiv 0001                     ?___ftdiv 0018                     ?_WriteEE 0001  
                   ?___lldiv 0080                     ?___ftmul 0009                     ?___lwdiv 0080  
                   ?___lwmod 0087            __size_of_showInfo 0214                     ?_checkAA 003B  
          __size_of_simulate 0348                     ?_lcdInst 0001                     ?_getTime 0083  
                   PWMC@port 000D               __size_of_CCW90 001E                     ?_initLCD 0001  
                   ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012  
 __size_ofi2_I2C_Master_Stop 0008                    checkV@max 0032                    _fluctuate 1D58  
                   ?_showRTC 0001                    _hexpowers FDDF             ___lwdiv@quotient 0084  
             __size_of_line0 0008               __size_of_line1 0008                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0010                  __size_of_AD 002A  
 __end_ofi2_I2C_Master_Start 2208   __end_ofi2_I2C_Master_Write 21D8                  ??i2_lcdInst 0003  
                ??i2_getTime 0006               ___wmul@product 0084                     _LATDbits 000F8C  
                ??i2_isdigit 0001                     i2u211_45 12EA                     i2u211_46 12EC  
                   i2u205_45 128A                     i2u205_46 128C                     i2u208_45 12BA  
                   i2u208_46 12BC                     i2u320_47 1CF4                     i2u321_47 1CFE  
                   i2u163_40 1DA4                     i2u163_41 1DA0                     i2u315_47 06F6  
                   i2u316_47 12FC                     i2u237_40 202E                     i2u317_47 1A74  
                   i2u318_47 1CC8                     i2u319_47 1CD2                     i2u291_41 0494  
             ?_captureKeypad 0001                     _PIR2bits 000FA1                     i2u292_41 04A6  
                   i2u284_45 1E00                     i2u287_40 0C5A             __CFG_WDTPS$32768 000000  
                 PWMC@cycles 000B                   ?_lcdNibble 0001                     i2_ReadEE 2150  
                 _ADCON0bits 000FC2            ___wmul@multiplier 0080                     i2___wmul 205C  
              lcdNibble@data 0081                   printf@flag 00A2                lcdNibble@temp 0080  
                 printf@prec 009F                   simulate@AA 004F          __size_of_stopMoving 0036  
                 simulate@V9 0053                   ?_fluctuate 0001                     i2_printf 0722  
      captureKeypad@keypress 0003          I2C_Master_Read@temp 0082             __size_ofi2_line0 0008  
           __size_ofi2_line1 0008             __size_ofi2_putch 000C                   _EECON1bits 000FA6  
             showInfo@sorted 002B                     __Hrparam 0000             __size_of_ReadRun 0132  
                   __Lrparam 0000             __size_of_PermLog 007C                 ??_initLatest 0082  
         __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 0084             __size_of___ftdiv 00E6  
      i2___wmul@multiplicand 0003             __size_of_WriteEE 0026             __size_of___lldiv 00BC  
           __size_of___ftmul 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
               ??_initialize 0095                     ___awtoft 1EC4                     ___ftpack 16CC  
           __size_of_checkAA 00B0                     _WriteRun 0C44           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010             __size_of_getTime 008A              HexDecToDec2@hex 0007  
            _I2C_Master_Init 1C50              _I2C_Master_Read 1F68             __size_of_initLCD 0046  
                   back@runs 0001                ?_HexDecToDec2 0007              _I2C_Master_Wait 2166  
            _I2C_Master_Stop 21E8             __size_of_isdigit 002A              ___lwdiv@divisor 0082  
            ___lwdiv@counter 0086                     __ptext10 180A                     __ptext11 21C4  
                   __ptext20 219C                     __ptext12 21E8                     __ptext21 1B86  
                   __ptext13 21F0                     __ptext30 2010                     __ptext22 1C50  
                   __ptext14 1F68                     __ptext31 217A                     __ptext23 13F8  
                   __ptext15 2166                     __ptext40 1312                     __ptext32 1F32  
                   __ptext16 199E                     __ptext41 1EC4                     __ptext33 14B4  
                   __ptext25 03DA                     __ptext17 2082                     __ptext50 191A  
                   __ptext42 16CC                     __ptext34 161C                     __ptext26 1B10  
                   __ptext18 2138                     __ptext51 1A1C                     __ptext43 1FC0  
                   __ptext35 1568                     __ptext27 21CE                     __ptext19 1E3C  
                   __ptext60 2210                     __ptext52 0A30                     __ptext44 0C44  
                   __ptext36 0DA6                     __ptext28 21F8                     __ptext61 21B8  
                   __ptext53 0722                     __ptext45 2036                     __ptext37 1D58  
                   __ptext29 2200                     __ptext62 1CB0                     __ptext54 21AC  
                   __ptext46 1DF4                     __ptext38 112C                     __ptext63 20FE  
                   __ptext55 20E0                     __ptext47 20A4                     __ptext39 177A  
                   __ptext64 0EF0                     __ptext56 205C                     __ptext48 20C2  
                   __ptext65 2150                     __ptext57 1E82                     __ptext49 1220  
                   __ptext66 211C                     __ptext58 1D06                     __ptext59 2208  
           __size_of_showRTC 0086           __end_of_initLatest 20A4                __size_of_CW90 001E  
              __size_of_PWMC 00F2               i2_isdigit$1056 0002                __size_of_back 001C  
              __size_of_main 004C           __end_of_initialize 1A1C              ??_captureKeypad 0003  
                   _showInfo 0A30                ??i2_lcdNibble 0001                  ??_lcdNibble 0080  
                   getTime@i 0085                     _simulate 03DA                     int$flags 007D  
                  printf@idx 009C                    printf@len 009D                    printf@val 00A0  
                  simulate@C 0051               ??_HexDecToDec2 0009                    putch@data 0082  
   __end_of_I2C_Master_Start 21F8     __end_of_I2C_Master_Write 21CE                   _INTCONbits 000FF2  
              PermLog@sorted 0038                  ??_fluctuate 0005                PWMC@countdown 0014  
                   isdigit@c 0082                _simulate$1505 0041                     intlevel2 0000  
           ___lwmod@dividend 0087             ___lldiv@dividend 0080                 ??_stopMoving 0029  
                   printf@ap 0098                     printf@cp 009A      __end_of_I2C_Master_Init 1CB0  
    __end_of_I2C_Master_Read 1F96      __end_of_I2C_Master_Wait 217A      __end_of_I2C_Master_Stop 21F0  
                lcdInst@data 0082                 showInfo@time 0029                 showInfo@stop 0034  
               showInfo@type 0032          __end_ofi2_lcdNibble 1D06             ___lldiv@quotient 0088  
          I2C_Master_Write@d 0081              ___lwmod@divisor 0089              ___lwmod@counter 008B  
         __end_of_stopMoving 1F68               WriteEE@address 0001                  getTime@time 0083  
